
AMEC_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc88  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800de68  0800de68  0000ee68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4d0  0800e4d0  000101fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e4d0  0800e4d0  0000f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4d8  0800e4d8  000101fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4d8  0800e4d8  0000f4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4dc  0800e4dc  0000f4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800e4e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001fc  0800e6dc  000101fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800e6dc  00010738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167b4  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3e  00000000  00000000  000269e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00029720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f34  00000000  00000000  0002aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204aa  00000000  00000000  0002b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169be  00000000  00000000  0004be96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce038  00000000  00000000  00062854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013088c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  001308d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00137398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800de50 	.word	0x0800de50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800de50 	.word	0x0800de50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001076:	4a20      	ldr	r2, [pc, #128]	@ (80010f8 <MX_FDCAN1_Init+0x88>)
 8001078:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 800108e:	2200      	movs	r2, #0
 8001090:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010a0:	2211      	movs	r2, #17
 80010a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010be:	2201      	movs	r2, #1
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010e2:	f002 ff3d 	bl	8003f60 <HAL_FDCAN_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010ec:	f001 ff99 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000218 	.word	0x20000218
 80010f8:	40006400 	.word	0x40006400

080010fc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09a      	sub	sp, #104	@ 0x68
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2244      	movs	r2, #68	@ 0x44
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f008 f914 	bl	800934a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_FDCAN_MspInit+0xbc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d141      	bne.n	80011b0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001136:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fcc5 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001148:	f001 ff6b 	bl	8003022 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001150:	4a1a      	ldr	r2, [pc, #104]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001156:	6593      	str	r3, [r2, #88]	@ 0x58
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800117c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001180:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800118e:	2309      	movs	r3, #9
 8001190:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f003 fd02 	bl	8004ba4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2015      	movs	r0, #21
 80011a6:	f002 fea6 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011aa:	2015      	movs	r0, #21
 80011ac:	f002 febd 	bl	8003f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3768      	adds	r7, #104	@ 0x68
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40006400 	.word	0x40006400
 80011bc:	40021000 	.word	0x40021000

080011c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d6:	4b39      	ldr	r3, [pc, #228]	@ (80012bc <MX_GPIO_Init+0xfc>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a38      	ldr	r2, [pc, #224]	@ (80012bc <MX_GPIO_Init+0xfc>)
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <MX_GPIO_Init+0xfc>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b33      	ldr	r3, [pc, #204]	@ (80012bc <MX_GPIO_Init+0xfc>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a32      	ldr	r2, [pc, #200]	@ (80012bc <MX_GPIO_Init+0xfc>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b30      	ldr	r3, [pc, #192]	@ (80012bc <MX_GPIO_Init+0xfc>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <MX_GPIO_Init+0xfc>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a2c      	ldr	r2, [pc, #176]	@ (80012bc <MX_GPIO_Init+0xfc>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <MX_GPIO_Init+0xfc>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M1en_Pin|M2inA_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2103      	movs	r1, #3
 8001222:	4827      	ldr	r0, [pc, #156]	@ (80012c0 <MX_GPIO_Init+0x100>)
 8001224:	f003 fe58 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1inA_Pin|M1inB_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f003 fe51 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2en_Pin|M2inB_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2130      	movs	r1, #48	@ 0x30
 800123a:	4822      	ldr	r0, [pc, #136]	@ (80012c4 <MX_GPIO_Init+0x104>)
 800123c:	f003 fe4c 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1en_Pin M2inA_Pin */
  GPIO_InitStruct.Pin = M1en_Pin|M2inA_Pin;
 8001240:	2303      	movs	r3, #3
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	481a      	ldr	r0, [pc, #104]	@ (80012c0 <MX_GPIO_Init+0x100>)
 8001258:	f003 fca4 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : tirette_Pin */
  GPIO_InitStruct.Pin = tirette_Pin;
 800125c:	2320      	movs	r3, #32
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001260:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(tirette_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f003 fc96 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1inA_Pin M1inB_Pin */
  GPIO_InitStruct.Pin = M1inA_Pin|M1inB_Pin;
 8001278:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800127c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001294:	f003 fc86 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2en_Pin M2inB_Pin */
  GPIO_InitStruct.Pin = M2en_Pin|M2inB_Pin;
 8001298:	2330      	movs	r3, #48	@ 0x30
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_GPIO_Init+0x104>)
 80012b0:	f003 fc78 	bl	8004ba4 <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48001400 	.word	0x48001400
 80012c4:	48000400 	.word	0x48000400

080012c8 <update_statut_odometrie>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
float delta_dist_roue_droite_mm = 0, delta_dist_roue_gauche_mm = 0;

void update_statut_odometrie(int32_t tick_gauche, int32_t tick_droit) {
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]

	statut_odometrie.dist_roue_droite_mm = coef_droit * (float)tick_droit * PERIMETRE_ROUE_MM / (float)TICK_PAR_TOUR;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012de:	4b72      	ldr	r3, [pc, #456]	@ (80014a8 <update_statut_odometrie+0x1e0>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	ee17 0a90 	vmov	r0, s15
 80012ec:	f7ff f954 	bl	8000598 <__aeabi_f2d>
 80012f0:	a36b      	add	r3, pc, #428	@ (adr r3, 80014a0 <update_statut_odometrie+0x1d8>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f9a7 	bl	8000648 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <update_statut_odometrie+0x1e4>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fc90 	bl	8000c38 <__aeabi_d2f>
 8001318:	4603      	mov	r3, r0
 800131a:	4a65      	ldr	r2, [pc, #404]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 800131c:	6013      	str	r3, [r2, #0]
	statut_odometrie.dist_roue_gauche_mm = coef_gauche * (float)tick_gauche * PERIMETRE_ROUE_MM / (float)TICK_PAR_TOUR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	4b62      	ldr	r3, [pc, #392]	@ (80014b4 <update_statut_odometrie+0x1ec>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f92f 	bl	8000598 <__aeabi_f2d>
 800133a:	a359      	add	r3, pc, #356	@ (adr r3, 80014a0 <update_statut_odometrie+0x1d8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f982 	bl	8000648 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b56      	ldr	r3, [pc, #344]	@ (80014ac <update_statut_odometrie+0x1e4>)
 8001352:	f7ff faa3 	bl	800089c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc6b 	bl	8000c38 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 8001366:	6053      	str	r3, [r2, #4]

	delta_dist_roue_droite_mm = statut_odometrie.dist_roue_droite_mm - precedent_statut.dist_roue_droite_mm;
 8001368:	4b51      	ldr	r3, [pc, #324]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <update_statut_odometrie+0x1f0>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	4b50      	ldr	r3, [pc, #320]	@ (80014bc <update_statut_odometrie+0x1f4>)
 800137a:	edc3 7a00 	vstr	s15, [r3]
	delta_dist_roue_gauche_mm = statut_odometrie.dist_roue_gauche_mm - precedent_statut.dist_roue_gauche_mm; //	return statut_actuel;
 800137e:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 8001380:	ed93 7a01 	vldr	s14, [r3, #4]
 8001384:	4b4c      	ldr	r3, [pc, #304]	@ (80014b8 <update_statut_odometrie+0x1f0>)
 8001386:	edd3 7a01 	vldr	s15, [r3, #4]
 800138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138e:	4b4c      	ldr	r3, [pc, #304]	@ (80014c0 <update_statut_odometrie+0x1f8>)
 8001390:	edc3 7a00 	vstr	s15, [r3]

	float delta_distance_mm = 0.0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
	delta_distance_mm = (delta_dist_roue_droite_mm + delta_dist_roue_gauche_mm) / 2.0;
 800139a:	4b48      	ldr	r3, [pc, #288]	@ (80014bc <update_statut_odometrie+0x1f4>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <update_statut_odometrie+0x1f8>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b2:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calcul de l'angle de rotation en radians
	float angle_rad = (statut_odometrie.dist_roue_gauche_mm - statut_odometrie.dist_roue_droite_mm) / ECART_ROUE_MM;
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 80013b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80013bc:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c6:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80014c4 <update_statut_odometrie+0x1fc>
 80013ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ce:	edc7 7a02 	vstr	s15, [r7, #8]

	// Mise à jour de la distance et de l'angle
	statut_odometrie.angle_rad = angle_rad;
 80013d2:	4a37      	ldr	r2, [pc, #220]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
	statut_odometrie.x = precedent_statut.x + delta_distance_mm * cos(angle_rad);
 80013d8:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <update_statut_odometrie+0x1f0>)
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff f8d6 	bl	8000598 <__aeabi_f2d>
 80013ec:	4680      	mov	r8, r0
 80013ee:	4689      	mov	r9, r1
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff f8d1 	bl	8000598 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	ec43 2b10 	vmov	d0, r2, r3
 80013fe:	f00b fbab 	bl	800cb58 <cos>
 8001402:	ec53 2b10 	vmov	r2, r3, d0
 8001406:	4640      	mov	r0, r8
 8001408:	4649      	mov	r1, r9
 800140a:	f7ff f91d 	bl	8000648 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7fe ff61 	bl	80002dc <__adddf3>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fc09 	bl	8000c38 <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 800142a:	6113      	str	r3, [r2, #16]
	statut_odometrie.y = precedent_statut.y + delta_distance_mm * sin(angle_rad);
 800142c:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <update_statut_odometrie+0x1f0>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8b1 	bl	8000598 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff f8ac 	bl	8000598 <__aeabi_f2d>
 8001440:	4680      	mov	r8, r0
 8001442:	4689      	mov	r9, r1
 8001444:	68b8      	ldr	r0, [r7, #8]
 8001446:	f7ff f8a7 	bl	8000598 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	ec43 2b10 	vmov	d0, r2, r3
 8001452:	f00b fbd5 	bl	800cc00 <sin>
 8001456:	ec53 2b10 	vmov	r2, r3, d0
 800145a:	4640      	mov	r0, r8
 800145c:	4649      	mov	r1, r9
 800145e:	f7ff f8f3 	bl	8000648 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe ff37 	bl	80002dc <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fbdf 	bl	8000c38 <__aeabi_d2f>
 800147a:	4603      	mov	r3, r0
 800147c:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 800147e:	6153      	str	r3, [r2, #20]

	precedent_statut = statut_odometrie;
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <update_statut_odometrie+0x1f0>)
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <update_statut_odometrie+0x1e8>)
 8001484:	4614      	mov	r4, r2
 8001486:	461d      	mov	r5, r3
 8001488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001490:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800149e:	bf00      	nop
 80014a0:	347764a4 	.word	0x347764a4
 80014a4:	40646b9c 	.word	0x40646b9c
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	40a00000 	.word	0x40a00000
 80014b0:	20000280 	.word	0x20000280
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000298 	.word	0x20000298
 80014bc:	20000330 	.word	0x20000330
 80014c0:	20000334 	.word	0x20000334
 80014c4:	43660000 	.word	0x43660000

080014c8 <send_val_tirette_mise>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void send_val_tirette_mise(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef header_tirette_mise = { 0 };
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2224      	movs	r2, #36	@ 0x24
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f007 ff38 	bl	800934a <memset>

	header_tirette_mise.Identifier = 0x211;
 80014da:	f240 2311 	movw	r3, #529	@ 0x211
 80014de:	607b      	str	r3, [r7, #4]
	header_tirette_mise.IdType = FDCAN_STANDARD_ID;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
	header_tirette_mise.TxFrameType = FDCAN_REMOTE_FRAME;
 80014e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014e8:	60fb      	str	r3, [r7, #12]
	header_tirette_mise.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
	header_tirette_mise.FDFormat = FDCAN_FD_CAN;
 80014ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80014f2:	61fb      	str	r3, [r7, #28]
	header_tirette_mise.MessageMarker = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header_tirette_mise, 0);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <send_val_tirette_mise+0x44>)
 8001500:	f002 feb0 	bl	8004264 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000218 	.word	0x20000218

08001510 <send_val_tirette_retiree>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void send_val_tirette_retiree(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef header_tirette_retiree = { 0 };
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2224      	movs	r2, #36	@ 0x24
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f007 ff14 	bl	800934a <memset>

	header_tirette_retiree.Identifier = 0x212;
 8001522:	f240 2312 	movw	r3, #530	@ 0x212
 8001526:	607b      	str	r3, [r7, #4]
	header_tirette_retiree.IdType = FDCAN_STANDARD_ID;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
	header_tirette_retiree.TxFrameType = FDCAN_REMOTE_FRAME;
 800152c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001530:	60fb      	str	r3, [r7, #12]
	header_tirette_retiree.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
	header_tirette_retiree.FDFormat = FDCAN_FD_CAN;
 8001536:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800153a:	61fb      	str	r3, [r7, #28]
	header_tirette_retiree.MessageMarker = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header_tirette_retiree, 0);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	4803      	ldr	r0, [pc, #12]	@ (8001554 <send_val_tirette_retiree+0x44>)
 8001548:	f002 fe8c 	bl	8004264 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000218 	.word	0x20000218

08001558 <send_arret_automate>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void send_arret_automate(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef header_arret = { 0 };
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2224      	movs	r2, #36	@ 0x24
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f007 fef0 	bl	800934a <memset>

	header_arret.Identifier = 0x10;
 800156a:	2310      	movs	r3, #16
 800156c:	607b      	str	r3, [r7, #4]
	header_arret.IdType = FDCAN_STANDARD_ID;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
	header_arret.TxFrameType = FDCAN_REMOTE_FRAME;
 8001572:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001576:	60fb      	str	r3, [r7, #12]
	header_arret.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
	header_arret.FDFormat = FDCAN_FD_CAN;
 800157c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001580:	61fb      	str	r3, [r7, #28]
	header_arret.MessageMarker = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header_arret, 0);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <send_arret_automate+0x44>)
 800158e:	f002 fe69 	bl	8004264 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000218 	.word	0x20000218

080015a0 <send_odometrie>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void send_odometrie(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08e      	sub	sp, #56	@ 0x38
 80015a4:	af00      	add	r7, sp, #0
	int16_t x = lroundf(statut_odometrie.x);
 80015a6:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <send_odometrie+0x138>)
 80015a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	f00b fb7a 	bl	800cca8 <lroundf>
 80015b4:	4603      	mov	r3, r0
 80015b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t y = lroundf(statut_odometrie.y);
 80015b8:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <send_odometrie+0x138>)
 80015ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	f00b fb71 	bl	800cca8 <lroundf>
 80015c6:	4603      	mov	r3, r0
 80015c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
	float angle = -statut_odometrie.angle_rad * 180.f / M_PI * 100.0f;
 80015ca:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <send_odometrie+0x138>)
 80015cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80015d0:	eef1 7a67 	vneg.f32	s15, s15
 80015d4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80016dc <send_odometrie+0x13c>
 80015d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015dc:	ee17 0a90 	vmov	r0, s15
 80015e0:	f7fe ffda 	bl	8000598 <__aeabi_f2d>
 80015e4:	a33a      	add	r3, pc, #232	@ (adr r3, 80016d0 <send_odometrie+0x130>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f957 	bl	800089c <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <send_odometrie+0x140>)
 80015fc:	f7ff f824 	bl	8000648 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fb16 	bl	8000c38 <__aeabi_d2f>
 800160c:	4603      	mov	r3, r0
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
	int16_t t = lroundf(angle);
 8001610:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8001614:	f00b fb48 	bl	800cca8 <lroundf>
 8001618:	4603      	mov	r3, r0
 800161a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	int16_t v = vitesse * 1000;
 800161c:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <send_odometrie+0x144>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80016e8 <send_odometrie+0x148>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162e:	ee17 3a90 	vmov	r3, s15
 8001632:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t data_odo[8];

	data_odo[0] = x & 0xFF;
 8001634:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	data_odo[1] = (x >> 8) & 0xFF;
 800163c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001640:	121b      	asrs	r3, r3, #8
 8001642:	b21b      	sxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	data_odo[2] = y & 0xFF;
 800164a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	data_odo[3] = (y >> 8) & 0xFF;
 8001652:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001656:	121b      	asrs	r3, r3, #8
 8001658:	b21b      	sxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_odo[4] = t & 0xFF;
 8001660:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	data_odo[5] = (t >> 8) & 0xFF;
 8001668:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800166c:	121b      	asrs	r3, r3, #8
 800166e:	b21b      	sxth	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	data_odo[6] = v & 0xFF;
 8001676:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	data_odo[7] = (v >> 8) & 0xFF;
 800167e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001682:	121b      	asrs	r3, r3, #8
 8001684:	b21b      	sxth	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	FDCAN_TxHeaderTypeDef header_odo = { 0 };
 800168c:	463b      	mov	r3, r7
 800168e:	2224      	movs	r2, #36	@ 0x24
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fe59 	bl	800934a <memset>
	header_odo.Identifier = 0x150;
 8001698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800169c:	603b      	str	r3, [r7, #0]
	header_odo.IdType = FDCAN_STANDARD_ID;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
	header_odo.DataLength = 8;
 80016a2:	2308      	movs	r3, #8
 80016a4:	60fb      	str	r3, [r7, #12]
	header_odo.TxFrameType = FDCAN_DATA_FRAME;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
	header_odo.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
	header_odo.FDFormat = FDCAN_FD_CAN;
 80016ae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80016b2:	61bb      	str	r3, [r7, #24]
	header_odo.MessageMarker = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header_odo, data_odo);
 80016b8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80016bc:	463b      	mov	r3, r7
 80016be:	4619      	mov	r1, r3
 80016c0:	480a      	ldr	r0, [pc, #40]	@ (80016ec <send_odometrie+0x14c>)
 80016c2:	f002 fdcf 	bl	8004264 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	@ 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	54442d18 	.word	0x54442d18
 80016d4:	400921fb 	.word	0x400921fb
 80016d8:	20000280 	.word	0x20000280
 80016dc:	43340000 	.word	0x43340000
 80016e0:	40590000 	.word	0x40590000
 80016e4:	200002b0 	.word	0x200002b0
 80016e8:	447a0000 	.word	0x447a0000
 80016ec:	20000218 	.word	0x20000218

080016f0 <delta_tick>:
}
*/
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
int32_t delta_tick(uint16_t tick, uint16_t tick_precedent, bool direction) {
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
 80016fa:	460b      	mov	r3, r1
 80016fc:	80bb      	strh	r3, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	70fb      	strb	r3, [r7, #3]
	int16_t delta_tick;
	if (direction == 0 && (tick_precedent > tick)) {
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	f083 0301 	eor.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <delta_tick+0x32>
 800170e:	88ba      	ldrh	r2, [r7, #4]
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	429a      	cmp	r2, r3
 8001714:	d905      	bls.n	8001722 <delta_tick+0x32>
		delta_tick = (tick - tick_precedent) - 65536;
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	81fb      	strh	r3, [r7, #14]
 8001720:	e011      	b.n	8001746 <delta_tick+0x56>
	} else if (direction == 1 && (tick_precedent < tick)) {
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d009      	beq.n	800173c <delta_tick+0x4c>
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	429a      	cmp	r2, r3
 800172e:	d205      	bcs.n	800173c <delta_tick+0x4c>
		delta_tick = (tick - tick_precedent) + 65536;
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	88bb      	ldrh	r3, [r7, #4]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	b29b      	uxth	r3, r3
 8001738:	81fb      	strh	r3, [r7, #14]
 800173a:	e004      	b.n	8001746 <delta_tick+0x56>
	} else {
		delta_tick = tick - tick_precedent;
 800173c:	88fa      	ldrh	r2, [r7, #6]
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	b29b      	uxth	r3, r3
 8001744:	81fb      	strh	r3, [r7, #14]
	}
	return delta_tick;
 8001746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <asserv>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void asserv(float consigne_gauche_mm, float consigne_droite_mm) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001762:	edc7 0a00 	vstr	s1, [r7]
    //calculs_avant_asserv();

	erreur_gauche = consigne_gauche_mm - (statut_odometrie.dist_roue_gauche_mm - start_roue_gauche_mm);
 8001766:	4b5c      	ldr	r3, [pc, #368]	@ (80018d8 <asserv+0x180>)
 8001768:	ed93 7a01 	vldr	s14, [r3, #4]
 800176c:	4b5b      	ldr	r3, [pc, #364]	@ (80018dc <asserv+0x184>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001776:	ed97 7a01 	vldr	s14, [r7, #4]
 800177a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177e:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <asserv+0x188>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
	erreur_droite = consigne_droite_mm - (statut_odometrie.dist_roue_droite_mm - start_roue_droite_mm);
 8001784:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <asserv+0x180>)
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	4b56      	ldr	r3, [pc, #344]	@ (80018e4 <asserv+0x18c>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001794:	ed97 7a00 	vldr	s14, [r7]
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	4b52      	ldr	r3, [pc, #328]	@ (80018e8 <asserv+0x190>)
 800179e:	edc3 7a00 	vstr	s15, [r3]

	Delta_droite = erreur_droite - erreur_precedante_droite;
 80017a2:	4b51      	ldr	r3, [pc, #324]	@ (80018e8 <asserv+0x190>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <asserv+0x194>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	4b4f      	ldr	r3, [pc, #316]	@ (80018f0 <asserv+0x198>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]
	Delta_gauche = erreur_gauche - erreur_precedante_gauche;
 80017b8:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <asserv+0x188>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	4b4d      	ldr	r3, [pc, #308]	@ (80018f4 <asserv+0x19c>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	4b4b      	ldr	r3, [pc, #300]	@ (80018f8 <asserv+0x1a0>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]

	if (erreur_gauche > 0) {
 80017ce:	4b44      	ldr	r3, [pc, #272]	@ (80018e0 <asserv+0x188>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd0a      	ble.n	80017f4 <asserv+0x9c>
		HAL_GPIO_WritePin(M2inA_GPIO_Port, M2inA_Pin, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2102      	movs	r1, #2
 80017e2:	4846      	ldr	r0, [pc, #280]	@ (80018fc <asserv+0x1a4>)
 80017e4:	f003 fb78 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2inB_GPIO_Port, M2inB_Pin, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	4844      	ldr	r0, [pc, #272]	@ (8001900 <asserv+0x1a8>)
 80017ee:	f003 fb73 	bl	8004ed8 <HAL_GPIO_WritePin>
 80017f2:	e009      	b.n	8001808 <asserv+0xb0>
	} else {
		HAL_GPIO_WritePin(M2inA_GPIO_Port, M2inA_Pin, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2102      	movs	r1, #2
 80017f8:	4840      	ldr	r0, [pc, #256]	@ (80018fc <asserv+0x1a4>)
 80017fa:	f003 fb6d 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2inB_GPIO_Port, M2inB_Pin, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2120      	movs	r1, #32
 8001802:	483f      	ldr	r0, [pc, #252]	@ (8001900 <asserv+0x1a8>)
 8001804:	f003 fb68 	bl	8004ed8 <HAL_GPIO_WritePin>
	}
	if (erreur_droite > 0) {
 8001808:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <asserv+0x190>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd0e      	ble.n	8001836 <asserv+0xde>
		HAL_GPIO_WritePin(M1inA_GPIO_Port, M1inA_Pin, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800181e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001822:	f003 fb59 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1inB_GPIO_Port, M1inB_Pin, 1);
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f003 fb52 	bl	8004ed8 <HAL_GPIO_WritePin>
 8001834:	e00d      	b.n	8001852 <asserv+0xfa>
	} else {
		HAL_GPIO_WritePin(M1inA_GPIO_Port, M1inA_Pin, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001840:	f003 fb4a 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1inB_GPIO_Port, M1inB_Pin, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800184a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184e:	f003 fb43 	bl	8004ed8 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(coef_P_g * erreur_gauche + coef_D_g * Delta_gauche));
 8001852:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <asserv+0x1ac>)
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <asserv+0x188>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <asserv+0x1b0>)
 8001864:	edd3 6a00 	vldr	s13, [r3]
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <asserv+0x1a0>)
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	eef0 7ae7 	vabs.f32	s15, s15
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <asserv+0x1b4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001882:	ee17 2a90 	vmov	r2, s15
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, fabs(coef_P_d * erreur_droite + coef_D_d * Delta_droite));
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <asserv+0x1b8>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <asserv+0x190>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <asserv+0x1bc>)
 800189a:	edd3 6a00 	vldr	s13, [r3]
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <asserv+0x198>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	eef0 7ae7 	vabs.f32	s15, s15
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <asserv+0x1c0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b8:	ee17 2a90 	vmov	r2, s15
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40

	erreur_precedante_droite = erreur_droite;
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <asserv+0x190>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <asserv+0x194>)
 80018c4:	6013      	str	r3, [r2, #0]
	erreur_precedante_gauche = erreur_gauche;
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <asserv+0x188>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <asserv+0x19c>)
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000280 	.word	0x20000280
 80018dc:	2000032c 	.word	0x2000032c
 80018e0:	200002b8 	.word	0x200002b8
 80018e4:	20000328 	.word	0x20000328
 80018e8:	200002b4 	.word	0x200002b4
 80018ec:	200002e0 	.word	0x200002e0
 80018f0:	200002e8 	.word	0x200002e8
 80018f4:	200002e4 	.word	0x200002e4
 80018f8:	200002ec 	.word	0x200002ec
 80018fc:	48001400 	.word	0x48001400
 8001900:	48000400 	.word	0x48000400
 8001904:	20000014 	.word	0x20000014
 8001908:	20000018 	.word	0x20000018
 800190c:	20000424 	.word	0x20000424
 8001910:	2000000c 	.word	0x2000000c
 8001914:	20000010 	.word	0x20000010
 8001918:	200003d8 	.word	0x200003d8
 800191c:	00000000 	.word	0x00000000

08001920 <declenchement_automate>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void declenchement_automate(float distence_demender, float vitesse_MAX, bool rotation) {
 8001920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	ed87 0a03 	vstr	s0, [r7, #12]
 800192c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
	// we just fuck-up the logic...
	if (distence_demender < 0) {
 8001934:	edd7 7a03 	vldr	s15, [r7, #12]
 8001938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	d509      	bpl.n	8001956 <declenchement_automate+0x36>
		mouvement_reculer = 1;
 8001942:	4bc9      	ldr	r3, [pc, #804]	@ (8001c68 <declenchement_automate+0x348>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
		distence_demender = -distence_demender;
 8001948:	edd7 7a03 	vldr	s15, [r7, #12]
 800194c:	eef1 7a67 	vneg.f32	s15, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
 8001954:	e002      	b.n	800195c <declenchement_automate+0x3c>
	} else {
		mouvement_reculer = 0;
 8001956:	4bc4      	ldr	r3, [pc, #784]	@ (8001c68 <declenchement_automate+0x348>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	}

	if (rotation) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d018      	beq.n	8001994 <declenchement_automate+0x74>
		distence_demender = PERIMETRE_CERCLE_ENTRE_LES_ROUES * (distence_demender / 360.0);
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7fe fe18 	bl	8000598 <__aeabi_f2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4bbf      	ldr	r3, [pc, #764]	@ (8001c6c <declenchement_automate+0x34c>)
 800196e:	f7fe ff95 	bl	800089c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	a3b7      	add	r3, pc, #732	@ (adr r3, 8001c58 <declenchement_automate+0x338>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe62 	bl	8000648 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f954 	bl	8000c38 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]
	}
	float deplacement_triangle = 0.5 * vitesse_MAX * vitesse_MAX / acceleration + 0.5 * vitesse_MAX * vitesse_MAX / deceleration;
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f7fe fdff 	bl	8000598 <__aeabi_f2d>
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	4bb4      	ldr	r3, [pc, #720]	@ (8001c70 <declenchement_automate+0x350>)
 80019a0:	f7fe fe52 	bl	8000648 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	68b8      	ldr	r0, [r7, #8]
 80019ae:	f7fe fdf3 	bl	8000598 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fe45 	bl	8000648 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	4bab      	ldr	r3, [pc, #684]	@ (8001c74 <declenchement_automate+0x354>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fde4 	bl	8000598 <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe ff60 	bl	800089c <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	461d      	mov	r5, r3
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f7fe fdd7 	bl	8000598 <__aeabi_f2d>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001c70 <declenchement_automate+0x350>)
 80019f0:	f7fe fe2a 	bl	8000648 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4690      	mov	r8, r2
 80019fa:	4699      	mov	r9, r3
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f7fe fdcb 	bl	8000598 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4640      	mov	r0, r8
 8001a08:	4649      	mov	r1, r9
 8001a0a:	f7fe fe1d 	bl	8000648 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4690      	mov	r8, r2
 8001a14:	4699      	mov	r9, r3
 8001a16:	4b98      	ldr	r3, [pc, #608]	@ (8001c78 <declenchement_automate+0x358>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fdbc 	bl	8000598 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4640      	mov	r0, r8
 8001a26:	4649      	mov	r1, r9
 8001a28:	f7fe ff38 	bl	800089c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fc52 	bl	80002dc <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8fa 	bl	8000c38 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]
	if (deplacement_triangle > distence_demender) {
 8001a48:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd01      	ble.n	8001a5e <declenchement_automate+0x13e>
		deplacement_triangle = distence_demender;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	617b      	str	r3, [r7, #20]
	}

	if (deplacement_triangle < distence_demender) {
 8001a5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d562      	bpl.n	8001b36 <declenchement_automate+0x216>
		NA = vitesse_MAX / (acceleration * TE);
 8001a70:	68b8      	ldr	r0, [r7, #8]
 8001a72:	f7fe fd91 	bl	8000598 <__aeabi_f2d>
 8001a76:	4604      	mov	r4, r0
 8001a78:	460d      	mov	r5, r1
 8001a7a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c74 <declenchement_automate+0x354>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd8a 	bl	8000598 <__aeabi_f2d>
 8001a84:	a376      	add	r3, pc, #472	@ (adr r3, 8001c60 <declenchement_automate+0x340>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fddd 	bl	8000648 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe ff01 	bl	800089c <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f8c9 	bl	8000c38 <__aeabi_d2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a74      	ldr	r2, [pc, #464]	@ (8001c7c <declenchement_automate+0x35c>)
 8001aaa:	6013      	str	r3, [r2, #0]
		ND = vitesse_MAX / (deceleration * TE);
 8001aac:	68b8      	ldr	r0, [r7, #8]
 8001aae:	f7fe fd73 	bl	8000598 <__aeabi_f2d>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	460d      	mov	r5, r1
 8001ab6:	4b70      	ldr	r3, [pc, #448]	@ (8001c78 <declenchement_automate+0x358>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd6c 	bl	8000598 <__aeabi_f2d>
 8001ac0:	a367      	add	r3, pc, #412	@ (adr r3, 8001c60 <declenchement_automate+0x340>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fdbf 	bl	8000648 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fee3 	bl	800089c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f8ab 	bl	8000c38 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a66      	ldr	r2, [pc, #408]	@ (8001c80 <declenchement_automate+0x360>)
 8001ae6:	6013      	str	r3, [r2, #0]
		NC = (distence_demender - deplacement_triangle) / (vitesse_MAX * TE);
 8001ae8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	ee17 0a90 	vmov	r0, s15
 8001af8:	f7fe fd4e 	bl	8000598 <__aeabi_f2d>
 8001afc:	4604      	mov	r4, r0
 8001afe:	460d      	mov	r5, r1
 8001b00:	68b8      	ldr	r0, [r7, #8]
 8001b02:	f7fe fd49 	bl	8000598 <__aeabi_f2d>
 8001b06:	a356      	add	r3, pc, #344	@ (adr r3, 8001c60 <declenchement_automate+0x340>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fd9c 	bl	8000648 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fec0 	bl	800089c <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f888 	bl	8000c38 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a56      	ldr	r2, [pc, #344]	@ (8001c84 <declenchement_automate+0x364>)
 8001b2c:	6013      	str	r3, [r2, #0]
		triangle = 0;         // Trapeze
 8001b2e:	4b56      	ldr	r3, [pc, #344]	@ (8001c88 <declenchement_automate+0x368>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e06c      	b.n	8001c10 <declenchement_automate+0x2f0>
	} else {
		vitesse_MAX = sqrt(deplacement_triangle / ((1 / (2 * acceleration)) + (1 / (2 * deceleration))));
 8001b36:	4b4f      	ldr	r3, [pc, #316]	@ (8001c74 <declenchement_automate+0x354>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b48:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <declenchement_automate+0x358>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b52:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001b56:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b66:	ee16 0a90 	vmov	r0, s13
 8001b6a:	f7fe fd15 	bl	8000598 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	ec43 2b10 	vmov	d0, r2, r3
 8001b76:	f00a ffc1 	bl	800cafc <sqrt>
 8001b7a:	ec53 2b10 	vmov	r2, r3, d0
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff f859 	bl	8000c38 <__aeabi_d2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	60bb      	str	r3, [r7, #8]
		NA = vitesse_MAX / (acceleration * TE);
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f7fe fd04 	bl	8000598 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <declenchement_automate+0x354>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcfd 	bl	8000598 <__aeabi_f2d>
 8001b9e:	a330      	add	r3, pc, #192	@ (adr r3, 8001c60 <declenchement_automate+0x340>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd50 	bl	8000648 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fe74 	bl	800089c <__aeabi_ddiv>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff f83c 	bl	8000c38 <__aeabi_d2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <declenchement_automate+0x35c>)
 8001bc4:	6013      	str	r3, [r2, #0]
		ND = vitesse_MAX / (deceleration * TE);
 8001bc6:	68b8      	ldr	r0, [r7, #8]
 8001bc8:	f7fe fce6 	bl	8000598 <__aeabi_f2d>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	460d      	mov	r5, r1
 8001bd0:	4b29      	ldr	r3, [pc, #164]	@ (8001c78 <declenchement_automate+0x358>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fcdf 	bl	8000598 <__aeabi_f2d>
 8001bda:	a321      	add	r3, pc, #132	@ (adr r3, 8001c60 <declenchement_automate+0x340>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fd32 	bl	8000648 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7fe fe56 	bl	800089c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7ff f81e 	bl	8000c38 <__aeabi_d2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a20      	ldr	r2, [pc, #128]	@ (8001c80 <declenchement_automate+0x360>)
 8001c00:	6013      	str	r3, [r2, #0]
		NC = 0.0;
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <declenchement_automate+0x364>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
		triangle = 1;		// Triangle
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <declenchement_automate+0x368>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
	}
	mouvement_rotation = rotation;
 8001c10:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <declenchement_automate+0x36c>)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	7013      	strb	r3, [r2, #0]
	dist_debut_mouvement = 0.0;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <declenchement_automate+0x370>)
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
	n_DEC = 0;
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <declenchement_automate+0x374>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
	n_ACC = 0;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <declenchement_automate+0x378>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
	n_CONST = 0;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <declenchement_automate+0x37c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
	vitesse = 0;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <declenchement_automate+0x380>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

	start_roue_droite_mm = statut_odometrie.dist_roue_droite_mm;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <declenchement_automate+0x384>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca8 <declenchement_automate+0x388>)
 8001c3e:	6013      	str	r3, [r2, #0]
	start_roue_gauche_mm = statut_odometrie.dist_roue_gauche_mm;
 8001c40:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <declenchement_automate+0x384>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a19      	ldr	r2, [pc, #100]	@ (8001cac <declenchement_automate+0x38c>)
 8001c46:	6013      	str	r3, [r2, #0]

	currentState = STATE_acc;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <declenchement_automate+0x390>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c58:	fc4abcc3 	.word	0xfc4abcc3
 8001c5c:	3fe70586 	.word	0x3fe70586
 8001c60:	47ae147b 	.word	0x47ae147b
 8001c64:	3f847ae1 	.word	0x3f847ae1
 8001c68:	200002f1 	.word	0x200002f1
 8001c6c:	40768000 	.word	0x40768000
 8001c70:	3fe00000 	.word	0x3fe00000
 8001c74:	20000004 	.word	0x20000004
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	200002d0 	.word	0x200002d0
 8001c80:	200002d4 	.word	0x200002d4
 8001c84:	200002d8 	.word	0x200002d8
 8001c88:	200002dc 	.word	0x200002dc
 8001c8c:	200002f0 	.word	0x200002f0
 8001c90:	20000324 	.word	0x20000324
 8001c94:	200002bc 	.word	0x200002bc
 8001c98:	200002c0 	.word	0x200002c0
 8001c9c:	200002c4 	.word	0x200002c4
 8001ca0:	200002b0 	.word	0x200002b0
 8001ca4:	20000280 	.word	0x20000280
 8001ca8:	20000328 	.word	0x20000328
 8001cac:	2000032c 	.word	0x2000032c
 8001cb0:	2000027c 	.word	0x2000027c

08001cb4 <HAL_FDCAN_RxFifo0Callback>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	@ 0x38
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	f107 0210 	add.w	r2, r7, #16
 8001cc6:	2140      	movs	r1, #64	@ 0x40
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f002 fb0f 	bl	80042ec <HAL_FDCAN_GetRxMessage>
	if (RxHeader.Identifier == 0x101)//_________________________________________________avencer
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f240 1201 	movw	r2, #257	@ 0x101
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d13a      	bne.n	8001d4e <HAL_FDCAN_RxFifo0Callback+0x9a>
			{
		uintValue_dist = RxData[0] | (RxData[1] << 8);
 8001cd8:	7a3b      	ldrb	r3, [r7, #8]
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	7a7b      	ldrb	r3, [r7, #9]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8001cea:	801a      	strh	r2, [r3, #0]
		floatValue_dist = (float) uintValue_dist;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8001cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001dac <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
		uintValue_angle = RxData[2] | (RxData[3] << 8);
 8001d00:	7abb      	ldrb	r3, [r7, #10]
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8001d12:	801a      	strh	r2, [r3, #0]
		floatValue_angle = (float) uintValue_angle;
 8001d14:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8001d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <HAL_FDCAN_RxFifo0Callback+0x100>)
 8001d24:	edc3 7a00 	vstr	s15, [r3]
		rotation = 1;
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]

		declenchement_automate(floatValue_angle / 100.0, 0.2, rotation);
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <HAL_FDCAN_RxFifo0Callback+0x100>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001dbc <HAL_FDCAN_RxFifo0Callback+0x108>
 8001d38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001dc0 <HAL_FDCAN_RxFifo0Callback+0x10c>
 8001d46:	eeb0 0a47 	vmov.f32	s0, s14
 8001d4a:	f7ff fde9 	bl	8001920 <declenchement_automate>
	}
	if (RxHeader.Identifier == 0x005) //_______________________________________________________stop
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10a      	bne.n	8001d6a <HAL_FDCAN_RxFifo0Callback+0xb6>
	{
		if(currentState == STATE_acc || currentState == STATE_const) currentState = STATE_dec;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d003      	beq.n	8001d64 <HAL_FDCAN_RxFifo0Callback+0xb0>
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d102      	bne.n	8001d6a <HAL_FDCAN_RxFifo0Callback+0xb6>
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]

		//declenchement_automate(0, 0, 0);
	}
	if (RxHeader.Identifier == 0x210) //_______________________________________________________tirette
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8001d70:	d115      	bne.n	8001d9e <HAL_FDCAN_RxFifo0Callback+0xea>
			{
		tirette = HAL_GPIO_ReadPin(tirette_GPIO_Port, tirette_Pin);
 8001d72:	2120      	movs	r1, #32
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d78:	f003 f896 	bl	8004ea8 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8001d8a:	701a      	strb	r2, [r3, #0]
		if (tirette == 1) {
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_FDCAN_RxFifo0Callback+0xe6>
			send_val_tirette_mise();
 8001d94:	f7ff fb98 	bl	80014c8 <send_val_tirette_mise>
		} else {
			send_val_tirette_retiree();
		}
	}
}
 8001d98:	e001      	b.n	8001d9e <HAL_FDCAN_RxFifo0Callback+0xea>
			send_val_tirette_retiree();
 8001d9a:	f7ff fbb9 	bl	8001510 <send_val_tirette_retiree>
}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	@ 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200002f8 	.word	0x200002f8
 8001dac:	200002f4 	.word	0x200002f4
 8001db0:	20000300 	.word	0x20000300
 8001db4:	200002fc 	.word	0x200002fc
 8001db8:	200002f2 	.word	0x200002f2
 8001dbc:	42c80000 	.word	0x42c80000
 8001dc0:	3e4ccccd 	.word	0x3e4ccccd
 8001dc4:	2000027c 	.word	0x2000027c
 8001dc8:	20000024 	.word	0x20000024

08001dcc <HAL_TIM_PeriodElapsedCallback>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
uint8_t flag_periode_tim7 = 0;
uint8_t nbr_cycle_10 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d108      	bne.n	8001df0 <HAL_TIM_PeriodElapsedCallback+0x24>
		flag_periode_tim7 = 1;
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
		nbr_cycle_10++;
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001dee:	701a      	strb	r2, [r3, #0]
	}
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40001400 	.word	0x40001400
 8001e00:	20000338 	.word	0x20000338
 8001e04:	20000339 	.word	0x20000339

08001e08 <lever_drapeau>:
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
void lever_drapeau(void) {
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 5950); // position fanion leve
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <lever_drapeau+0x18>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f241 723e 	movw	r2, #5950	@ 0x173e
 8001e14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000508 	.word	0x20000508

08001e24 <baisser_drapeau>:
void baisser_drapeau(void) {
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 3000); // position fanion baisser
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <baisser_drapeau+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001e30:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20000508 	.word	0x20000508

08001e40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	float consigne_gauche_m = 0.0;
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
	float consigne_droite_m = 0.0;
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e54:	f001 ff03 	bl	8003c5e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e58:	f001 f898 	bl	8002f8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e5c:	f7ff f9b0 	bl	80011c0 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001e60:	f001 fa80 	bl	8003364 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001e64:	f001 fe2e 	bl	8003ac4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001e68:	f001 fa22 	bl	80032b0 <MX_TIM1_Init>
	MX_TIM4_Init();
 8001e6c:	f001 fb46 	bl	80034fc <MX_TIM4_Init>
	MX_TIM3_Init();
 8001e70:	f001 facc 	bl	800340c <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e74:	f001 fbf0 	bl	8003658 <MX_TIM8_Init>
	MX_FDCAN1_Init();
 8001e78:	f7ff f8fa 	bl	8001070 <MX_FDCAN1_Init>
	MX_TIM7_Init();
 8001e7c:	f001 fbb6 	bl	80035ec <MX_TIM7_Init>
	MX_TIM17_Init();
 8001e80:	f001 fc3e 	bl	8003700 <MX_TIM17_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim7);
 8001e84:	4898      	ldr	r0, [pc, #608]	@ (80020e8 <main+0x2a8>)
 8001e86:	f004 f869 	bl	8005f5c <HAL_TIM_Base_Start_IT>

	HAL_FDCAN_Start(&hfdcan1);
 8001e8a:	4898      	ldr	r0, [pc, #608]	@ (80020ec <main+0x2ac>)
 8001e8c:	f002 f9c2 	bl	8004214 <HAL_FDCAN_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001e90:	213c      	movs	r1, #60	@ 0x3c
 8001e92:	4897      	ldr	r0, [pc, #604]	@ (80020f0 <main+0x2b0>)
 8001e94:	f004 fad4 	bl	8006440 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001e98:	213c      	movs	r1, #60	@ 0x3c
 8001e9a:	4896      	ldr	r0, [pc, #600]	@ (80020f4 <main+0x2b4>)
 8001e9c:	f004 fad0 	bl	8006440 <HAL_TIM_Encoder_Start>

	__HAL_TIM_SET_COUNTER(&htim2, 32768); // ou 32 440
 8001ea0:	4b93      	ldr	r3, [pc, #588]	@ (80020f0 <main+0x2b0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim1, 32768);
 8001eaa:	4b92      	ldr	r3, [pc, #584]	@ (80020f4 <main+0x2b4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001eb4:	210c      	movs	r1, #12
 8001eb6:	4890      	ldr	r0, [pc, #576]	@ (80020f8 <main+0x2b8>)
 8001eb8:	f004 f91c 	bl	80060f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	488f      	ldr	r0, [pc, #572]	@ (80020fc <main+0x2bc>)
 8001ec0:	f004 f918 	bl	80060f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // servo sur PA7
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	488e      	ldr	r0, [pc, #568]	@ (8002100 <main+0x2c0>)
 8001ec8:	f004 f914 	bl	80060f4 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80020f8 <main+0x2b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001ed4:	4b89      	ldr	r3, [pc, #548]	@ (80020fc <main+0x2bc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 3000); // position arret
 8001edc:	4b88      	ldr	r3, [pc, #544]	@ (8002100 <main+0x2c0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(M1en_GPIO_Port, M1en_Pin, 1);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4886      	ldr	r0, [pc, #536]	@ (8002104 <main+0x2c4>)
 8001eec:	f002 fff4 	bl	8004ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1inA_GPIO_Port, M1inA_Pin, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efa:	f002 ffed 	bl	8004ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1inB_GPIO_Port, M1inB_Pin, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f08:	f002 ffe6 	bl	8004ed8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(M2en_GPIO_Port, M2en_Pin, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2110      	movs	r1, #16
 8001f10:	487d      	ldr	r0, [pc, #500]	@ (8002108 <main+0x2c8>)
 8001f12:	f002 ffe1 	bl	8004ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2inA_GPIO_Port, M2inA_Pin, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2102      	movs	r1, #2
 8001f1a:	487a      	ldr	r0, [pc, #488]	@ (8002104 <main+0x2c4>)
 8001f1c:	f002 ffdc 	bl	8004ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2inB_GPIO_Port, M2inB_Pin, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2120      	movs	r1, #32
 8001f24:	4878      	ldr	r0, [pc, #480]	@ (8002108 <main+0x2c8>)
 8001f26:	f002 ffd7 	bl	8004ed8 <HAL_GPIO_WritePin>

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_RX_FIFO0);
 8001f2a:	2240      	movs	r2, #64	@ 0x40
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	486f      	ldr	r0, [pc, #444]	@ (80020ec <main+0x2ac>)
 8001f30:	f002 fae4 	bl	80044fc <HAL_FDCAN_ActivateNotification>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		uint16_t cod_tick_g = __HAL_TIM_GET_COUNTER(&htim1);
 8001f34:	4b6f      	ldr	r3, [pc, #444]	@ (80020f4 <main+0x2b4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	82fb      	strh	r3, [r7, #22]
		uint16_t cod_tick_d = __HAL_TIM_GET_COUNTER(&htim2);
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80020f0 <main+0x2b0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	82bb      	strh	r3, [r7, #20]
		//uint16_t cod_tick_d = __HAL_TIM_GET_COUNTER(&htim2);

		bool direction_g = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8001f44:	4b6b      	ldr	r3, [pc, #428]	@ (80020f4 <main+0x2b4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	74fb      	strb	r3, [r7, #19]
		bool direction_d = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8001f58:	4b65      	ldr	r3, [pc, #404]	@ (80020f0 <main+0x2b0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	74bb      	strb	r3, [r7, #18]

		int32_t delta_tick_d = delta_tick(cod_tick_d, tick_d_precedent, direction_d);
 8001f6c:	4b67      	ldr	r3, [pc, #412]	@ (800210c <main+0x2cc>)
 8001f6e:	8819      	ldrh	r1, [r3, #0]
 8001f70:	7cba      	ldrb	r2, [r7, #18]
 8001f72:	8abb      	ldrh	r3, [r7, #20]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fbbb 	bl	80016f0 <delta_tick>
 8001f7a:	60f8      	str	r0, [r7, #12]
		int32_t delta_tick_g = delta_tick(cod_tick_g, tick_g_precedent, direction_g);
 8001f7c:	4b64      	ldr	r3, [pc, #400]	@ (8002110 <main+0x2d0>)
 8001f7e:	8819      	ldrh	r1, [r3, #0]
 8001f80:	7cfa      	ldrb	r2, [r7, #19]
 8001f82:	8afb      	ldrh	r3, [r7, #22]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fbb3 	bl	80016f0 <delta_tick>
 8001f8a:	60b8      	str	r0, [r7, #8]

		tick_d_precedent = cod_tick_d;
 8001f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <main+0x2cc>)
 8001f8e:	8abb      	ldrh	r3, [r7, #20]
 8001f90:	8013      	strh	r3, [r2, #0]
		tick_g_precedent = cod_tick_g;
 8001f92:	4a5f      	ldr	r2, [pc, #380]	@ (8002110 <main+0x2d0>)
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	8013      	strh	r3, [r2, #0]

		tick_d += delta_tick_d;
 8001f98:	4b5e      	ldr	r3, [pc, #376]	@ (8002114 <main+0x2d4>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	@ (8002114 <main+0x2d4>)
 8001fa2:	6013      	str	r3, [r2, #0]
		tick_g += delta_tick_g;
 8001fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8002118 <main+0x2d8>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a5a      	ldr	r2, [pc, #360]	@ (8002118 <main+0x2d8>)
 8001fae:	6013      	str	r3, [r2, #0]

		update_statut_odometrie(tick_g, tick_d * COEF_ROUE_GAUCHE);
 8001fb0:	4b59      	ldr	r3, [pc, #356]	@ (8002118 <main+0x2d8>)
 8001fb2:	681c      	ldr	r4, [r3, #0]
 8001fb4:	4b57      	ldr	r3, [pc, #348]	@ (8002114 <main+0x2d4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fadb 	bl	8000574 <__aeabi_i2d>
 8001fbe:	a348      	add	r3, pc, #288	@ (adr r3, 80020e0 <main+0x2a0>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fb40 	bl	8000648 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fdea 	bl	8000ba8 <__aeabi_d2iz>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff f975 	bl	80012c8 <update_statut_odometrie>

	  	//-------------------------------------------------------- MAJ tirette
		//--------------------------------------------------------
		tirette = HAL_GPIO_ReadPin(tirette_GPIO_Port, tirette_Pin);
 8001fde:	2120      	movs	r1, #32
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe4:	f002 ff60 	bl	8004ea8 <HAL_GPIO_ReadPin>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b49      	ldr	r3, [pc, #292]	@ (800211c <main+0x2dc>)
 8001ff6:	701a      	strb	r2, [r3, #0]
		if (flag_periode_tim7 == 1 && tirette != tirette_precedente) {
 8001ff8:	4b49      	ldr	r3, [pc, #292]	@ (8002120 <main+0x2e0>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d112      	bne.n	8002026 <main+0x1e6>
 8002000:	4b46      	ldr	r3, [pc, #280]	@ (800211c <main+0x2dc>)
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <main+0x2e4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d00c      	beq.n	8002026 <main+0x1e6>
			tirette_precedente = tirette;
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <main+0x2dc>)
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <main+0x2e4>)
 8002012:	701a      	strb	r2, [r3, #0]
			if (tirette == 1) {
 8002014:	4b41      	ldr	r3, [pc, #260]	@ (800211c <main+0x2dc>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <main+0x1e2>
				send_val_tirette_mise();
 800201c:	f7ff fa54 	bl	80014c8 <send_val_tirette_mise>
 8002020:	e001      	b.n	8002026 <main+0x1e6>
			} else {
				send_val_tirette_retiree();
 8002022:	f7ff fa75 	bl	8001510 <send_val_tirette_retiree>
			}
		}
		//-------------------------------------------------------- fin MAJ tirette
		//-------------------------------------------------------- envoie état tirette
		if (nbr_cycle_10 == 10) {
 8002026:	4b40      	ldr	r3, [pc, #256]	@ (8002128 <main+0x2e8>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b0a      	cmp	r3, #10
 800202c:	d104      	bne.n	8002038 <main+0x1f8>
			send_odometrie();
 800202e:	f7ff fab7 	bl	80015a0 <send_odometrie>
			nbr_cycle_10 = 0;
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <main+0x2e8>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
		}
		//-------------------------------------------------------- fin envoie état tirette
		//--------------------------------------------------------
		if (flag_periode_tim7 == 1 && tirette == false){
 8002038:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <main+0x2e0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	f47f af79 	bne.w	8001f34 <main+0xf4>
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <main+0x2dc>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	f43f af71 	beq.w	8001f34 <main+0xf4>
			if (tirette == false) {
 8002052:	4b32      	ldr	r3, [pc, #200]	@ (800211c <main+0x2dc>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8779 	beq.w	8002f54 <main+0x1114>
				switch (currentState) {
 8002062:	4b32      	ldr	r3, [pc, #200]	@ (800212c <main+0x2ec>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b03      	cmp	r3, #3
 8002068:	f200 8774 	bhi.w	8002f54 <main+0x1114>
 800206c:	a201      	add	r2, pc, #4	@ (adr r2, 8002074 <main+0x234>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	08002643 	.word	0x08002643
 800207c:	08002149 	.word	0x08002149
 8002080:	08002b29 	.word	0x08002b29
				//___________________________________________________________________________________________________________STOP
				case STATE_stop:
					if (rotation == 1) {
 8002084:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <main+0x2f0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <main+0x274>
						rotation = 0;
 800208c:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <main+0x2f0>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
						declenchement_automate((floatValue_dist / 1000.0), 0.6, rotation);
 8002092:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <main+0x2f4>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002138 <main+0x2f8>
 800209c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <main+0x2f0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800213c <main+0x2fc>
 80020aa:	eeb0 0a47 	vmov.f32	s0, s14
 80020ae:	f7ff fc37 	bl	8001920 <declenchement_automate>
 80020b2:	e007      	b.n	80020c4 <main+0x284>
					}
					else {
						asserv(0, 0);
 80020b4:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8002140 <main+0x300>
 80020b8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002140 <main+0x300>
 80020bc:	f7ff fb4c 	bl	8001758 <asserv>
						lever_drapeau();
 80020c0:	f7ff fea2 	bl	8001e08 <lever_drapeau>
					}
					if (envoi_fin_auto == 2) {
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <main+0x304>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f040 8742 	bne.w	8002f52 <main+0x1112>
						envoi_fin_auto = 0;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <main+0x304>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
						send_arret_automate();
 80020d4:	f7ff fa40 	bl	8001558 <send_arret_automate>
					}
					break;
 80020d8:	f000 bf3b 	b.w	8002f52 <main+0x1112>
 80020dc:	f3af 8000 	nop.w
 80020e0:	2d0e5604 	.word	0x2d0e5604
 80020e4:	3fef9db2 	.word	0x3fef9db2
 80020e8:	20000470 	.word	0x20000470
 80020ec:	20000218 	.word	0x20000218
 80020f0:	2000038c 	.word	0x2000038c
 80020f4:	20000340 	.word	0x20000340
 80020f8:	200003d8 	.word	0x200003d8
 80020fc:	20000424 	.word	0x20000424
 8002100:	20000508 	.word	0x20000508
 8002104:	48001400 	.word	0x48001400
 8002108:	48000400 	.word	0x48000400
 800210c:	20000000 	.word	0x20000000
 8002110:	20000002 	.word	0x20000002
 8002114:	200002cc 	.word	0x200002cc
 8002118:	200002c8 	.word	0x200002c8
 800211c:	20000024 	.word	0x20000024
 8002120:	20000338 	.word	0x20000338
 8002124:	20000308 	.word	0x20000308
 8002128:	20000339 	.word	0x20000339
 800212c:	2000027c 	.word	0x2000027c
 8002130:	200002f2 	.word	0x200002f2
 8002134:	200002f4 	.word	0x200002f4
 8002138:	447a0000 	.word	0x447a0000
 800213c:	3f19999a 	.word	0x3f19999a
 8002140:	00000000 	.word	0x00000000
 8002144:	20000304 	.word	0x20000304
					//___________________________________________________________________________________________________________DEC
				case STATE_dec:
					vitesse = vitesse - deceleration * TE;
 8002148:	4bbb      	ldr	r3, [pc, #748]	@ (8002438 <main+0x5f8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fa23 	bl	8000598 <__aeabi_f2d>
 8002152:	4604      	mov	r4, r0
 8002154:	460d      	mov	r5, r1
 8002156:	4bb9      	ldr	r3, [pc, #740]	@ (800243c <main+0x5fc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa1c 	bl	8000598 <__aeabi_f2d>
 8002160:	a3af      	add	r3, pc, #700	@ (adr r3, 8002420 <main+0x5e0>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fa6f 	bl	8000648 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe f8b1 	bl	80002d8 <__aeabi_dsub>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fd5b 	bl	8000c38 <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
 8002184:	4aac      	ldr	r2, [pc, #688]	@ (8002438 <main+0x5f8>)
 8002186:	6013      	str	r3, [r2, #0]
					consigne_gauche_m = consigne_gauche_m + vitesse * TE;
 8002188:	69f8      	ldr	r0, [r7, #28]
 800218a:	f7fe fa05 	bl	8000598 <__aeabi_f2d>
 800218e:	4604      	mov	r4, r0
 8002190:	460d      	mov	r5, r1
 8002192:	4ba9      	ldr	r3, [pc, #676]	@ (8002438 <main+0x5f8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9fe 	bl	8000598 <__aeabi_f2d>
 800219c:	a3a0      	add	r3, pc, #640	@ (adr r3, 8002420 <main+0x5e0>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe fa51 	bl	8000648 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4620      	mov	r0, r4
 80021ac:	4629      	mov	r1, r5
 80021ae:	f7fe f895 	bl	80002dc <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fd3d 	bl	8000c38 <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	61fb      	str	r3, [r7, #28]
					consigne_droite_m = consigne_droite_m + vitesse * TE;
 80021c2:	69b8      	ldr	r0, [r7, #24]
 80021c4:	f7fe f9e8 	bl	8000598 <__aeabi_f2d>
 80021c8:	4604      	mov	r4, r0
 80021ca:	460d      	mov	r5, r1
 80021cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002438 <main+0x5f8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9e1 	bl	8000598 <__aeabi_f2d>
 80021d6:	a392      	add	r3, pc, #584	@ (adr r3, 8002420 <main+0x5e0>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fa34 	bl	8000648 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f878 	bl	80002dc <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fd20 	bl	8000c38 <__aeabi_d2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	61bb      	str	r3, [r7, #24]
					if (mouvement_rotation) {
 80021fc:	4b90      	ldr	r3, [pc, #576]	@ (8002440 <main+0x600>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d072      	beq.n	80022ea <main+0x4aa>
						if (mouvement_reculer) {
 8002204:	4b8f      	ldr	r3, [pc, #572]	@ (8002444 <main+0x604>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d038      	beq.n	800227e <main+0x43e>
							asserv(consigne_gauche_m * 1000,-consigne_droite_m * 1000);
 800220c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002210:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8002460 <main+0x620>
 8002214:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002218:	edd7 7a06 	vldr	s15, [r7, #24]
 800221c:	eef1 7a67 	vneg.f32	s15, s15
 8002220:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8002460 <main+0x620>
 8002224:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002228:	eef0 0a67 	vmov.f32	s1, s15
 800222c:	eeb0 0a47 	vmov.f32	s0, s14
 8002230:	f7ff fa92 	bl	8001758 <asserv>
							Teta_debut_m = -((consigne_droite_m + consigne_gauche_m) * 180.0) / PERIMETRE_CERCLE_ENTRE_LES_ROUES;
 8002234:	ed97 7a06 	vldr	s14, [r7, #24]
 8002238:	edd7 7a07 	vldr	s15, [r7, #28]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	ee17 0a90 	vmov	r0, s15
 8002244:	f7fe f9a8 	bl	8000598 <__aeabi_f2d>
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	4b7e      	ldr	r3, [pc, #504]	@ (8002448 <main+0x608>)
 800224e:	f7fe f9fb 	bl	8000648 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4690      	mov	r8, r2
 8002258:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800225c:	a372      	add	r3, pc, #456	@ (adr r3, 8002428 <main+0x5e8>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	4640      	mov	r0, r8
 8002264:	4649      	mov	r1, r9
 8002266:	f7fe fb19 	bl	800089c <__aeabi_ddiv>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fce1 	bl	8000c38 <__aeabi_d2f>
 8002276:	4603      	mov	r3, r0
 8002278:	4a74      	ldr	r2, [pc, #464]	@ (800244c <main+0x60c>)
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e17f      	b.n	800257e <main+0x73e>
						}
						else {
							asserv(-consigne_gauche_m * 1000,consigne_droite_m * 1000);
 800227e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002282:	eef1 7a67 	vneg.f32	s15, s15
 8002286:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002460 <main+0x620>
 800228a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800228e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002292:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002460 <main+0x620>
 8002296:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800229a:	eef0 0a67 	vmov.f32	s1, s15
 800229e:	eeb0 0a47 	vmov.f32	s0, s14
 80022a2:	f7ff fa59 	bl	8001758 <asserv>
							Teta_debut_m = ((consigne_droite_m + consigne_gauche_m) * 180.0) / PERIMETRE_CERCLE_ENTRE_LES_ROUES;
 80022a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80022aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	ee17 0a90 	vmov	r0, s15
 80022b6:	f7fe f96f 	bl	8000598 <__aeabi_f2d>
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <main+0x608>)
 80022c0:	f7fe f9c2 	bl	8000648 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	a356      	add	r3, pc, #344	@ (adr r3, 8002428 <main+0x5e8>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fe fae3 	bl	800089c <__aeabi_ddiv>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fcab 	bl	8000c38 <__aeabi_d2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a59      	ldr	r2, [pc, #356]	@ (800244c <main+0x60c>)
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e149      	b.n	800257e <main+0x73e>
						}
					} else {
						if (mouvement_reculer) {
 80022ea:	4b56      	ldr	r3, [pc, #344]	@ (8002444 <main+0x604>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80b8 	beq.w	8002464 <main+0x624>
							asserv(-consigne_gauche_m * 1000, -consigne_droite_m * 1000);
 80022f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80022f8:	eef1 7a67 	vneg.f32	s15, s15
 80022fc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002460 <main+0x620>
 8002300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002304:	edd7 7a06 	vldr	s15, [r7, #24]
 8002308:	eef1 7a67 	vneg.f32	s15, s15
 800230c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002460 <main+0x620>
 8002310:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002314:	eef0 0a67 	vmov.f32	s1, s15
 8002318:	eeb0 0a47 	vmov.f32	s0, s14
 800231c:	f7ff fa1c 	bl	8001758 <asserv>
							dist_debut_mouvement = (-consigne_gauche_m * 1000 + (-consigne_droite_m * 1000)) / 2;
 8002320:	edd7 7a07 	vldr	s15, [r7, #28]
 8002324:	eef1 7a67 	vneg.f32	s15, s15
 8002328:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8002460 <main+0x620>
 800232c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002330:	edd7 7a06 	vldr	s15, [r7, #24]
 8002334:	eef1 7a67 	vneg.f32	s15, s15
 8002338:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002460 <main+0x620>
 800233c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002344:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	4b40      	ldr	r3, [pc, #256]	@ (8002450 <main+0x610>)
 800234e:	edc3 7a00 	vstr	s15, [r3]
							X_debut_m = dist_debut_mouvement * cos((Teta_actuel * M_PI) / 180.0);
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <main+0x610>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f91e 	bl	8000598 <__aeabi_f2d>
 800235c:	4604      	mov	r4, r0
 800235e:	460d      	mov	r5, r1
 8002360:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <main+0x614>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f917 	bl	8000598 <__aeabi_f2d>
 800236a:	a331      	add	r3, pc, #196	@ (adr r3, 8002430 <main+0x5f0>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f96a 	bl	8000648 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <main+0x608>)
 8002382:	f7fe fa8b 	bl	800089c <__aeabi_ddiv>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	ec43 2b17 	vmov	d7, r2, r3
 800238e:	eeb0 0a47 	vmov.f32	s0, s14
 8002392:	eef0 0a67 	vmov.f32	s1, s15
 8002396:	f00a fbdf 	bl	800cb58 <cos>
 800239a:	ec53 2b10 	vmov	r2, r3, d0
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f7fe f951 	bl	8000648 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fc43 	bl	8000c38 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a28      	ldr	r2, [pc, #160]	@ (8002458 <main+0x618>)
 80023b6:	6013      	str	r3, [r2, #0]
							Y_debut_m = dist_debut_mouvement * sin((Teta_actuel * M_PI) / 180.0);
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <main+0x610>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f8eb 	bl	8000598 <__aeabi_f2d>
 80023c2:	4604      	mov	r4, r0
 80023c4:	460d      	mov	r5, r1
 80023c6:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <main+0x614>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f8e4 	bl	8000598 <__aeabi_f2d>
 80023d0:	a317      	add	r3, pc, #92	@ (adr r3, 8002430 <main+0x5f0>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe f937 	bl	8000648 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <main+0x608>)
 80023e8:	f7fe fa58 	bl	800089c <__aeabi_ddiv>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	ec43 2b17 	vmov	d7, r2, r3
 80023f4:	eeb0 0a47 	vmov.f32	s0, s14
 80023f8:	eef0 0a67 	vmov.f32	s1, s15
 80023fc:	f00a fc00 	bl	800cc00 <sin>
 8002400:	ec53 2b10 	vmov	r2, r3, d0
 8002404:	4620      	mov	r0, r4
 8002406:	4629      	mov	r1, r5
 8002408:	f7fe f91e 	bl	8000648 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fc10 	bl	8000c38 <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	4a10      	ldr	r2, [pc, #64]	@ (800245c <main+0x61c>)
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e0ae      	b.n	800257e <main+0x73e>
 8002420:	47ae147b 	.word	0x47ae147b
 8002424:	3f847ae1 	.word	0x3f847ae1
 8002428:	fc4abcc3 	.word	0xfc4abcc3
 800242c:	3fe70586 	.word	0x3fe70586
 8002430:	54442d18 	.word	0x54442d18
 8002434:	400921fb 	.word	0x400921fb
 8002438:	200002b0 	.word	0x200002b0
 800243c:	20000008 	.word	0x20000008
 8002440:	200002f0 	.word	0x200002f0
 8002444:	200002f1 	.word	0x200002f1
 8002448:	40668000 	.word	0x40668000
 800244c:	20000320 	.word	0x20000320
 8002450:	20000324 	.word	0x20000324
 8002454:	20000314 	.word	0x20000314
 8002458:	20000318 	.word	0x20000318
 800245c:	2000031c 	.word	0x2000031c
 8002460:	447a0000 	.word	0x447a0000
						}
						else {
							asserv(consigne_gauche_m * 1000, consigne_droite_m * 1000);
 8002464:	edd7 7a07 	vldr	s15, [r7, #28]
 8002468:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8002460 <main+0x620>
 800246c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002470:	edd7 7a06 	vldr	s15, [r7, #24]
 8002474:	ed5f 6a06 	vldr	s13, [pc, #-24]	@ 8002460 <main+0x620>
 8002478:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800247c:	eef0 0a67 	vmov.f32	s1, s15
 8002480:	eeb0 0a47 	vmov.f32	s0, s14
 8002484:	f7ff f968 	bl	8001758 <asserv>
							dist_debut_mouvement = (consigne_gauche_m * 1000 + consigne_droite_m * 1000) / 2;
 8002488:	edd7 7a07 	vldr	s15, [r7, #28]
 800248c:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 8002460 <main+0x620>
 8002490:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002494:	edd7 7a06 	vldr	s15, [r7, #24]
 8002498:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8002460 <main+0x620>
 800249c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80024a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ac:	4bba      	ldr	r3, [pc, #744]	@ (8002798 <main+0x958>)
 80024ae:	edc3 7a00 	vstr	s15, [r3]
							X_debut_m = dist_debut_mouvement * cos((Teta_actuel * M_PI) / 180.0);
 80024b2:	4bb9      	ldr	r3, [pc, #740]	@ (8002798 <main+0x958>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f86e 	bl	8000598 <__aeabi_f2d>
 80024bc:	4604      	mov	r4, r0
 80024be:	460d      	mov	r5, r1
 80024c0:	4bb6      	ldr	r3, [pc, #728]	@ (800279c <main+0x95c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f867 	bl	8000598 <__aeabi_f2d>
 80024ca:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002780 <main+0x940>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	f7fe f8ba 	bl	8000648 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	4baf      	ldr	r3, [pc, #700]	@ (80027a0 <main+0x960>)
 80024e2:	f7fe f9db 	bl	800089c <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ec43 2b17 	vmov	d7, r2, r3
 80024ee:	eeb0 0a47 	vmov.f32	s0, s14
 80024f2:	eef0 0a67 	vmov.f32	s1, s15
 80024f6:	f00a fb2f 	bl	800cb58 <cos>
 80024fa:	ec53 2b10 	vmov	r2, r3, d0
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f8a1 	bl	8000648 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb93 	bl	8000c38 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	4aa3      	ldr	r2, [pc, #652]	@ (80027a4 <main+0x964>)
 8002516:	6013      	str	r3, [r2, #0]
							Y_debut_m = dist_debut_mouvement * sin((Teta_actuel * M_PI) / 180.0);
 8002518:	4b9f      	ldr	r3, [pc, #636]	@ (8002798 <main+0x958>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f83b 	bl	8000598 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	4b9d      	ldr	r3, [pc, #628]	@ (800279c <main+0x95c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f834 	bl	8000598 <__aeabi_f2d>
 8002530:	a393      	add	r3, pc, #588	@ (adr r3, 8002780 <main+0x940>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fe f887 	bl	8000648 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	4b96      	ldr	r3, [pc, #600]	@ (80027a0 <main+0x960>)
 8002548:	f7fe f9a8 	bl	800089c <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	ec43 2b17 	vmov	d7, r2, r3
 8002554:	eeb0 0a47 	vmov.f32	s0, s14
 8002558:	eef0 0a67 	vmov.f32	s1, s15
 800255c:	f00a fb50 	bl	800cc00 <sin>
 8002560:	ec53 2b10 	vmov	r2, r3, d0
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fe f86e 	bl	8000648 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb60 	bl	8000c38 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a8b      	ldr	r2, [pc, #556]	@ (80027a8 <main+0x968>)
 800257c:	6013      	str	r3, [r2, #0]
						}
					}
					n_DEC++;
 800257e:	4b8b      	ldr	r3, [pc, #556]	@ (80027ac <main+0x96c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	4a89      	ldr	r2, [pc, #548]	@ (80027ac <main+0x96c>)
 8002586:	6013      	str	r3, [r2, #0]
					if (n_DEC >= ND || vitesse <= 0) {
 8002588:	4b88      	ldr	r3, [pc, #544]	@ (80027ac <main+0x96c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002594:	4b86      	ldr	r3, [pc, #536]	@ (80027b0 <main+0x970>)
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	da09      	bge.n	80025b8 <main+0x778>
 80025a4:	4b83      	ldr	r3, [pc, #524]	@ (80027b4 <main+0x974>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	d901      	bls.n	80025b8 <main+0x778>
						consigne_gauche_m = 0;
						consigne_droite_m = 0;
						envoi_fin_auto++;
						currentState = STATE_stop;
					}
					break;
 80025b4:	f000 bcce 	b.w	8002f54 <main+0x1114>
						X_actuel += X_debut_m;
 80025b8:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <main+0x978>)
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	4b79      	ldr	r3, [pc, #484]	@ (80027a4 <main+0x964>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c8:	4b7b      	ldr	r3, [pc, #492]	@ (80027b8 <main+0x978>)
 80025ca:	edc3 7a00 	vstr	s15, [r3]
						Y_actuel += Y_debut_m;
 80025ce:	4b7b      	ldr	r3, [pc, #492]	@ (80027bc <main+0x97c>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	4b74      	ldr	r3, [pc, #464]	@ (80027a8 <main+0x968>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025de:	4b77      	ldr	r3, [pc, #476]	@ (80027bc <main+0x97c>)
 80025e0:	edc3 7a00 	vstr	s15, [r3]
						Teta_actuel += Teta_debut_m;
 80025e4:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <main+0x95c>)
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	4b75      	ldr	r3, [pc, #468]	@ (80027c0 <main+0x980>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	4b69      	ldr	r3, [pc, #420]	@ (800279c <main+0x95c>)
 80025f6:	edc3 7a00 	vstr	s15, [r3]
						X_debut_m = 0.0;
 80025fa:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <main+0x964>)
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
						Y_debut_m = 0.0;
 8002602:	4b69      	ldr	r3, [pc, #420]	@ (80027a8 <main+0x968>)
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
						Teta_debut_m = 0.0;
 800260a:	4b6d      	ldr	r3, [pc, #436]	@ (80027c0 <main+0x980>)
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
						start_roue_droite_mm = statut_odometrie.dist_roue_droite_mm;
 8002612:	4b6c      	ldr	r3, [pc, #432]	@ (80027c4 <main+0x984>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6c      	ldr	r2, [pc, #432]	@ (80027c8 <main+0x988>)
 8002618:	6013      	str	r3, [r2, #0]
						start_roue_gauche_mm = statut_odometrie.dist_roue_gauche_mm;
 800261a:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <main+0x984>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a6b      	ldr	r2, [pc, #428]	@ (80027cc <main+0x98c>)
 8002620:	6013      	str	r3, [r2, #0]
						consigne_gauche_m = 0;
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
						consigne_droite_m = 0;
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
						envoi_fin_auto++;
 800262e:	4b68      	ldr	r3, [pc, #416]	@ (80027d0 <main+0x990>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	4a66      	ldr	r2, [pc, #408]	@ (80027d0 <main+0x990>)
 8002636:	6013      	str	r3, [r2, #0]
						currentState = STATE_stop;
 8002638:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <main+0x994>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
					break;
 800263e:	f000 bc89 	b.w	8002f54 <main+0x1114>
					//___________________________________________________________________________________________________________AVENCER
				case STATE_acc:
					baisser_drapeau();
 8002642:	f7ff fbef 	bl	8001e24 <baisser_drapeau>
					vitesse = vitesse + acceleration * TE;
 8002646:	4b5b      	ldr	r3, [pc, #364]	@ (80027b4 <main+0x974>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ffa4 	bl	8000598 <__aeabi_f2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	4b60      	ldr	r3, [pc, #384]	@ (80027d8 <main+0x998>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff9d 	bl	8000598 <__aeabi_f2d>
 800265e:	a34a      	add	r3, pc, #296	@ (adr r3, 8002788 <main+0x948>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd fff0 	bl	8000648 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fe34 	bl	80002dc <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fadc 	bl	8000c38 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	4a4c      	ldr	r2, [pc, #304]	@ (80027b4 <main+0x974>)
 8002684:	6013      	str	r3, [r2, #0]
					consigne_gauche_m = consigne_gauche_m + vitesse * TE;
 8002686:	69f8      	ldr	r0, [r7, #28]
 8002688:	f7fd ff86 	bl	8000598 <__aeabi_f2d>
 800268c:	4604      	mov	r4, r0
 800268e:	460d      	mov	r5, r1
 8002690:	4b48      	ldr	r3, [pc, #288]	@ (80027b4 <main+0x974>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff7f 	bl	8000598 <__aeabi_f2d>
 800269a:	a33b      	add	r3, pc, #236	@ (adr r3, 8002788 <main+0x948>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffd2 	bl	8000648 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4620      	mov	r0, r4
 80026aa:	4629      	mov	r1, r5
 80026ac:	f7fd fe16 	bl	80002dc <__adddf3>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe fabe 	bl	8000c38 <__aeabi_d2f>
 80026bc:	4603      	mov	r3, r0
 80026be:	61fb      	str	r3, [r7, #28]
					consigne_droite_m = consigne_droite_m + vitesse * TE;
 80026c0:	69b8      	ldr	r0, [r7, #24]
 80026c2:	f7fd ff69 	bl	8000598 <__aeabi_f2d>
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	4b3a      	ldr	r3, [pc, #232]	@ (80027b4 <main+0x974>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd ff62 	bl	8000598 <__aeabi_f2d>
 80026d4:	a32c      	add	r3, pc, #176	@ (adr r3, 8002788 <main+0x948>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fd ffb5 	bl	8000648 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd fdf9 	bl	80002dc <__adddf3>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe faa1 	bl	8000c38 <__aeabi_d2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
					if (mouvement_rotation) {
 80026fa:	4b38      	ldr	r3, [pc, #224]	@ (80027dc <main+0x99c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80a8 	beq.w	8002854 <main+0xa14>
						if (mouvement_reculer) {
 8002704:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <main+0x9a0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d06d      	beq.n	80027e8 <main+0x9a8>
							asserv(consigne_gauche_m * 1000, -consigne_droite_m * 1000);
 800270c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002710:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80027e4 <main+0x9a4>
 8002714:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002718:	edd7 7a06 	vldr	s15, [r7, #24]
 800271c:	eef1 7a67 	vneg.f32	s15, s15
 8002720:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80027e4 <main+0x9a4>
 8002724:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002728:	eef0 0a67 	vmov.f32	s1, s15
 800272c:	eeb0 0a47 	vmov.f32	s0, s14
 8002730:	f7ff f812 	bl	8001758 <asserv>
							Teta_debut_m = -((consigne_droite_m + consigne_gauche_m) * 180.0) / PERIMETRE_CERCLE_ENTRE_LES_ROUES;
 8002734:	ed97 7a06 	vldr	s14, [r7, #24]
 8002738:	edd7 7a07 	vldr	s15, [r7, #28]
 800273c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002740:	ee17 0a90 	vmov	r0, s15
 8002744:	f7fd ff28 	bl	8000598 <__aeabi_f2d>
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <main+0x960>)
 800274e:	f7fd ff7b 	bl	8000648 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4692      	mov	sl, r2
 8002758:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800275c:	a30c      	add	r3, pc, #48	@ (adr r3, 8002790 <main+0x950>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	4650      	mov	r0, sl
 8002764:	4659      	mov	r1, fp
 8002766:	f7fe f899 	bl	800089c <__aeabi_ddiv>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe fa61 	bl	8000c38 <__aeabi_d2f>
 8002776:	4603      	mov	r3, r0
 8002778:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <main+0x980>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e192      	b.n	8002aa4 <main+0xc64>
 800277e:	bf00      	nop
 8002780:	54442d18 	.word	0x54442d18
 8002784:	400921fb 	.word	0x400921fb
 8002788:	47ae147b 	.word	0x47ae147b
 800278c:	3f847ae1 	.word	0x3f847ae1
 8002790:	fc4abcc3 	.word	0xfc4abcc3
 8002794:	3fe70586 	.word	0x3fe70586
 8002798:	20000324 	.word	0x20000324
 800279c:	20000314 	.word	0x20000314
 80027a0:	40668000 	.word	0x40668000
 80027a4:	20000318 	.word	0x20000318
 80027a8:	2000031c 	.word	0x2000031c
 80027ac:	200002bc 	.word	0x200002bc
 80027b0:	200002d4 	.word	0x200002d4
 80027b4:	200002b0 	.word	0x200002b0
 80027b8:	2000030c 	.word	0x2000030c
 80027bc:	20000310 	.word	0x20000310
 80027c0:	20000320 	.word	0x20000320
 80027c4:	20000280 	.word	0x20000280
 80027c8:	20000328 	.word	0x20000328
 80027cc:	2000032c 	.word	0x2000032c
 80027d0:	20000304 	.word	0x20000304
 80027d4:	2000027c 	.word	0x2000027c
 80027d8:	20000004 	.word	0x20000004
 80027dc:	200002f0 	.word	0x200002f0
 80027e0:	200002f1 	.word	0x200002f1
 80027e4:	447a0000 	.word	0x447a0000
						}
						else {
							asserv(-consigne_gauche_m * 1000, consigne_droite_m * 1000);
 80027e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80027ec:	eef1 7a67 	vneg.f32	s15, s15
 80027f0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80027e4 <main+0x9a4>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fc:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 80027e4 <main+0x9a4>
 8002800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002804:	eef0 0a67 	vmov.f32	s1, s15
 8002808:	eeb0 0a47 	vmov.f32	s0, s14
 800280c:	f7fe ffa4 	bl	8001758 <asserv>
							Teta_debut_m = ((consigne_droite_m + consigne_gauche_m) * 180.0) / PERIMETRE_CERCLE_ENTRE_LES_ROUES;
 8002810:	ed97 7a06 	vldr	s14, [r7, #24]
 8002814:	edd7 7a07 	vldr	s15, [r7, #28]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	ee17 0a90 	vmov	r0, s15
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4bb3      	ldr	r3, [pc, #716]	@ (8002af8 <main+0xcb8>)
 800282a:	f7fd ff0d 	bl	8000648 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	a3ac      	add	r3, pc, #688	@ (adr r3, 8002ae8 <main+0xca8>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f7fe f82e 	bl	800089c <__aeabi_ddiv>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f9f6 	bl	8000c38 <__aeabi_d2f>
 800284c:	4603      	mov	r3, r0
 800284e:	4aab      	ldr	r2, [pc, #684]	@ (8002afc <main+0xcbc>)
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e127      	b.n	8002aa4 <main+0xc64>
						}
					}
					else {
						if (mouvement_reculer) {
 8002854:	4baa      	ldr	r3, [pc, #680]	@ (8002b00 <main+0xcc0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8096 	beq.w	800298a <main+0xb4a>
							asserv(-consigne_gauche_m * 1000, -consigne_droite_m * 1000);
 800285e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002862:	eef1 7a67 	vneg.f32	s15, s15
 8002866:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002b04 <main+0xcc4>
 800286a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800286e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002872:	eef1 7a67 	vneg.f32	s15, s15
 8002876:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b04 <main+0xcc4>
 800287a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800287e:	eef0 0a67 	vmov.f32	s1, s15
 8002882:	eeb0 0a47 	vmov.f32	s0, s14
 8002886:	f7fe ff67 	bl	8001758 <asserv>
							dist_debut_mouvement = (-consigne_gauche_m * 1000 + -consigne_droite_m * 1000) / 2;
 800288a:	edd7 7a07 	vldr	s15, [r7, #28]
 800288e:	eef1 7a67 	vneg.f32	s15, s15
 8002892:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8002b04 <main+0xcc4>
 8002896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800289a:	edd7 7a06 	vldr	s15, [r7, #24]
 800289e:	eef1 7a67 	vneg.f32	s15, s15
 80028a2:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8002b04 <main+0xcc4>
 80028a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80028b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b6:	4b94      	ldr	r3, [pc, #592]	@ (8002b08 <main+0xcc8>)
 80028b8:	edc3 7a00 	vstr	s15, [r3]
							X_debut_m = dist_debut_mouvement * cos((Teta_actuel * M_PI) / 180.0);
 80028bc:	4b92      	ldr	r3, [pc, #584]	@ (8002b08 <main+0xcc8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe69 	bl	8000598 <__aeabi_f2d>
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4b90      	ldr	r3, [pc, #576]	@ (8002b0c <main+0xccc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fe62 	bl	8000598 <__aeabi_f2d>
 80028d4:	a386      	add	r3, pc, #536	@ (adr r3, 8002af0 <main+0xcb0>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd feb5 	bl	8000648 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	4b83      	ldr	r3, [pc, #524]	@ (8002af8 <main+0xcb8>)
 80028ec:	f7fd ffd6 	bl	800089c <__aeabi_ddiv>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	ec43 2b17 	vmov	d7, r2, r3
 80028f8:	eeb0 0a47 	vmov.f32	s0, s14
 80028fc:	eef0 0a67 	vmov.f32	s1, s15
 8002900:	f00a f92a 	bl	800cb58 <cos>
 8002904:	ec53 2b10 	vmov	r2, r3, d0
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fe9c 	bl	8000648 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f98e 	bl	8000c38 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b10 <main+0xcd0>)
 8002920:	6013      	str	r3, [r2, #0]
							Y_debut_m = dist_debut_mouvement * sin((Teta_actuel * M_PI) / 180.0);
 8002922:	4b79      	ldr	r3, [pc, #484]	@ (8002b08 <main+0xcc8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe36 	bl	8000598 <__aeabi_f2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	4b76      	ldr	r3, [pc, #472]	@ (8002b0c <main+0xccc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fe2f 	bl	8000598 <__aeabi_f2d>
 800293a:	a36d      	add	r3, pc, #436	@ (adr r3, 8002af0 <main+0xcb0>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fe82 	bl	8000648 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <main+0xcb8>)
 8002952:	f7fd ffa3 	bl	800089c <__aeabi_ddiv>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	ec43 2b17 	vmov	d7, r2, r3
 800295e:	eeb0 0a47 	vmov.f32	s0, s14
 8002962:	eef0 0a67 	vmov.f32	s1, s15
 8002966:	f00a f94b 	bl	800cc00 <sin>
 800296a:	ec53 2b10 	vmov	r2, r3, d0
 800296e:	4620      	mov	r0, r4
 8002970:	4629      	mov	r1, r5
 8002972:	f7fd fe69 	bl	8000648 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f7fe f95b 	bl	8000c38 <__aeabi_d2f>
 8002982:	4603      	mov	r3, r0
 8002984:	4a63      	ldr	r2, [pc, #396]	@ (8002b14 <main+0xcd4>)
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	e08c      	b.n	8002aa4 <main+0xc64>
						}
						else {
							asserv(consigne_gauche_m * 1000, consigne_droite_m * 1000);
 800298a:	edd7 7a07 	vldr	s15, [r7, #28]
 800298e:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8002b04 <main+0xcc4>
 8002992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002996:	edd7 7a06 	vldr	s15, [r7, #24]
 800299a:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002b04 <main+0xcc4>
 800299e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a2:	eef0 0a67 	vmov.f32	s1, s15
 80029a6:	eeb0 0a47 	vmov.f32	s0, s14
 80029aa:	f7fe fed5 	bl	8001758 <asserv>
							dist_debut_mouvement = (consigne_gauche_m * 1000 + consigne_droite_m * 1000) / 2;
 80029ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b2:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002b04 <main+0xcc4>
 80029b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80029be:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b04 <main+0xcc4>
 80029c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80029ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002b08 <main+0xcc8>)
 80029d4:	edc3 7a00 	vstr	s15, [r3]
							X_debut_m = dist_debut_mouvement * cos((Teta_actuel * M_PI) / 180.0);
 80029d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b08 <main+0xcc8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fddb 	bl	8000598 <__aeabi_f2d>
 80029e2:	4604      	mov	r4, r0
 80029e4:	460d      	mov	r5, r1
 80029e6:	4b49      	ldr	r3, [pc, #292]	@ (8002b0c <main+0xccc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fdd4 	bl	8000598 <__aeabi_f2d>
 80029f0:	a33f      	add	r3, pc, #252	@ (adr r3, 8002af0 <main+0xcb0>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fd fe27 	bl	8000648 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	4b3c      	ldr	r3, [pc, #240]	@ (8002af8 <main+0xcb8>)
 8002a08:	f7fd ff48 	bl	800089c <__aeabi_ddiv>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	ec43 2b17 	vmov	d7, r2, r3
 8002a14:	eeb0 0a47 	vmov.f32	s0, s14
 8002a18:	eef0 0a67 	vmov.f32	s1, s15
 8002a1c:	f00a f89c 	bl	800cb58 <cos>
 8002a20:	ec53 2b10 	vmov	r2, r3, d0
 8002a24:	4620      	mov	r0, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	f7fd fe0e 	bl	8000648 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7fe f900 	bl	8000c38 <__aeabi_d2f>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4a35      	ldr	r2, [pc, #212]	@ (8002b10 <main+0xcd0>)
 8002a3c:	6013      	str	r3, [r2, #0]
							Y_debut_m = dist_debut_mouvement * sin((Teta_actuel * M_PI) / 180.0);
 8002a3e:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <main+0xcc8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fda8 	bl	8000598 <__aeabi_f2d>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <main+0xccc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fda1 	bl	8000598 <__aeabi_f2d>
 8002a56:	a326      	add	r3, pc, #152	@ (adr r3, 8002af0 <main+0xcb0>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fdf4 	bl	8000648 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <main+0xcb8>)
 8002a6e:	f7fd ff15 	bl	800089c <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	ec43 2b17 	vmov	d7, r2, r3
 8002a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7e:	eef0 0a67 	vmov.f32	s1, s15
 8002a82:	f00a f8bd 	bl	800cc00 <sin>
 8002a86:	ec53 2b10 	vmov	r2, r3, d0
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f7fd fddb 	bl	8000648 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f8cd 	bl	8000c38 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <main+0xcd4>)
 8002aa2:	6013      	str	r3, [r2, #0]
						}
					}
					n_ACC++;
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <main+0xcd8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b18 <main+0xcd8>)
 8002aac:	6013      	str	r3, [r2, #0]
					if (n_ACC >= NA) {
 8002aae:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <main+0xcd8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aba:	4b18      	ldr	r3, [pc, #96]	@ (8002b1c <main+0xcdc>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	da00      	bge.n	8002acc <main+0xc8c>
						if (triangle)
							currentState = STATE_dec;
						else
							currentState = STATE_const;
					}
					break;
 8002aca:	e243      	b.n	8002f54 <main+0x1114>
						if (triangle)
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <main+0xce0>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <main+0xc9c>
							currentState = STATE_dec;
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <main+0xce4>)
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	701a      	strb	r2, [r3, #0]
					break;
 8002ada:	e23b      	b.n	8002f54 <main+0x1114>
							currentState = STATE_const;
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <main+0xce4>)
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
					break;
 8002ae2:	e237      	b.n	8002f54 <main+0x1114>
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	fc4abcc3 	.word	0xfc4abcc3
 8002aec:	3fe70586 	.word	0x3fe70586
 8002af0:	54442d18 	.word	0x54442d18
 8002af4:	400921fb 	.word	0x400921fb
 8002af8:	40668000 	.word	0x40668000
 8002afc:	20000320 	.word	0x20000320
 8002b00:	200002f1 	.word	0x200002f1
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	20000324 	.word	0x20000324
 8002b0c:	20000314 	.word	0x20000314
 8002b10:	20000318 	.word	0x20000318
 8002b14:	2000031c 	.word	0x2000031c
 8002b18:	200002c0 	.word	0x200002c0
 8002b1c:	200002d0 	.word	0x200002d0
 8002b20:	200002dc 	.word	0x200002dc
 8002b24:	2000027c 	.word	0x2000027c
					//___________________________________________________________________________________________________________RECULER
				case STATE_const:
					consigne_gauche_m = consigne_gauche_m + vitesse * TE;
 8002b28:	69f8      	ldr	r0, [r7, #28]
 8002b2a:	f7fd fd35 	bl	8000598 <__aeabi_f2d>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460d      	mov	r5, r1
 8002b32:	4bab      	ldr	r3, [pc, #684]	@ (8002de0 <main+0xfa0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd2e 	bl	8000598 <__aeabi_f2d>
 8002b3c:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002dc8 <main+0xf88>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd81 	bl	8000648 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f86d 	bl	8000c38 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	61fb      	str	r3, [r7, #28]
					consigne_droite_m = consigne_droite_m + vitesse * TE;
 8002b62:	69b8      	ldr	r0, [r7, #24]
 8002b64:	f7fd fd18 	bl	8000598 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8002de0 <main+0xfa0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fd11 	bl	8000598 <__aeabi_f2d>
 8002b76:	a394      	add	r3, pc, #592	@ (adr r3, 8002dc8 <main+0xf88>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd64 	bl	8000648 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fba8 	bl	80002dc <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f850 	bl	8000c38 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]
					if (mouvement_rotation) {
 8002b9c:	4b91      	ldr	r3, [pc, #580]	@ (8002de4 <main+0xfa4>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d073      	beq.n	8002c8c <main+0xe4c>
						if (mouvement_reculer) {
 8002ba4:	4b90      	ldr	r3, [pc, #576]	@ (8002de8 <main+0xfa8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d039      	beq.n	8002c20 <main+0xde0>
							asserv(consigne_gauche_m * 1000, -consigne_droite_m * 1000);
 8002bac:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bb0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002e04 <main+0xfc4>
 8002bb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bbc:	eef1 7a67 	vneg.f32	s15, s15
 8002bc0:	eddf 6a90 	vldr	s13, [pc, #576]	@ 8002e04 <main+0xfc4>
 8002bc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bc8:	eef0 0a67 	vmov.f32	s1, s15
 8002bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd0:	f7fe fdc2 	bl	8001758 <asserv>
							Teta_debut_m = -((consigne_droite_m + consigne_gauche_m) * 180.0) / PERIMETRE_CERCLE_ENTRE_LES_ROUES;
 8002bd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	ee17 0a90 	vmov	r0, s15
 8002be4:	f7fd fcd8 	bl	8000598 <__aeabi_f2d>
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b7f      	ldr	r3, [pc, #508]	@ (8002dec <main+0xfac>)
 8002bee:	f7fd fd2b 	bl	8000648 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	603a      	str	r2, [r7, #0]
 8002bf8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	a374      	add	r3, pc, #464	@ (adr r3, 8002dd0 <main+0xf90>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c08:	f7fd fe48 	bl	800089c <__aeabi_ddiv>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fe f810 	bl	8000c38 <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a75      	ldr	r2, [pc, #468]	@ (8002df0 <main+0xfb0>)
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e180      	b.n	8002f22 <main+0x10e2>
						} else {
							asserv(-consigne_gauche_m * 1000, consigne_droite_m * 1000);
 8002c20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c24:	eef1 7a67 	vneg.f32	s15, s15
 8002c28:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002e04 <main+0xfc4>
 8002c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c34:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002e04 <main+0xfc4>
 8002c38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c3c:	eef0 0a67 	vmov.f32	s1, s15
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	f7fe fd88 	bl	8001758 <asserv>
							Teta_debut_m = ((consigne_droite_m + consigne_gauche_m) * 180.0) / PERIMETRE_CERCLE_ENTRE_LES_ROUES;
 8002c48:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c54:	ee17 0a90 	vmov	r0, s15
 8002c58:	f7fd fc9e 	bl	8000598 <__aeabi_f2d>
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	4b62      	ldr	r3, [pc, #392]	@ (8002dec <main+0xfac>)
 8002c62:	f7fd fcf1 	bl	8000648 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	a358      	add	r3, pc, #352	@ (adr r3, 8002dd0 <main+0xf90>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fe12 	bl	800089c <__aeabi_ddiv>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7fd ffda 	bl	8000c38 <__aeabi_d2f>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4a5a      	ldr	r2, [pc, #360]	@ (8002df0 <main+0xfb0>)
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e14a      	b.n	8002f22 <main+0x10e2>
						}
					} else {
						if (mouvement_reculer) {
 8002c8c:	4b56      	ldr	r3, [pc, #344]	@ (8002de8 <main+0xfa8>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80b9 	beq.w	8002e08 <main+0xfc8>
							asserv(-consigne_gauche_m * 1000, -consigne_droite_m * 1000);
 8002c96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c9a:	eef1 7a67 	vneg.f32	s15, s15
 8002c9e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002e04 <main+0xfc4>
 8002ca2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002caa:	eef1 7a67 	vneg.f32	s15, s15
 8002cae:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002e04 <main+0xfc4>
 8002cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cb6:	eef0 0a67 	vmov.f32	s1, s15
 8002cba:	eeb0 0a47 	vmov.f32	s0, s14
 8002cbe:	f7fe fd4b 	bl	8001758 <asserv>
							dist_debut_mouvement = (-consigne_gauche_m * 1000 + (-consigne_droite_m * 1000)) / 2;
 8002cc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc6:	eef1 7a67 	vneg.f32	s15, s15
 8002cca:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002e04 <main+0xfc4>
 8002cce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cd6:	eef1 7a67 	vneg.f32	s15, s15
 8002cda:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002e04 <main+0xfc4>
 8002cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cee:	4b41      	ldr	r3, [pc, #260]	@ (8002df4 <main+0xfb4>)
 8002cf0:	edc3 7a00 	vstr	s15, [r3]
							X_debut_m = dist_debut_mouvement * cos((Teta_actuel * M_PI) / 180.0);
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8002df4 <main+0xfb4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc4d 	bl	8000598 <__aeabi_f2d>
 8002cfe:	4604      	mov	r4, r0
 8002d00:	460d      	mov	r5, r1
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <main+0xfb8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc46 	bl	8000598 <__aeabi_f2d>
 8002d0c:	a332      	add	r3, pc, #200	@ (adr r3, 8002dd8 <main+0xf98>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fc99 	bl	8000648 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	4b32      	ldr	r3, [pc, #200]	@ (8002dec <main+0xfac>)
 8002d24:	f7fd fdba 	bl	800089c <__aeabi_ddiv>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	ec43 2b17 	vmov	d7, r2, r3
 8002d30:	eeb0 0a47 	vmov.f32	s0, s14
 8002d34:	eef0 0a67 	vmov.f32	s1, s15
 8002d38:	f009 ff0e 	bl	800cb58 <cos>
 8002d3c:	ec53 2b10 	vmov	r2, r3, d0
 8002d40:	4620      	mov	r0, r4
 8002d42:	4629      	mov	r1, r5
 8002d44:	f7fd fc80 	bl	8000648 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7fd ff72 	bl	8000c38 <__aeabi_d2f>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <main+0xfbc>)
 8002d58:	6013      	str	r3, [r2, #0]
							Y_debut_m = dist_debut_mouvement * sin((Teta_actuel * M_PI) / 180.0);
 8002d5a:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <main+0xfb4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc1a 	bl	8000598 <__aeabi_f2d>
 8002d64:	4604      	mov	r4, r0
 8002d66:	460d      	mov	r5, r1
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <main+0xfb8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fc13 	bl	8000598 <__aeabi_f2d>
 8002d72:	a319      	add	r3, pc, #100	@ (adr r3, 8002dd8 <main+0xf98>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fc66 	bl	8000648 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <main+0xfac>)
 8002d8a:	f7fd fd87 	bl	800089c <__aeabi_ddiv>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	ec43 2b17 	vmov	d7, r2, r3
 8002d96:	eeb0 0a47 	vmov.f32	s0, s14
 8002d9a:	eef0 0a67 	vmov.f32	s1, s15
 8002d9e:	f009 ff2f 	bl	800cc00 <sin>
 8002da2:	ec53 2b10 	vmov	r2, r3, d0
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7fd fc4d 	bl	8000648 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd ff3f 	bl	8000c38 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a10      	ldr	r2, [pc, #64]	@ (8002e00 <main+0xfc0>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e0af      	b.n	8002f22 <main+0x10e2>
 8002dc2:	bf00      	nop
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	47ae147b 	.word	0x47ae147b
 8002dcc:	3f847ae1 	.word	0x3f847ae1
 8002dd0:	fc4abcc3 	.word	0xfc4abcc3
 8002dd4:	3fe70586 	.word	0x3fe70586
 8002dd8:	54442d18 	.word	0x54442d18
 8002ddc:	400921fb 	.word	0x400921fb
 8002de0:	200002b0 	.word	0x200002b0
 8002de4:	200002f0 	.word	0x200002f0
 8002de8:	200002f1 	.word	0x200002f1
 8002dec:	40668000 	.word	0x40668000
 8002df0:	20000320 	.word	0x20000320
 8002df4:	20000324 	.word	0x20000324
 8002df8:	20000314 	.word	0x20000314
 8002dfc:	20000318 	.word	0x20000318
 8002e00:	2000031c 	.word	0x2000031c
 8002e04:	447a0000 	.word	0x447a0000
						} else {
							asserv(consigne_gauche_m * 1000, consigne_droite_m * 1000);
 8002e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e0c:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8002e04 <main+0xfc4>
 8002e10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e18:	ed5f 6a06 	vldr	s13, [pc, #-24]	@ 8002e04 <main+0xfc4>
 8002e1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e20:	eef0 0a67 	vmov.f32	s1, s15
 8002e24:	eeb0 0a47 	vmov.f32	s0, s14
 8002e28:	f7fe fc96 	bl	8001758 <asserv>
							dist_debut_mouvement = (consigne_gauche_m * 1000 + consigne_droite_m * 1000) / 2;
 8002e2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e30:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 8002e04 <main+0xfc4>
 8002e34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e38:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e3c:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8002e04 <main+0xfc4>
 8002e40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e48:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <main+0x1128>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]
							X_debut_m = dist_debut_mouvement * cos((Teta_actuel * M_PI) / 180.0);
 8002e56:	4b44      	ldr	r3, [pc, #272]	@ (8002f68 <main+0x1128>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb9c 	bl	8000598 <__aeabi_f2d>
 8002e60:	4604      	mov	r4, r0
 8002e62:	460d      	mov	r5, r1
 8002e64:	4b41      	ldr	r3, [pc, #260]	@ (8002f6c <main+0x112c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb95 	bl	8000598 <__aeabi_f2d>
 8002e6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002f60 <main+0x1120>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbe8 	bl	8000648 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	4b3a      	ldr	r3, [pc, #232]	@ (8002f70 <main+0x1130>)
 8002e86:	f7fd fd09 	bl	800089c <__aeabi_ddiv>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	ec43 2b17 	vmov	d7, r2, r3
 8002e92:	eeb0 0a47 	vmov.f32	s0, s14
 8002e96:	eef0 0a67 	vmov.f32	s1, s15
 8002e9a:	f009 fe5d 	bl	800cb58 <cos>
 8002e9e:	ec53 2b10 	vmov	r2, r3, d0
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7fd fbcf 	bl	8000648 <__aeabi_dmul>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd fec1 	bl	8000c38 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f74 <main+0x1134>)
 8002eba:	6013      	str	r3, [r2, #0]
							Y_debut_m = dist_debut_mouvement * sin((Teta_actuel * M_PI) / 180.0);
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f68 <main+0x1128>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb69 	bl	8000598 <__aeabi_f2d>
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460d      	mov	r5, r1
 8002eca:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <main+0x112c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fb62 	bl	8000598 <__aeabi_f2d>
 8002ed4:	a322      	add	r3, pc, #136	@ (adr r3, 8002f60 <main+0x1120>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd fbb5 	bl	8000648 <__aeabi_dmul>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <main+0x1130>)
 8002eec:	f7fd fcd6 	bl	800089c <__aeabi_ddiv>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	ec43 2b17 	vmov	d7, r2, r3
 8002ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8002efc:	eef0 0a67 	vmov.f32	s1, s15
 8002f00:	f009 fe7e 	bl	800cc00 <sin>
 8002f04:	ec53 2b10 	vmov	r2, r3, d0
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd fb9c 	bl	8000648 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fe8e 	bl	8000c38 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a16      	ldr	r2, [pc, #88]	@ (8002f78 <main+0x1138>)
 8002f20:	6013      	str	r3, [r2, #0]
						}
					}
					n_CONST++;
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <main+0x113c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <main+0x113c>)
 8002f2a:	6013      	str	r3, [r2, #0]
					if (n_CONST >= NC) {
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <main+0x113c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f38:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <main+0x1140>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	da00      	bge.n	8002f4a <main+0x110a>
						currentState = STATE_dec;
					}
					break;
 8002f48:	e004      	b.n	8002f54 <main+0x1114>
						currentState = STATE_dec;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <main+0x1144>)
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
					break;
 8002f50:	e000      	b.n	8002f54 <main+0x1114>
					break;
 8002f52:	bf00      	nop
				}
			}
			flag_periode_tim7 = 0;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <main+0x1148>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	while (1) {
 8002f5a:	f7fe bfeb 	b.w	8001f34 <main+0xf4>
 8002f5e:	bf00      	nop
 8002f60:	54442d18 	.word	0x54442d18
 8002f64:	400921fb 	.word	0x400921fb
 8002f68:	20000324 	.word	0x20000324
 8002f6c:	20000314 	.word	0x20000314
 8002f70:	40668000 	.word	0x40668000
 8002f74:	20000318 	.word	0x20000318
 8002f78:	2000031c 	.word	0x2000031c
 8002f7c:	200002c4 	.word	0x200002c4
 8002f80:	200002d8 	.word	0x200002d8
 8002f84:	2000027c 	.word	0x2000027c
 8002f88:	20000338 	.word	0x20000338

08002f8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b094      	sub	sp, #80	@ 0x50
 8002f90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f92:	f107 0318 	add.w	r3, r7, #24
 8002f96:	2238      	movs	r2, #56	@ 0x38
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f006 f9d5 	bl	800934a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	60da      	str	r2, [r3, #12]
 8002fac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f001 ffaa 	bl	8004f08 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fbe:	2340      	movs	r3, #64	@ 0x40
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002fce:	2355      	movs	r3, #85	@ 0x55
 8002fd0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002fde:	f107 0318 	add.w	r3, r7, #24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 f844 	bl	8005070 <HAL_RCC_OscConfig>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <SystemClock_Config+0x66>
		Error_Handler();
 8002fee:	f000 f818 	bl	8003022 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	2104      	movs	r1, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f002 fb42 	bl	8005694 <HAL_RCC_ClockConfig>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <SystemClock_Config+0x8e>
		Error_Handler();
 8003016:	f000 f804 	bl	8003022 <Error_Handler>
	}
}
 800301a:	bf00      	nop
 800301c:	3750      	adds	r7, #80	@ 0x50
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003026:	b672      	cpsid	i
}
 8003028:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/*9 janvier 2007*/
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800302a:	bf00      	nop
 800302c:	e7fd      	b.n	800302a <Error_Handler+0x8>
	...

08003030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <HAL_MspInit+0x44>)
 8003038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303a:	4a0e      	ldr	r2, [pc, #56]	@ (8003074 <HAL_MspInit+0x44>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6613      	str	r3, [r2, #96]	@ 0x60
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_MspInit+0x44>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_MspInit+0x44>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_MspInit+0x44>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003058:	6593      	str	r3, [r2, #88]	@ 0x58
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_MspInit+0x44>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003066:	f001 fff3 	bl	8005050 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <NMI_Handler+0x4>

08003080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <MemManage_Handler+0x4>

08003090 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <UsageFault_Handler+0x4>

080030a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ce:	f000 fe19 	bl	8003d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80030dc:	4802      	ldr	r0, [pc, #8]	@ (80030e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80030de:	f001 faf3 	bl	80046c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000218 	.word	0x20000218

080030ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030f0:	4802      	ldr	r0, [pc, #8]	@ (80030fc <TIM7_IRQHandler+0x10>)
 80030f2:	f003 fa33 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000470 	.word	0x20000470

08003100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return 1;
 8003104:	2301      	movs	r3, #1
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_kill>:

int _kill(int pid, int sig)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800311a:	f006 f969 	bl	80093f0 <__errno>
 800311e:	4603      	mov	r3, r0
 8003120:	2216      	movs	r2, #22
 8003122:	601a      	str	r2, [r3, #0]
  return -1;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_exit>:

void _exit (int status)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffe7 	bl	8003110 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003142:	bf00      	nop
 8003144:	e7fd      	b.n	8003142 <_exit+0x12>

08003146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e00a      	b.n	800316e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003158:	f3af 8000 	nop.w
 800315c:	4601      	mov	r1, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	60ba      	str	r2, [r7, #8]
 8003164:	b2ca      	uxtb	r2, r1
 8003166:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3301      	adds	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	429a      	cmp	r2, r3
 8003174:	dbf0      	blt.n	8003158 <_read+0x12>
  }

  return len;
 8003176:	687b      	ldr	r3, [r7, #4]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e009      	b.n	80031a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	60ba      	str	r2, [r7, #8]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dbf1      	blt.n	8003192 <_write+0x12>
  }
  return len;
 80031ae:	687b      	ldr	r3, [r7, #4]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_close>:

int _close(int file)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031e0:	605a      	str	r2, [r3, #4]
  return 0;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <_isatty>:

int _isatty(int file)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031f8:	2301      	movs	r3, #1
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003228:	4a14      	ldr	r2, [pc, #80]	@ (800327c <_sbrk+0x5c>)
 800322a:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <_sbrk+0x60>)
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <_sbrk+0x64>)
 800323e:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <_sbrk+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <_sbrk+0x64>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d207      	bcs.n	8003260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003250:	f006 f8ce 	bl	80093f0 <__errno>
 8003254:	4603      	mov	r3, r0
 8003256:	220c      	movs	r2, #12
 8003258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
 800325e:	e009      	b.n	8003274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003260:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <_sbrk+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003266:	4b07      	ldr	r3, [pc, #28]	@ (8003284 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <_sbrk+0x64>)
 8003270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003272:	68fb      	ldr	r3, [r7, #12]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20008000 	.word	0x20008000
 8003280:	00000400 	.word	0x00000400
 8003284:	2000033c 	.word	0x2000033c
 8003288:	20000738 	.word	0x20000738

0800328c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <SystemInit+0x20>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	4a05      	ldr	r2, [pc, #20]	@ (80032ac <SystemInit+0x20>)
 8003298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800329c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	2224      	movs	r2, #36	@ 0x24
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f006 f843 	bl	800934a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c4:	463b      	mov	r3, r7
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032ce:	4b23      	ldr	r3, [pc, #140]	@ (800335c <MX_TIM1_Init+0xac>)
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <MX_TIM1_Init+0xb0>)
 80032d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032d4:	4b21      	ldr	r3, [pc, #132]	@ (800335c <MX_TIM1_Init+0xac>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032da:	4b20      	ldr	r3, [pc, #128]	@ (800335c <MX_TIM1_Init+0xac>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80032e0:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <MX_TIM1_Init+0xac>)
 80032e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e8:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <MX_TIM1_Init+0xac>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <MX_TIM1_Init+0xac>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <MX_TIM1_Init+0xac>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003302:	2301      	movs	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003312:	2301      	movs	r3, #1
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003316:	2300      	movs	r3, #0
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	4619      	mov	r1, r3
 8003324:	480d      	ldr	r0, [pc, #52]	@ (800335c <MX_TIM1_Init+0xac>)
 8003326:	f002 ffe5 	bl	80062f4 <HAL_TIM_Encoder_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003330:	f7ff fe77 	bl	8003022 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003340:	463b      	mov	r3, r7
 8003342:	4619      	mov	r1, r3
 8003344:	4805      	ldr	r0, [pc, #20]	@ (800335c <MX_TIM1_Init+0xac>)
 8003346:	f004 f8e3 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003350:	f7ff fe67 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003354:	bf00      	nop
 8003356:	3730      	adds	r7, #48	@ 0x30
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000340 	.word	0x20000340
 8003360:	40012c00 	.word	0x40012c00

08003364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	@ 0x30
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800336a:	f107 030c 	add.w	r3, r7, #12
 800336e:	2224      	movs	r2, #36	@ 0x24
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f005 ffe9 	bl	800934a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003378:	463b      	mov	r3, r7
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003382:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <MX_TIM2_Init+0xa4>)
 8003384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800338a:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <MX_TIM2_Init+0xa4>)
 800338c:	2200      	movs	r2, #0
 800338e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003390:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <MX_TIM2_Init+0xa4>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003396:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <MX_TIM2_Init+0xa4>)
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <MX_TIM2_Init+0xa4>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a4:	4b18      	ldr	r3, [pc, #96]	@ (8003408 <MX_TIM2_Init+0xa4>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033c2:	2301      	movs	r3, #1
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	4619      	mov	r1, r3
 80033d4:	480c      	ldr	r0, [pc, #48]	@ (8003408 <MX_TIM2_Init+0xa4>)
 80033d6:	f002 ff8d 	bl	80062f4 <HAL_TIM_Encoder_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80033e0:	f7ff fe1f 	bl	8003022 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033ec:	463b      	mov	r3, r7
 80033ee:	4619      	mov	r1, r3
 80033f0:	4805      	ldr	r0, [pc, #20]	@ (8003408 <MX_TIM2_Init+0xa4>)
 80033f2:	f004 f88d 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80033fc:	f7ff fe11 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	3730      	adds	r7, #48	@ 0x30
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000038c 	.word	0x2000038c

0800340c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	@ 0x38
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003412:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800342c:	463b      	mov	r3, r7
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	615a      	str	r2, [r3, #20]
 800343c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800343e:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003440:	4a2d      	ldr	r2, [pc, #180]	@ (80034f8 <MX_TIM3_Init+0xec>)
 8003442:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003444:	4b2b      	ldr	r3, [pc, #172]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003446:	2200      	movs	r2, #0
 8003448:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8500;
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003452:	f242 1234 	movw	r2, #8500	@ 0x2134
 8003456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003458:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345e:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003464:	4823      	ldr	r0, [pc, #140]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003466:	f002 fd21 	bl	8005eac <HAL_TIM_Base_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003470:	f7ff fdd7 	bl	8003022 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800347a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800347e:	4619      	mov	r1, r3
 8003480:	481c      	ldr	r0, [pc, #112]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003482:	f003 facf 	bl	8006a24 <HAL_TIM_ConfigClockSource>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800348c:	f7ff fdc9 	bl	8003022 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003490:	4818      	ldr	r0, [pc, #96]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 8003492:	f002 fdcd 	bl	8006030 <HAL_TIM_PWM_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800349c:	f7ff fdc1 	bl	8003022 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4811      	ldr	r0, [pc, #68]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 80034b0:	f004 f82e 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80034ba:	f7ff fdb2 	bl	8003022 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034be:	2360      	movs	r3, #96	@ 0x60
 80034c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034ce:	463b      	mov	r3, r7
 80034d0:	220c      	movs	r2, #12
 80034d2:	4619      	mov	r1, r3
 80034d4:	4807      	ldr	r0, [pc, #28]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 80034d6:	f003 f991 	bl	80067fc <HAL_TIM_PWM_ConfigChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80034e0:	f7ff fd9f 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034e4:	4803      	ldr	r0, [pc, #12]	@ (80034f4 <MX_TIM3_Init+0xe8>)
 80034e6:	f000 fa6d 	bl	80039c4 <HAL_TIM_MspPostInit>

}
 80034ea:	bf00      	nop
 80034ec:	3738      	adds	r7, #56	@ 0x38
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200003d8 	.word	0x200003d8
 80034f8:	40000400 	.word	0x40000400

080034fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08e      	sub	sp, #56	@ 0x38
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003510:	f107 031c 	add.w	r3, r7, #28
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800351c:	463b      	mov	r3, r7
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	611a      	str	r2, [r3, #16]
 800352a:	615a      	str	r2, [r3, #20]
 800352c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800352e:	4b2d      	ldr	r3, [pc, #180]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003530:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <MX_TIM4_Init+0xec>)
 8003532:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003534:	4b2b      	ldr	r3, [pc, #172]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003536:	2200      	movs	r2, #0
 8003538:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800353a:	4b2a      	ldr	r3, [pc, #168]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8500;
 8003540:	4b28      	ldr	r3, [pc, #160]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003542:	f242 1234 	movw	r2, #8500	@ 0x2134
 8003546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003548:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354e:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003554:	4823      	ldr	r0, [pc, #140]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003556:	f002 fca9 	bl	8005eac <HAL_TIM_Base_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003560:	f7ff fd5f 	bl	8003022 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800356a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800356e:	4619      	mov	r1, r3
 8003570:	481c      	ldr	r0, [pc, #112]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003572:	f003 fa57 	bl	8006a24 <HAL_TIM_ConfigClockSource>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800357c:	f7ff fd51 	bl	8003022 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003580:	4818      	ldr	r0, [pc, #96]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 8003582:	f002 fd55 	bl	8006030 <HAL_TIM_PWM_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800358c:	f7ff fd49 	bl	8003022 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	4811      	ldr	r0, [pc, #68]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 80035a0:	f003 ffb6 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80035aa:	f7ff fd3a 	bl	8003022 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ae:	2360      	movs	r3, #96	@ 0x60
 80035b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	2200      	movs	r2, #0
 80035c2:	4619      	mov	r1, r3
 80035c4:	4807      	ldr	r0, [pc, #28]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 80035c6:	f003 f919 	bl	80067fc <HAL_TIM_PWM_ConfigChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80035d0:	f7ff fd27 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80035d4:	4803      	ldr	r0, [pc, #12]	@ (80035e4 <MX_TIM4_Init+0xe8>)
 80035d6:	f000 f9f5 	bl	80039c4 <HAL_TIM_MspPostInit>

}
 80035da:	bf00      	nop
 80035dc:	3738      	adds	r7, #56	@ 0x38
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000424 	.word	0x20000424
 80035e8:	40000800 	.word	0x40000800

080035ec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80035fc:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <MX_TIM7_Init+0x64>)
 80035fe:	4a15      	ldr	r2, [pc, #84]	@ (8003654 <MX_TIM7_Init+0x68>)
 8003600:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8003602:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <MX_TIM7_Init+0x64>)
 8003604:	22a9      	movs	r2, #169	@ 0xa9
 8003606:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <MX_TIM7_Init+0x64>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <MX_TIM7_Init+0x64>)
 8003610:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003614:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003616:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <MX_TIM7_Init+0x64>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800361c:	480c      	ldr	r0, [pc, #48]	@ (8003650 <MX_TIM7_Init+0x64>)
 800361e:	f002 fc45 	bl	8005eac <HAL_TIM_Base_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003628:	f7ff fcfb 	bl	8003022 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362c:	2300      	movs	r3, #0
 800362e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	@ (8003650 <MX_TIM7_Init+0x64>)
 800363a:	f003 ff69 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003644:	f7ff fced 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000470 	.word	0x20000470
 8003654:	40001400 	.word	0x40001400

08003658 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 8003678:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <MX_TIM8_Init+0xa4>)
 800367a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 800367c:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 800367e:	22a9      	movs	r2, #169	@ 0xa9
 8003680:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003682:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 8003688:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 800368a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800368e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003696:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80036a2:	4815      	ldr	r0, [pc, #84]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 80036a4:	f002 fc02 	bl	8005eac <HAL_TIM_Base_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80036ae:	f7ff fcb8 	bl	8003022 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80036b8:	f107 0310 	add.w	r3, r7, #16
 80036bc:	4619      	mov	r1, r3
 80036be:	480e      	ldr	r0, [pc, #56]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 80036c0:	f003 f9b0 	bl	8006a24 <HAL_TIM_ConfigClockSource>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80036ca:	f7ff fcaa 	bl	8003022 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4806      	ldr	r0, [pc, #24]	@ (80036f8 <MX_TIM8_Init+0xa0>)
 80036e0:	f003 ff16 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80036ea:	f7ff fc9a 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200004bc 	.word	0x200004bc
 80036fc:	40013400 	.word	0x40013400

08003700 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b094      	sub	sp, #80	@ 0x50
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003706:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	611a      	str	r2, [r3, #16]
 8003716:	615a      	str	r2, [r3, #20]
 8003718:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800371a:	463b      	mov	r3, r7
 800371c:	2234      	movs	r2, #52	@ 0x34
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f005 fe12 	bl	800934a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003728:	4a31      	ldr	r2, [pc, #196]	@ (80037f0 <MX_TIM17_Init+0xf0>)
 800372a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 51;
 800372c:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <MX_TIM17_Init+0xec>)
 800372e:	2233      	movs	r2, #51	@ 0x33
 8003730:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003732:	4b2e      	ldr	r3, [pc, #184]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65000;
 8003738:	4b2c      	ldr	r3, [pc, #176]	@ (80037ec <MX_TIM17_Init+0xec>)
 800373a:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800373e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003740:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003746:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003748:	2200      	movs	r2, #0
 800374a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374c:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <MX_TIM17_Init+0xec>)
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003752:	4826      	ldr	r0, [pc, #152]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003754:	f002 fbaa 	bl	8005eac <HAL_TIM_Base_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800375e:	f7ff fc60 	bl	8003022 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003762:	4822      	ldr	r0, [pc, #136]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003764:	f002 fc64 	bl	8006030 <HAL_TIM_PWM_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800376e:	f7ff fc58 	bl	8003022 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003772:	2360      	movs	r3, #96	@ 0x60
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800377a:	2300      	movs	r3, #0
 800377c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800377e:	2300      	movs	r3, #0
 8003780:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800378e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003792:	2200      	movs	r2, #0
 8003794:	4619      	mov	r1, r3
 8003796:	4815      	ldr	r0, [pc, #84]	@ (80037ec <MX_TIM17_Init+0xec>)
 8003798:	f003 f830 	bl	80067fc <HAL_TIM_PWM_ConfigChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80037a2:	f7ff fc3e 	bl	8003022 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80037c8:	463b      	mov	r3, r7
 80037ca:	4619      	mov	r1, r3
 80037cc:	4807      	ldr	r0, [pc, #28]	@ (80037ec <MX_TIM17_Init+0xec>)
 80037ce:	f003 ff21 	bl	8007614 <HAL_TIMEx_ConfigBreakDeadTime>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80037d8:	f7ff fc23 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80037dc:	4803      	ldr	r0, [pc, #12]	@ (80037ec <MX_TIM17_Init+0xec>)
 80037de:	f000 f8f1 	bl	80039c4 <HAL_TIM_MspPostInit>

}
 80037e2:	bf00      	nop
 80037e4:	3750      	adds	r7, #80	@ 0x50
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000508 	.word	0x20000508
 80037f0:	40014800 	.word	0x40014800

080037f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 031c 	add.w	r3, r7, #28
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2f      	ldr	r2, [pc, #188]	@ (80038d0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d12a      	bne.n	800386c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003816:	4b2f      	ldr	r3, [pc, #188]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	4a2e      	ldr	r2, [pc, #184]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800381c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003820:	6613      	str	r3, [r2, #96]	@ 0x60
 8003822:	4b2c      	ldr	r3, [pc, #176]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003832:	4a28      	ldr	r2, [pc, #160]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800383a:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800383c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = odo_2_A_Pin|odo_2_B_Pin;
 8003846:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800384a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	2300      	movs	r3, #0
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003858:	2306      	movs	r3, #6
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	4619      	mov	r1, r3
 8003862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003866:	f001 f99d 	bl	8004ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800386a:	e02d      	b.n	80038c8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d128      	bne.n	80038c8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003876:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6593      	str	r3, [r2, #88]	@ 0x58
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = odo_1_B_Pin|odo_1_A_Pin;
 80038a6:	2303      	movs	r3, #3
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038b6:	2301      	movs	r3, #1
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	4619      	mov	r1, r3
 80038c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038c4:	f001 f96e 	bl	8004ba4 <HAL_GPIO_Init>
}
 80038c8:	bf00      	nop
 80038ca:	3730      	adds	r7, #48	@ 0x30
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a31      	ldr	r2, [pc, #196]	@ (80039ac <HAL_TIM_Base_MspInit+0xd4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10c      	bne.n	8003904 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ea:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	4a30      	ldr	r2, [pc, #192]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f6:	4b2e      	ldr	r3, [pc, #184]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003902:	e04e      	b.n	80039a2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2a      	ldr	r2, [pc, #168]	@ (80039b4 <HAL_TIM_Base_MspInit+0xdc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800390e:	4b28      	ldr	r3, [pc, #160]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6593      	str	r3, [r2, #88]	@ 0x58
 800391a:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	69bb      	ldr	r3, [r7, #24]
}
 8003926:	e03c      	b.n	80039a2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM7)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a22      	ldr	r2, [pc, #136]	@ (80039b8 <HAL_TIM_Base_MspInit+0xe0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d114      	bne.n	800395c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003932:	4b1f      	ldr	r3, [pc, #124]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	4a1e      	ldr	r2, [pc, #120]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003938:	f043 0320 	orr.w	r3, r3, #32
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
 800393e:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	2037      	movs	r0, #55	@ 0x37
 8003950:	f000 fad1 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003954:	2037      	movs	r0, #55	@ 0x37
 8003956:	f000 fae8 	bl	8003f2a <HAL_NVIC_EnableIRQ>
}
 800395a:	e022      	b.n	80039a2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	@ (80039bc <HAL_TIM_Base_MspInit+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d10c      	bne.n	8003980 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 800396c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003970:	6613      	str	r3, [r2, #96]	@ 0x60
 8003972:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]
}
 800397e:	e010      	b.n	80039a2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM17)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <HAL_TIM_Base_MspInit+0xe8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10b      	bne.n	80039a2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800398a:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 800398c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398e:	4a08      	ldr	r2, [pc, #32]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	6613      	str	r3, [r2, #96]	@ 0x60
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_TIM_Base_MspInit+0xd8>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
}
 80039a2:	bf00      	nop
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40001400 	.word	0x40001400
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40014800 	.word	0x40014800

080039c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	@ 0x28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a33      	ldr	r2, [pc, #204]	@ (8003ab0 <HAL_TIM_MspPostInit+0xec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d11c      	bne.n	8003a20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e6:	4b33      	ldr	r3, [pc, #204]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	4a32      	ldr	r2, [pc, #200]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f2:	4b30      	ldr	r3, [pc, #192]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB7     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2302      	movs	r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8003a0e:	230a      	movs	r3, #10
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	4827      	ldr	r0, [pc, #156]	@ (8003ab8 <HAL_TIM_MspPostInit+0xf4>)
 8003a1a:	f001 f8c3 	bl	8004ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003a1e:	e043      	b.n	8003aa8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a25      	ldr	r2, [pc, #148]	@ (8003abc <HAL_TIM_MspPostInit+0xf8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d11c      	bne.n	8003a64 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a36:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm_mot2_Pin;
 8003a42:	2340      	movs	r3, #64	@ 0x40
 8003a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a52:	2302      	movs	r3, #2
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(pwm_mot2_GPIO_Port, &GPIO_InitStruct);
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4816      	ldr	r0, [pc, #88]	@ (8003ab8 <HAL_TIM_MspPostInit+0xf4>)
 8003a5e:	f001 f8a1 	bl	8004ba4 <HAL_GPIO_Init>
}
 8003a62:	e021      	b.n	8003aa8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM17)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a15      	ldr	r2, [pc, #84]	@ (8003ac0 <HAL_TIM_MspPostInit+0xfc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6e:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 8003a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a72:	4a10      	ldr	r2, [pc, #64]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <HAL_TIM_MspPostInit+0xf0>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003a96:	2301      	movs	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aa4:	f001 f87e 	bl	8004ba4 <HAL_GPIO_Init>
}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	@ 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	48000400 	.word	0x48000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ac8:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003aca:	4a23      	ldr	r2, [pc, #140]	@ (8003b58 <MX_USART2_UART_Init+0x94>)
 8003acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ace:	4b21      	ldr	r3, [pc, #132]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003aea:	220c      	movs	r2, #12
 8003aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aee:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af4:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003afa:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b00:	4b14      	ldr	r3, [pc, #80]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b0c:	4811      	ldr	r0, [pc, #68]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003b0e:	f003 fe53 	bl	80077b8 <HAL_UART_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003b18:	f7ff fa83 	bl	8003022 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	480d      	ldr	r0, [pc, #52]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003b20:	f004 fbbe 	bl	80082a0 <HAL_UARTEx_SetTxFifoThreshold>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003b2a:	f7ff fa7a 	bl	8003022 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4808      	ldr	r0, [pc, #32]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003b32:	f004 fbf3 	bl	800831c <HAL_UARTEx_SetRxFifoThreshold>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003b3c:	f7ff fa71 	bl	8003022 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003b40:	4804      	ldr	r0, [pc, #16]	@ (8003b54 <MX_USART2_UART_Init+0x90>)
 8003b42:	f004 fb74 	bl	800822e <HAL_UARTEx_DisableFifoMode>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003b4c:	f7ff fa69 	bl	8003022 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000554 	.word	0x20000554
 8003b58:	40004400 	.word	0x40004400

08003b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09a      	sub	sp, #104	@ 0x68
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	2244      	movs	r2, #68	@ 0x44
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f005 fbe4 	bl	800934a <memset>
  if(uartHandle->Instance==USART2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1f      	ldr	r2, [pc, #124]	@ (8003c04 <HAL_UART_MspInit+0xa8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d136      	bne.n	8003bfa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 ff97 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ba4:	f7ff fa3d 	bl	8003022 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ba8:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <HAL_UART_MspInit+0xac>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	4a16      	ldr	r2, [pc, #88]	@ (8003c08 <HAL_UART_MspInit+0xac>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb4:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <HAL_UART_MspInit+0xac>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc0:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <HAL_UART_MspInit+0xac>)
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc4:	4a10      	ldr	r2, [pc, #64]	@ (8003c08 <HAL_UART_MspInit+0xac>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <HAL_UART_MspInit+0xac>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003bd8:	230c      	movs	r3, #12
 8003bda:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be4:	2300      	movs	r3, #0
 8003be6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003be8:	2307      	movs	r3, #7
 8003bea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bf6:	f000 ffd5 	bl	8004ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3768      	adds	r7, #104	@ 0x68
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40021000 	.word	0x40021000

08003c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c0c:	480d      	ldr	r0, [pc, #52]	@ (8003c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c10:	f7ff fb3c 	bl	800328c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c14:	480c      	ldr	r0, [pc, #48]	@ (8003c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c16:	490d      	ldr	r1, [pc, #52]	@ (8003c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <LoopForever+0xe>)
  movs r3, #0
 8003c1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003c1c:	e002      	b.n	8003c24 <LoopCopyDataInit>

08003c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c22:	3304      	adds	r3, #4

08003c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c28:	d3f9      	bcc.n	8003c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c58 <LoopForever+0x16>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c30:	e001      	b.n	8003c36 <LoopFillZerobss>

08003c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c34:	3204      	adds	r2, #4

08003c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c38:	d3fb      	bcc.n	8003c32 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003c3a:	f005 fbdf 	bl	80093fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c3e:	f7fe f8ff 	bl	8001e40 <main>

08003c42 <LoopForever>:

LoopForever:
    b LoopForever
 8003c42:	e7fe      	b.n	8003c42 <LoopForever>
  ldr   r0, =_estack
 8003c44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c4c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003c50:	0800e4e0 	.word	0x0800e4e0
  ldr r2, =_sbss
 8003c54:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003c58:	20000738 	.word	0x20000738

08003c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c5c:	e7fe      	b.n	8003c5c <ADC1_2_IRQHandler>

08003c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 f939 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f000 f80e 	bl	8003c90 <HAL_InitTick>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	71fb      	strb	r3, [r7, #7]
 8003c7e:	e001      	b.n	8003c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c80:	f7ff f9d6 	bl	8003030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c84:	79fb      	ldrb	r3, [r7, #7]

}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c9c:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <HAL_InitTick+0x68>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ca4:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <HAL_InitTick+0x6c>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <HAL_InitTick+0x68>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f944 	bl	8003f46 <HAL_SYSTICK_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10f      	bne.n	8003ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	d809      	bhi.n	8003cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd2:	f000 f910 	bl	8003ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d00 <HAL_InitTick+0x70>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e007      	b.n	8003cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e004      	b.n	8003cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000030 	.word	0x20000030
 8003cfc:	20000028 	.word	0x20000028
 8003d00:	2000002c 	.word	0x2000002c

08003d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_IncTick+0x1c>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <HAL_IncTick+0x20>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	4a03      	ldr	r2, [pc, #12]	@ (8003d20 <HAL_IncTick+0x1c>)
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	200005e8 	.word	0x200005e8
 8003d24:	20000030 	.word	0x20000030

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	200005e8 	.word	0x200005e8

08003d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <__NVIC_SetPriorityGrouping+0x44>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <__NVIC_SetPriorityGrouping+0x44>)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	60d3      	str	r3, [r2, #12]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <__NVIC_GetPriorityGrouping+0x18>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 0307 	and.w	r3, r3, #7
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	db0b      	blt.n	8003dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	f003 021f 	and.w	r2, r3, #31
 8003dbc:	4907      	ldr	r1, [pc, #28]	@ (8003ddc <__NVIC_EnableIRQ+0x38>)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000e100 	.word	0xe000e100

08003de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db0a      	blt.n	8003e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	490c      	ldr	r1, [pc, #48]	@ (8003e2c <__NVIC_SetPriority+0x4c>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	0112      	lsls	r2, r2, #4
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	440b      	add	r3, r1
 8003e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e08:	e00a      	b.n	8003e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4908      	ldr	r1, [pc, #32]	@ (8003e30 <__NVIC_SetPriority+0x50>)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	3b04      	subs	r3, #4
 8003e18:	0112      	lsls	r2, r2, #4
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	761a      	strb	r2, [r3, #24]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000e100 	.word	0xe000e100
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	@ 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f1c3 0307 	rsb	r3, r3, #7
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf28      	it	cs
 8003e52:	2304      	movcs	r3, #4
 8003e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d902      	bls.n	8003e64 <NVIC_EncodePriority+0x30>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3b03      	subs	r3, #3
 8003e62:	e000      	b.n	8003e66 <NVIC_EncodePriority+0x32>
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	401a      	ands	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43d9      	mvns	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	4313      	orrs	r3, r2
         );
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3724      	adds	r7, #36	@ 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eac:	d301      	bcc.n	8003eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00f      	b.n	8003ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <SysTick_Config+0x40>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eba:	210f      	movs	r1, #15
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	f7ff ff8e 	bl	8003de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <SysTick_Config+0x40>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eca:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <SysTick_Config+0x40>)
 8003ecc:	2207      	movs	r2, #7
 8003ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000e010 	.word	0xe000e010

08003ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff29 	bl	8003d40 <__NVIC_SetPriorityGrouping>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f04:	f7ff ff40 	bl	8003d88 <__NVIC_GetPriorityGrouping>
 8003f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ff90 	bl	8003e34 <NVIC_EncodePriority>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5f 	bl	8003de0 <__NVIC_SetPriority>
}
 8003f22:	bf00      	nop
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff33 	bl	8003da4 <__NVIC_EnableIRQ>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ffa4 	bl	8003e9c <SysTick_Config>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e147      	b.n	8004202 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f8b8 	bl	80010fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0210 	bic.w	r2, r2, #16
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f9c:	f7ff fec4 	bl	8003d28 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003fa2:	e012      	b.n	8003fca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003fa4:	f7ff fec0 	bl	8003d28 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b0a      	cmp	r3, #10
 8003fb0:	d90b      	bls.n	8003fca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e11b      	b.n	8004202 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d0e5      	beq.n	8003fa4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe8:	f7ff fe9e 	bl	8003d28 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003fee:	e012      	b.n	8004016 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ff0:	f7ff fe9a 	bl	8003d28 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b0a      	cmp	r3, #10
 8003ffc:	d90b      	bls.n	8004016 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2203      	movs	r2, #3
 800400e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0f5      	b.n	8004202 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0e5      	beq.n	8003ff0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0202 	orr.w	r2, r2, #2
 8004032:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a74      	ldr	r2, [pc, #464]	@ (800420c <HAL_FDCAN_Init+0x2ac>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d103      	bne.n	8004046 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800403e:	4a74      	ldr	r2, [pc, #464]	@ (8004210 <HAL_FDCAN_Init+0x2b0>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7c1b      	ldrb	r3, [r3, #16]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d108      	bne.n	8004060 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800405c:	619a      	str	r2, [r3, #24]
 800405e:	e007      	b.n	8004070 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800406e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7c5b      	ldrb	r3, [r3, #17]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d108      	bne.n	800408a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004086:	619a      	str	r2, [r3, #24]
 8004088:	e007      	b.n	800409a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004098:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7c9b      	ldrb	r3, [r3, #18]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d108      	bne.n	80040b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040b0:	619a      	str	r2, [r3, #24]
 80040b2:	e007      	b.n	80040c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80040e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0210 	bic.w	r2, r2, #16
 80040f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d108      	bne.n	8004114 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0204 	orr.w	r2, r2, #4
 8004110:	619a      	str	r2, [r3, #24]
 8004112:	e02c      	b.n	800416e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d028      	beq.n	800416e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d01c      	beq.n	800415e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004132:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0210 	orr.w	r2, r2, #16
 8004142:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d110      	bne.n	800416e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0220 	orr.w	r2, r2, #32
 800415a:	619a      	str	r2, [r3, #24]
 800415c:	e007      	b.n	800416e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0220 	orr.w	r2, r2, #32
 800416c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	3b01      	subs	r3, #1
 8004174:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	3b01      	subs	r3, #1
 800417c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800417e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004186:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	3b01      	subs	r3, #1
 8004190:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004196:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004198:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a2:	d115      	bne.n	80041d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	3b01      	subs	r3, #1
 80041b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	3b01      	subs	r3, #1
 80041ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80041bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	3b01      	subs	r3, #1
 80041c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80041cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fc0a 	bl	8004a00 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40006400 	.word	0x40006400
 8004210:	40006500 	.word	0x40006500

08004214 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d110      	bne.n	800424a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e006      	b.n	8004258 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d12c      	bne.n	80042d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004290:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e023      	b.n	80042e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fbfa 	bl	8004aac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	fa01 f202 	lsl.w	r2, r1, r2
 80042c4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80042c8:	2201      	movs	r2, #1
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e006      	b.n	80042e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042da:	f043 0208 	orr.w	r2, r3, #8
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b08b      	sub	sp, #44	@ 0x2c
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004304:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004306:	7efb      	ldrb	r3, [r7, #27]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f040 80e8 	bne.w	80044de <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b40      	cmp	r3, #64	@ 0x40
 8004312:	d137      	bne.n	8004384 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0db      	b.n	80044ec <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004344:	d10a      	bne.n	800435c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004356:	d101      	bne.n	800435c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004358:	2301      	movs	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	440b      	add	r3, r1
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
 8004382:	e036      	b.n	80043f2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004398:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a3      	b.n	80044ec <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b4:	d10a      	bne.n	80043cc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c6:	d101      	bne.n	80043cc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80043c8:	2301      	movs	r3, #1
 80043ca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d107      	bne.n	8004416 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	0c9b      	lsrs	r3, r3, #18
 800440c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e005      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	3304      	adds	r3, #4
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	0c1b      	lsrs	r3, r3, #16
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0e1b      	lsrs	r3, r3, #24
 8004476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	0fda      	lsrs	r2, r3, #31
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	3304      	adds	r3, #4
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004492:	2300      	movs	r3, #0
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	e00a      	b.n	80044ae <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	441a      	add	r2, r3
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	440b      	add	r3, r1
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	3301      	adds	r3, #1
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4a11      	ldr	r2, [pc, #68]	@ (80044f8 <HAL_FDCAN_GetRxMessage+0x20c>)
 80044b4:	5cd3      	ldrb	r3, [r2, r3]
 80044b6:	461a      	mov	r2, r3
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d3ec      	bcc.n	8004498 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	d105      	bne.n	80044d0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80044ce:	e004      	b.n	80044da <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e006      	b.n	80044ec <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0208 	orr.w	r2, r3, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	372c      	adds	r7, #44	@ 0x2c
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	0800de80 	.word	0x0800de80

080044fc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800450e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <HAL_FDCAN_ActivateNotification+0x22>
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b02      	cmp	r3, #2
 800451a:	f040 80c8 	bne.w	80046ae <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03b      	beq.n	80045b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d031      	beq.n	80045b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d027      	beq.n	80045b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01d      	beq.n	80045b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d013      	beq.n	80045b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d13b      	bne.n	800464e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d131      	bne.n	800464e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d127      	bne.n	800464e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11d      	bne.n	800464e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	d113      	bne.n	800464e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00c      	beq.n	800465e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0202 	orr.w	r2, r2, #2
 800465c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	430a      	orrs	r2, r1
 8004678:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	430a      	orrs	r2, r1
 8004696:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e006      	b.n	80046bc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b2:	f043 0202 	orr.w	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	@ 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80046da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e4:	4013      	ands	r3, r2
 80046e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046fc:	4013      	ands	r3, r2
 80046fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	4013      	ands	r3, r2
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004722:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	4013      	ands	r3, r2
 800472e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004736:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800473a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	4013      	ands	r3, r2
 8004746:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00c      	beq.n	800477e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2240      	movs	r2, #64	@ 0x40
 8004776:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f922 	bl	80049c2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01a      	beq.n	80047c0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d014      	beq.n	80047c0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800479e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80047b8:	6939      	ldr	r1, [r7, #16]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8e2 	bl	8004984 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80047ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f8ac 	bl	800492e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80047e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fa64 	bl	8001cb4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80047fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8a1 	bl	8004944 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0a5b      	lsrs	r3, r3, #9
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004822:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f898 	bl	800495a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	09db      	lsrs	r3, r3, #7
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d019      	beq.n	800486a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	09db      	lsrs	r3, r3, #7
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d013      	beq.n	800486a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800484a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4013      	ands	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f882 	bl	800496e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	0b5b      	lsrs	r3, r3, #13
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	0b5b      	lsrs	r3, r3, #13
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800488a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f884 	bl	800499a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	0bdb      	lsrs	r3, r3, #15
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	0bdb      	lsrs	r3, r3, #15
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80048b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f87a 	bl	80049ae <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0b9b      	lsrs	r3, r3, #14
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	0b9b      	lsrs	r3, r3, #14
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80048da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80048f6:	69f9      	ldr	r1, [r7, #28]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f876 	bl	80049ea <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f858 	bl	80049d6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004926:	bf00      	nop
 8004928:	3730      	adds	r7, #48	@ 0x30
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004a08:	4b27      	ldr	r3, [pc, #156]	@ (8004aa8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004a0a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a1a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	041a      	lsls	r2, r3, #16
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a40:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	061a      	lsls	r2, r3, #24
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e005      	b.n	8004a8e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d3f3      	bcc.n	8004a82 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	4000a400 	.word	0x4000a400

08004aac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	@ 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004aca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e00a      	b.n	8004aee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004ae0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004ae6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004aec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004af8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004afe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004b04:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	440b      	add	r3, r1
 8004b20:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3304      	adds	r3, #4
 8004b38:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e020      	b.n	8004b82 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3303      	adds	r3, #3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3302      	adds	r3, #2
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	440b      	add	r3, r1
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004b58:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	440b      	add	r3, r1
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004b66:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004b70:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	4a06      	ldr	r2, [pc, #24]	@ (8004ba0 <FDCAN_CopyMessageToRAM+0xf4>)
 8004b88:	5cd3      	ldrb	r3, [r2, r3]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d3d6      	bcc.n	8004b40 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	3724      	adds	r7, #36	@ 0x24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	0800de80 	.word	0x0800de80

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bb2:	e15a      	b.n	8004e6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 814c 	beq.w	8004e64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d005      	beq.n	8004be4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d130      	bne.n	8004c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 0201 	and.w	r2, r3, #1
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d017      	beq.n	8004c82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d123      	bne.n	8004cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	08da      	lsrs	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3208      	adds	r2, #8
 8004c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	220f      	movs	r2, #15
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	08da      	lsrs	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3208      	adds	r2, #8
 8004cd0:	6939      	ldr	r1, [r7, #16]
 8004cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0203 	and.w	r2, r3, #3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80a6 	beq.w	8004e64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d18:	4b5b      	ldr	r3, [pc, #364]	@ (8004e88 <HAL_GPIO_Init+0x2e4>)
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004e88 <HAL_GPIO_Init+0x2e4>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d24:	4b58      	ldr	r3, [pc, #352]	@ (8004e88 <HAL_GPIO_Init+0x2e4>)
 8004d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d30:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_GPIO_Init+0x2e8>)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	3302      	adds	r3, #2
 8004d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	220f      	movs	r2, #15
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4013      	ands	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d5a:	d01f      	beq.n	8004d9c <HAL_GPIO_Init+0x1f8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e90 <HAL_GPIO_Init+0x2ec>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d019      	beq.n	8004d98 <HAL_GPIO_Init+0x1f4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a4b      	ldr	r2, [pc, #300]	@ (8004e94 <HAL_GPIO_Init+0x2f0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_GPIO_Init+0x1f0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e98 <HAL_GPIO_Init+0x2f4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00d      	beq.n	8004d90 <HAL_GPIO_Init+0x1ec>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a49      	ldr	r2, [pc, #292]	@ (8004e9c <HAL_GPIO_Init+0x2f8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <HAL_GPIO_Init+0x1e8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a48      	ldr	r2, [pc, #288]	@ (8004ea0 <HAL_GPIO_Init+0x2fc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_GPIO_Init+0x1e4>
 8004d84:	2305      	movs	r3, #5
 8004d86:	e00a      	b.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d88:	2306      	movs	r3, #6
 8004d8a:	e008      	b.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	e006      	b.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d90:	2303      	movs	r3, #3
 8004d92:	e004      	b.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e002      	b.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_GPIO_Init+0x1fa>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	f002 0203 	and.w	r2, r2, #3
 8004da4:	0092      	lsls	r2, r2, #2
 8004da6:	4093      	lsls	r3, r2
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dae:	4937      	ldr	r1, [pc, #220]	@ (8004e8c <HAL_GPIO_Init+0x2e8>)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	3302      	adds	r3, #2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dbc:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004de0:	4a30      	ldr	r2, [pc, #192]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004de6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e0a:	4a26      	ldr	r2, [pc, #152]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e10:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e5e:	4a11      	ldr	r2, [pc, #68]	@ (8004ea4 <HAL_GPIO_Init+0x300>)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3301      	adds	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f ae9d 	bne.w	8004bb4 <HAL_GPIO_Init+0x10>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	48000400 	.word	0x48000400
 8004e94:	48000800 	.word	0x48000800
 8004e98:	48000c00 	.word	0x48000c00
 8004e9c:	48001000 	.word	0x48001000
 8004ea0:	48001400 	.word	0x48001400
 8004ea4:	40010400 	.word	0x40010400

08004ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e001      	b.n	8004eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ee8:	787b      	ldrb	r3, [r7, #1]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ef4:	e002      	b.n	8004efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d141      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f16:	4b4b      	ldr	r3, [pc, #300]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f22:	d131      	bne.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f24:	4b47      	ldr	r3, [pc, #284]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f2a:	4a46      	ldr	r2, [pc, #280]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f34:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f3c:	4a41      	ldr	r2, [pc, #260]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f44:	4b40      	ldr	r3, [pc, #256]	@ (8005048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2232      	movs	r2, #50	@ 0x32
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800504c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	0c9b      	lsrs	r3, r3, #18
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5a:	e002      	b.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f62:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d102      	bne.n	8004f76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f2      	bne.n	8004f5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f76:	4b33      	ldr	r3, [pc, #204]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f82:	d158      	bne.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e057      	b.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f88:	4b2e      	ldr	r3, [pc, #184]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f98:	e04d      	b.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa0:	d141      	bne.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fae:	d131      	bne.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fb0:	4b24      	ldr	r3, [pc, #144]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb6:	4a23      	ldr	r2, [pc, #140]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fc0:	4b20      	ldr	r3, [pc, #128]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2232      	movs	r2, #50	@ 0x32
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	0c9b      	lsrs	r3, r3, #18
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe6:	e002      	b.n	8004fee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fee:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffa:	d102      	bne.n	8005002 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f2      	bne.n	8004fe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005002:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d112      	bne.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e011      	b.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005014:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501a:	4a0a      	ldr	r2, [pc, #40]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005024:	e007      	b.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005026:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800502e:	4a05      	ldr	r2, [pc, #20]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005034:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40007000 	.word	0x40007000
 8005048:	20000028 	.word	0x20000028
 800504c:	431bde83 	.word	0x431bde83

08005050 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a04      	ldr	r2, [pc, #16]	@ (800506c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800505a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800505e:	6093      	str	r3, [r2, #8]
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40007000 	.word	0x40007000

08005070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e2fe      	b.n	8005680 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d075      	beq.n	800517a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508e:	4b97      	ldr	r3, [pc, #604]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005098:	4b94      	ldr	r3, [pc, #592]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d102      	bne.n	80050ae <HAL_RCC_OscConfig+0x3e>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d002      	beq.n	80050b4 <HAL_RCC_OscConfig+0x44>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d10b      	bne.n	80050cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	4b8d      	ldr	r3, [pc, #564]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05b      	beq.n	8005178 <HAL_RCC_OscConfig+0x108>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d157      	bne.n	8005178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e2d9      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x74>
 80050d6:	4b85      	ldr	r3, [pc, #532]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a84      	ldr	r2, [pc, #528]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e01d      	b.n	8005120 <HAL_RCC_OscConfig+0xb0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x98>
 80050ee:	4b7f      	ldr	r3, [pc, #508]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7e      	ldr	r2, [pc, #504]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b7c      	ldr	r3, [pc, #496]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7b      	ldr	r2, [pc, #492]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0xb0>
 8005108:	4b78      	ldr	r3, [pc, #480]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a77      	ldr	r2, [pc, #476]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800510e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	4b75      	ldr	r3, [pc, #468]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a74      	ldr	r2, [pc, #464]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800511a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800511e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d013      	beq.n	8005150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fe fdfe 	bl	8003d28 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fe fdfa 	bl	8003d28 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	@ 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e29e      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	4b6a      	ldr	r3, [pc, #424]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0xc0>
 800514e:	e014      	b.n	800517a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fe fdea 	bl	8003d28 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005158:	f7fe fde6 	bl	8003d28 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	@ 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e28a      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516a:	4b60      	ldr	r3, [pc, #384]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0xe8>
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d075      	beq.n	8005272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005186:	4b59      	ldr	r3, [pc, #356]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005190:	4b56      	ldr	r3, [pc, #344]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d102      	bne.n	80051a6 <HAL_RCC_OscConfig+0x136>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_OscConfig+0x13c>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d11f      	bne.n	80051ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ac:	4b4f      	ldr	r3, [pc, #316]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_OscConfig+0x154>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e25d      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	4b49      	ldr	r3, [pc, #292]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4946      	ldr	r1, [pc, #280]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051d8:	4b45      	ldr	r3, [pc, #276]	@ (80052f0 <HAL_RCC_OscConfig+0x280>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fd57 	bl	8003c90 <HAL_InitTick>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d043      	beq.n	8005270 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e249      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d023      	beq.n	800523c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b3d      	ldr	r3, [pc, #244]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fe fd92 	bl	8003d28 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005208:	f7fe fd8e 	bl	8003d28 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e232      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800521a:	4b34      	ldr	r3, [pc, #208]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005226:	4b31      	ldr	r3, [pc, #196]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	492d      	ldr	r1, [pc, #180]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
 800523a:	e01a      	b.n	8005272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523c:	4b2b      	ldr	r3, [pc, #172]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2a      	ldr	r2, [pc, #168]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fe fd6e 	bl	8003d28 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005250:	f7fe fd6a 	bl	8003d28 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e20e      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005262:	4b22      	ldr	r3, [pc, #136]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x1e0>
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005270:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d041      	beq.n	8005302 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01c      	beq.n	80052c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005286:	4b19      	ldr	r3, [pc, #100]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528c:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fe fd47 	bl	8003d28 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529e:	f7fe fd43 	bl	8003d28 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e1e7      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052b0:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80052b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ef      	beq.n	800529e <HAL_RCC_OscConfig+0x22e>
 80052be:	e020      	b.n	8005302 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c0:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80052c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c6:	4a09      	ldr	r2, [pc, #36]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fe fd2a 	bl	8003d28 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d6:	e00d      	b.n	80052f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d8:	f7fe fd26 	bl	8003d28 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d906      	bls.n	80052f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e1ca      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80052f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ea      	bne.n	80052d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80a6 	beq.w	800545c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005310:	2300      	movs	r3, #0
 8005312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005314:	4b84      	ldr	r3, [pc, #528]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_OscConfig+0x2b4>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x2b6>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00d      	beq.n	8005346 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	4b7f      	ldr	r3, [pc, #508]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532e:	4a7e      	ldr	r2, [pc, #504]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	@ 0x58
 8005336:	4b7c      	ldr	r3, [pc, #496]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005346:	4b79      	ldr	r3, [pc, #484]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d118      	bne.n	8005384 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005352:	4b76      	ldr	r3, [pc, #472]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a75      	ldr	r2, [pc, #468]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800535c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535e:	f7fe fce3 	bl	8003d28 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fe fcdf 	bl	8003d28 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e183      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005378:	4b6c      	ldr	r3, [pc, #432]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d108      	bne.n	800539e <HAL_RCC_OscConfig+0x32e>
 800538c:	4b66      	ldr	r3, [pc, #408]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005392:	4a65      	ldr	r2, [pc, #404]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800539c:	e024      	b.n	80053e8 <HAL_RCC_OscConfig+0x378>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d110      	bne.n	80053c8 <HAL_RCC_OscConfig+0x358>
 80053a6:	4b60      	ldr	r3, [pc, #384]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053c6:	e00f      	b.n	80053e8 <HAL_RCC_OscConfig+0x378>
 80053c8:	4b57      	ldr	r3, [pc, #348]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	4a56      	ldr	r2, [pc, #344]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053d8:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	4a52      	ldr	r2, [pc, #328]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d016      	beq.n	800541e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7fe fc9a 	bl	8003d28 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f6:	e00a      	b.n	800540e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f7fe fc96 	bl	8003d28 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e138      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	4b46      	ldr	r3, [pc, #280]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ed      	beq.n	80053f8 <HAL_RCC_OscConfig+0x388>
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541e:	f7fe fc83 	bl	8003d28 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005424:	e00a      	b.n	800543c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005426:	f7fe fc7f 	bl	8003d28 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e121      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800543c:	4b3a      	ldr	r3, [pc, #232]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ed      	bne.n	8005426 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b35      	ldr	r3, [pc, #212]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	4a34      	ldr	r2, [pc, #208]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d03c      	beq.n	80054e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01c      	beq.n	80054aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005470:	4b2d      	ldr	r3, [pc, #180]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005476:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fe fc52 	bl	8003d28 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005488:	f7fe fc4e 	bl	8003d28 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e0f2      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800549a:	4b23      	ldr	r3, [pc, #140]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ef      	beq.n	8005488 <HAL_RCC_OscConfig+0x418>
 80054a8:	e01b      	b.n	80054e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ba:	f7fe fc35 	bl	8003d28 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c2:	f7fe fc31 	bl	8003d28 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e0d5      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054d4:	4b14      	ldr	r3, [pc, #80]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ef      	bne.n	80054c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80c9 	beq.w	800567e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	f000 8083 	beq.w	8005600 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d15e      	bne.n	80055c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b09      	ldr	r3, [pc, #36]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a08      	ldr	r2, [pc, #32]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800550c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fe fc0b 	bl	8003d28 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005514:	e00c      	b.n	8005530 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005516:	f7fe fc07 	bl	8003d28 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d905      	bls.n	8005530 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e0ab      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005530:	4b55      	ldr	r3, [pc, #340]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ec      	bne.n	8005516 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800553c:	4b52      	ldr	r3, [pc, #328]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	4b52      	ldr	r3, [pc, #328]	@ (800568c <HAL_RCC_OscConfig+0x61c>)
 8005542:	4013      	ands	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6a11      	ldr	r1, [r2, #32]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800554c:	3a01      	subs	r2, #1
 800554e:	0112      	lsls	r2, r2, #4
 8005550:	4311      	orrs	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005556:	0212      	lsls	r2, r2, #8
 8005558:	4311      	orrs	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800555e:	0852      	lsrs	r2, r2, #1
 8005560:	3a01      	subs	r2, #1
 8005562:	0552      	lsls	r2, r2, #21
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800556a:	0852      	lsrs	r2, r2, #1
 800556c:	3a01      	subs	r2, #1
 800556e:	0652      	lsls	r2, r2, #25
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005576:	06d2      	lsls	r2, r2, #27
 8005578:	430a      	orrs	r2, r1
 800557a:	4943      	ldr	r1, [pc, #268]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800557c:	4313      	orrs	r3, r2
 800557e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005580:	4b41      	ldr	r3, [pc, #260]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a40      	ldr	r2, [pc, #256]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800558c:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a3d      	ldr	r2, [pc, #244]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fe fbc6 	bl	8003d28 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fe fbc2 	bl	8003d28 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e066      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	4b35      	ldr	r3, [pc, #212]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x530>
 80055be:	e05e      	b.n	800567e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c0:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a30      	ldr	r2, [pc, #192]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fe fbac 	bl	8003d28 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fe fba8 	bl	8003d28 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e04c      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e6:	4b28      	ldr	r3, [pc, #160]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055f2:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	4924      	ldr	r1, [pc, #144]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <HAL_RCC_OscConfig+0x620>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	60cb      	str	r3, [r1, #12]
 80055fe:	e03e      	b.n	800567e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e039      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800560c:	4b1e      	ldr	r3, [pc, #120]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0203 	and.w	r2, r3, #3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	429a      	cmp	r2, r3
 800561e:	d12c      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	3b01      	subs	r3, #1
 800562c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d123      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11b      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d113      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	3b01      	subs	r3, #1
 8005660:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d109      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	3b01      	subs	r3, #1
 8005674:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000
 800568c:	019f800c 	.word	0x019f800c
 8005690:	feeefffc 	.word	0xfeeefffc

08005694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e11e      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056ac:	4b91      	ldr	r3, [pc, #580]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d910      	bls.n	80056dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b8e      	ldr	r3, [pc, #568]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 020f 	bic.w	r2, r3, #15
 80056c2:	498c      	ldr	r1, [pc, #560]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ca:	4b8a      	ldr	r3, [pc, #552]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e106      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d073      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d129      	bne.n	8005744 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f0:	4b81      	ldr	r3, [pc, #516]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0f4      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005700:	f000 f99e 	bl	8005a40 <RCC_GetSysClockFreqFromPLLSource>
 8005704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4a7c      	ldr	r2, [pc, #496]	@ (80058fc <HAL_RCC_ClockConfig+0x268>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d93f      	bls.n	800578e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800570e:	4b7a      	ldr	r3, [pc, #488]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005722:	2b00      	cmp	r3, #0
 8005724:	d033      	beq.n	800578e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800572a:	2b00      	cmp	r3, #0
 800572c:	d12f      	bne.n	800578e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800572e:	4b72      	ldr	r3, [pc, #456]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005736:	4a70      	ldr	r2, [pc, #448]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	e024      	b.n	800578e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d107      	bne.n	800575c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574c:	4b6a      	ldr	r3, [pc, #424]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0c6      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575c:	4b66      	ldr	r3, [pc, #408]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0be      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800576c:	f000 f8ce 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8005770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4a61      	ldr	r2, [pc, #388]	@ (80058fc <HAL_RCC_ClockConfig+0x268>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d909      	bls.n	800578e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800577a:	4b5f      	ldr	r3, [pc, #380]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005782:	4a5d      	ldr	r2, [pc, #372]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800578e:	4b5a      	ldr	r3, [pc, #360]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4957      	ldr	r1, [pc, #348]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a0:	f7fe fac2 	bl	8003d28 <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	e00a      	b.n	80057be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a8:	f7fe fabe 	bl	8003d28 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e095      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057be:	4b4e      	ldr	r3, [pc, #312]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 020c 	and.w	r2, r3, #12
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1eb      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d023      	beq.n	8005824 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057e8:	4b43      	ldr	r3, [pc, #268]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4a42      	ldr	r2, [pc, #264]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80057ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005800:	4b3d      	ldr	r3, [pc, #244]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005808:	4a3b      	ldr	r2, [pc, #236]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800580a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800580e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005810:	4b39      	ldr	r3, [pc, #228]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4936      	ldr	r1, [pc, #216]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
 8005822:	e008      	b.n	8005836 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d105      	bne.n	8005836 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800582a:	4b33      	ldr	r3, [pc, #204]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	4a32      	ldr	r2, [pc, #200]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005830:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005834:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d21d      	bcs.n	8005880 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005844:	4b2b      	ldr	r3, [pc, #172]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f023 020f 	bic.w	r2, r3, #15
 800584c:	4929      	ldr	r1, [pc, #164]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005854:	f7fe fa68 	bl	8003d28 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	e00a      	b.n	8005872 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585c:	f7fe fa64 	bl	8003d28 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e03b      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d1ed      	bne.n	800585c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4917      	ldr	r1, [pc, #92]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058aa:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	490f      	ldr	r1, [pc, #60]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058be:	f000 f825 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490c      	ldr	r1, [pc, #48]	@ (8005900 <HAL_RCC_ClockConfig+0x26c>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	4a0a      	ldr	r2, [pc, #40]	@ (8005904 <HAL_RCC_ClockConfig+0x270>)
 80058dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058de:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <HAL_RCC_ClockConfig+0x274>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe f9d4 	bl	8003c90 <HAL_InitTick>
 80058e8:	4603      	mov	r3, r0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40022000 	.word	0x40022000
 80058f8:	40021000 	.word	0x40021000
 80058fc:	04c4b400 	.word	0x04c4b400
 8005900:	0800de68 	.word	0x0800de68
 8005904:	20000028 	.word	0x20000028
 8005908:	2000002c 	.word	0x2000002c

0800590c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005912:	4b2c      	ldr	r3, [pc, #176]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b04      	cmp	r3, #4
 800591c:	d102      	bne.n	8005924 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800591e:	4b2a      	ldr	r3, [pc, #168]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e047      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005924:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d102      	bne.n	8005936 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e03e      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005936:	4b23      	ldr	r3, [pc, #140]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d136      	bne.n	80059b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005942:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	3301      	adds	r3, #1
 8005958:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d10c      	bne.n	800597a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005960:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800596a:	68d2      	ldr	r2, [r2, #12]
 800596c:	0a12      	lsrs	r2, r2, #8
 800596e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	617b      	str	r3, [r7, #20]
      break;
 8005978:	e00c      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800597a:	4a13      	ldr	r2, [pc, #76]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	4a10      	ldr	r2, [pc, #64]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005984:	68d2      	ldr	r2, [r2, #12]
 8005986:	0a12      	lsrs	r2, r2, #8
 8005988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
      break;
 8005992:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005994:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	0e5b      	lsrs	r3, r3, #25
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	3301      	adds	r3, #1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e001      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059b4:	693b      	ldr	r3, [r7, #16]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000
 80059c8:	00f42400 	.word	0x00f42400
 80059cc:	007a1200 	.word	0x007a1200

080059d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d4:	4b03      	ldr	r3, [pc, #12]	@ (80059e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000028 	.word	0x20000028

080059e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059ec:	f7ff fff0 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	0800de78 	.word	0x0800de78

08005a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a18:	f7ff ffda 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0adb      	lsrs	r3, r3, #11
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4904      	ldr	r1, [pc, #16]	@ (8005a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	0800de78 	.word	0x0800de78

08005a40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a46:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d10c      	bne.n	8005a7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a64:	4a17      	ldr	r2, [pc, #92]	@ (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	4a14      	ldr	r2, [pc, #80]	@ (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a6e:	68d2      	ldr	r2, [r2, #12]
 8005a70:	0a12      	lsrs	r2, r2, #8
 8005a72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	617b      	str	r3, [r7, #20]
    break;
 8005a7c:	e00c      	b.n	8005a98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a7e:	4a12      	ldr	r2, [pc, #72]	@ (8005ac8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a88:	68d2      	ldr	r2, [r2, #12]
 8005a8a:	0a12      	lsrs	r2, r2, #8
 8005a8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a90:	fb02 f303 	mul.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
    break;
 8005a96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	0e5b      	lsrs	r3, r3, #25
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ab2:	687b      	ldr	r3, [r7, #4]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	007a1200 	.word	0x007a1200
 8005ac8:	00f42400 	.word	0x00f42400

08005acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad8:	2300      	movs	r3, #0
 8005ada:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8098 	beq.w	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aea:	2300      	movs	r3, #0
 8005aec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aee:	4b43      	ldr	r3, [pc, #268]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005afa:	4b40      	ldr	r3, [pc, #256]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b06:	4b3d      	ldr	r3, [pc, #244]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b12:	2301      	movs	r3, #1
 8005b14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b16:	4b3a      	ldr	r3, [pc, #232]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a39      	ldr	r2, [pc, #228]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b22:	f7fe f901 	bl	8003d28 <HAL_GetTick>
 8005b26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b28:	e009      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2a:	f7fe f8fd 	bl	8003d28 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d902      	bls.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	74fb      	strb	r3, [r7, #19]
        break;
 8005b3c:	e005      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3e:	4b30      	ldr	r3, [pc, #192]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ef      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d159      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b50:	4b2a      	ldr	r3, [pc, #168]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01e      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d019      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b6c:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b78:	4b20      	ldr	r3, [pc, #128]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b88:	4b1c      	ldr	r3, [pc, #112]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b98:	4a18      	ldr	r2, [pc, #96]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fe f8bd 	bl	8003d28 <HAL_GetTick>
 8005bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb0:	e00b      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fe f8b9 	bl	8003d28 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d902      	bls.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8005bc8:	e006      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bca:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0ec      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bde:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	4903      	ldr	r1, [pc, #12]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bf4:	e008      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
 8005bf8:	74bb      	strb	r3, [r7, #18]
 8005bfa:	e005      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c08:	7c7b      	ldrb	r3, [r7, #17]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d105      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4ba6      	ldr	r3, [pc, #664]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	4aa5      	ldr	r2, [pc, #660]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c26:	4ba0      	ldr	r3, [pc, #640]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2c:	f023 0203 	bic.w	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	499c      	ldr	r1, [pc, #624]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c48:	4b97      	ldr	r3, [pc, #604]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f023 020c 	bic.w	r2, r3, #12
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	4994      	ldr	r1, [pc, #592]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	498b      	ldr	r1, [pc, #556]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c8c:	4b86      	ldr	r3, [pc, #536]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4983      	ldr	r1, [pc, #524]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cae:	4b7e      	ldr	r3, [pc, #504]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	497a      	ldr	r1, [pc, #488]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cd0:	4b75      	ldr	r3, [pc, #468]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	4972      	ldr	r1, [pc, #456]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	4969      	ldr	r1, [pc, #420]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d14:	4b64      	ldr	r3, [pc, #400]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	4961      	ldr	r1, [pc, #388]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d36:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	4958      	ldr	r1, [pc, #352]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d58:	4b53      	ldr	r3, [pc, #332]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	4950      	ldr	r1, [pc, #320]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d76:	d105      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d78:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d015      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d90:	4b45      	ldr	r3, [pc, #276]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	4942      	ldr	r1, [pc, #264]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dae:	d105      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d015      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dc8:	4b37      	ldr	r3, [pc, #220]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	4934      	ldr	r1, [pc, #208]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005de6:	d105      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005df2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d015      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e00:	4b29      	ldr	r3, [pc, #164]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0e:	4926      	ldr	r1, [pc, #152]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e20:	4b21      	ldr	r3, [pc, #132]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4a20      	ldr	r2, [pc, #128]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	4918      	ldr	r1, [pc, #96]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e56:	d105      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e58:	4b13      	ldr	r3, [pc, #76]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4a12      	ldr	r2, [pc, #72]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e70:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7e:	490a      	ldr	r1, [pc, #40]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e90:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a04      	ldr	r2, [pc, #16]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000

08005eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e049      	b.n	8005f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fd fd00 	bl	80038d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 febc 	bl	8006c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d001      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e04a      	b.n	800600a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a21      	ldr	r2, [pc, #132]	@ (8006018 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d013      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800601c <HAL_TIM_Base_Start_IT+0xc0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1c      	ldr	r2, [pc, #112]	@ (8006020 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a19      	ldr	r2, [pc, #100]	@ (8006028 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d115      	bne.n	8005ff4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	4b17      	ldr	r3, [pc, #92]	@ (800602c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b06      	cmp	r3, #6
 8005fd8:	d015      	beq.n	8006006 <HAL_TIM_Base_Start_IT+0xaa>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe0:	d011      	beq.n	8006006 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff2:	e008      	b.n	8006006 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e000      	b.n	8006008 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40012c00 	.word	0x40012c00
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40013400 	.word	0x40013400
 8006028:	40014000 	.word	0x40014000
 800602c:	00010007 	.word	0x00010007

08006030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e049      	b.n	80060d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f841 	bl	80060de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f000 fdfa 	bl	8006c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <HAL_TIM_PWM_Start+0x24>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e03c      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d109      	bne.n	8006132 <HAL_TIM_PWM_Start+0x3e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e02f      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d109      	bne.n	800614c <HAL_TIM_PWM_Start+0x58>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf14      	ite	ne
 8006144:	2301      	movne	r3, #1
 8006146:	2300      	moveq	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e022      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b0c      	cmp	r3, #12
 8006150:	d109      	bne.n	8006166 <HAL_TIM_PWM_Start+0x72>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	e015      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d109      	bne.n	8006180 <HAL_TIM_PWM_Start+0x8c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e008      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e097      	b.n	80062ca <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <HAL_TIM_PWM_Start+0xb6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a8:	e023      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_PWM_Start+0xc6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b8:	e01b      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Start+0xd6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c8:	e013      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Start+0xe6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061d8:	e00b      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0xf6>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061e8:	e003      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f962 	bl	80074c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a33      	ldr	r2, [pc, #204]	@ (80062d4 <HAL_TIM_PWM_Start+0x1e0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIM_PWM_Start+0x13e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a32      	ldr	r2, [pc, #200]	@ (80062d8 <HAL_TIM_PWM_Start+0x1e4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIM_PWM_Start+0x13e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <HAL_TIM_PWM_Start+0x1e8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIM_PWM_Start+0x13e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2f      	ldr	r2, [pc, #188]	@ (80062e0 <HAL_TIM_PWM_Start+0x1ec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIM_PWM_Start+0x13e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <HAL_TIM_PWM_Start+0x1f0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <HAL_TIM_PWM_Start+0x142>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <HAL_TIM_PWM_Start+0x144>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800624a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a20      	ldr	r2, [pc, #128]	@ (80062d4 <HAL_TIM_PWM_Start+0x1e0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d018      	beq.n	8006288 <HAL_TIM_PWM_Start+0x194>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800625e:	d013      	beq.n	8006288 <HAL_TIM_PWM_Start+0x194>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a20      	ldr	r2, [pc, #128]	@ (80062e8 <HAL_TIM_PWM_Start+0x1f4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00e      	beq.n	8006288 <HAL_TIM_PWM_Start+0x194>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <HAL_TIM_PWM_Start+0x1f8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d009      	beq.n	8006288 <HAL_TIM_PWM_Start+0x194>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a17      	ldr	r2, [pc, #92]	@ (80062d8 <HAL_TIM_PWM_Start+0x1e4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIM_PWM_Start+0x194>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a16      	ldr	r2, [pc, #88]	@ (80062dc <HAL_TIM_PWM_Start+0x1e8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d115      	bne.n	80062b4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	4b18      	ldr	r3, [pc, #96]	@ (80062f0 <HAL_TIM_PWM_Start+0x1fc>)
 8006290:	4013      	ands	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b06      	cmp	r3, #6
 8006298:	d015      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x1d2>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a0:	d011      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b2:	e008      	b.n	80062c6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e000      	b.n	80062c8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	00010007 	.word	0x00010007

080062f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e097      	b.n	8006438 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d106      	bne.n	8006322 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7fd fa69 	bl	80037f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f000 fc8d 	bl	8006c68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	4313      	orrs	r3, r2
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006394:	f023 030c 	bic.w	r3, r3, #12
 8006398:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	4313      	orrs	r3, r2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	031b      	lsls	r3, r3, #12
 80063c4:	4313      	orrs	r3, r2
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	4313      	orrs	r3, r2
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006450:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006458:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006460:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006468:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d110      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006476:	7b7b      	ldrb	r3, [r7, #13]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d001      	beq.n	8006480 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e069      	b.n	8006554 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006490:	e031      	b.n	80064f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d110      	bne.n	80064ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d102      	bne.n	80064a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800649e:	7b3b      	ldrb	r3, [r7, #12]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e055      	b.n	8006554 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b8:	e01d      	b.n	80064f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d108      	bne.n	80064d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d105      	bne.n	80064d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c6:	7b7b      	ldrb	r3, [r7, #13]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d102      	bne.n	80064d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064cc:	7b3b      	ldrb	r3, [r7, #12]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d001      	beq.n	80064d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e03e      	b.n	8006554 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_TIM_Encoder_Start+0xc4>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d008      	beq.n	8006514 <HAL_TIM_Encoder_Start+0xd4>
 8006502:	e00f      	b.n	8006524 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2201      	movs	r2, #1
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f000 ffd9 	bl	80074c4 <TIM_CCxChannelCmd>
      break;
 8006512:	e016      	b.n	8006542 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	2104      	movs	r1, #4
 800651c:	4618      	mov	r0, r3
 800651e:	f000 ffd1 	bl	80074c4 <TIM_CCxChannelCmd>
      break;
 8006522:	e00e      	b.n	8006542 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2201      	movs	r2, #1
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f000 ffc9 	bl	80074c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2201      	movs	r2, #1
 8006538:	2104      	movs	r1, #4
 800653a:	4618      	mov	r0, r3
 800653c:	f000 ffc2 	bl	80074c4 <TIM_CCxChannelCmd>
      break;
 8006540:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d020      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01b      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0202 	mvn.w	r2, #2
 8006590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb40 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fb32 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fb43 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d020      	beq.n	800660c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0204 	mvn.w	r2, #4
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fb1a 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fb0c 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fb1d 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d020      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0208 	mvn.w	r2, #8
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 faf4 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fae6 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 faf7 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01b      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2208      	movs	r2, #8
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 face 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006690:	e005      	b.n	800669e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fac0 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fad1 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0201 	mvn.w	r2, #1
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fb fb82 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 f825 	bl	8007740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f81d 	bl	8007754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00c      	beq.n	800673e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa8b 	bl	8006c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0220 	mvn.w	r2, #32
 800675a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 ffe5 	bl	800772c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00c      	beq.n	8006786 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800677e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fff1 	bl	8007768 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00c      	beq.n	80067aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80067a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 ffe9 	bl	800777c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00c      	beq.n	80067ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80067c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 ffe1 	bl	8007790 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00c      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80067ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 ffd9 	bl	80077a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006816:	2302      	movs	r3, #2
 8006818:	e0ff      	b.n	8006a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b14      	cmp	r3, #20
 8006826:	f200 80f0 	bhi.w	8006a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006885 	.word	0x08006885
 8006834:	08006a0b 	.word	0x08006a0b
 8006838:	08006a0b 	.word	0x08006a0b
 800683c:	08006a0b 	.word	0x08006a0b
 8006840:	080068c5 	.word	0x080068c5
 8006844:	08006a0b 	.word	0x08006a0b
 8006848:	08006a0b 	.word	0x08006a0b
 800684c:	08006a0b 	.word	0x08006a0b
 8006850:	08006907 	.word	0x08006907
 8006854:	08006a0b 	.word	0x08006a0b
 8006858:	08006a0b 	.word	0x08006a0b
 800685c:	08006a0b 	.word	0x08006a0b
 8006860:	08006947 	.word	0x08006947
 8006864:	08006a0b 	.word	0x08006a0b
 8006868:	08006a0b 	.word	0x08006a0b
 800686c:	08006a0b 	.word	0x08006a0b
 8006870:	08006989 	.word	0x08006989
 8006874:	08006a0b 	.word	0x08006a0b
 8006878:	08006a0b 	.word	0x08006a0b
 800687c:	08006a0b 	.word	0x08006a0b
 8006880:	080069c9 	.word	0x080069c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fa88 	bl	8006da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0204 	bic.w	r2, r2, #4
 80068ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6999      	ldr	r1, [r3, #24]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	619a      	str	r2, [r3, #24]
      break;
 80068c2:	e0a5      	b.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 faf8 	bl	8006ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6999      	ldr	r1, [r3, #24]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	021a      	lsls	r2, r3, #8
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	619a      	str	r2, [r3, #24]
      break;
 8006904:	e084      	b.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fb61 	bl	8006fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0208 	orr.w	r2, r2, #8
 8006920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0204 	bic.w	r2, r2, #4
 8006930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	61da      	str	r2, [r3, #28]
      break;
 8006944:	e064      	b.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fbc9 	bl	80070e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69d9      	ldr	r1, [r3, #28]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	021a      	lsls	r2, r3, #8
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	61da      	str	r2, [r3, #28]
      break;
 8006986:	e043      	b.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fc32 	bl	80071f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0208 	orr.w	r2, r2, #8
 80069a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0204 	bic.w	r2, r2, #4
 80069b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80069c6:	e023      	b.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fc76 	bl	80072c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006a08:	e002      	b.n	8006a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop

08006a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0de      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x1da>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006a5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a63      	ldr	r2, [pc, #396]	@ (8006c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	f000 80a9 	beq.w	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a80:	4a61      	ldr	r2, [pc, #388]	@ (8006c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	f200 80ae 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a88:	4a60      	ldr	r2, [pc, #384]	@ (8006c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f000 80a1 	beq.w	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a90:	4a5e      	ldr	r2, [pc, #376]	@ (8006c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	f200 80a6 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a98:	4a5d      	ldr	r2, [pc, #372]	@ (8006c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	f000 8099 	beq.w	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006aa0:	4a5b      	ldr	r2, [pc, #364]	@ (8006c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	f200 809e 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8006c14 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f000 8091 	beq.w	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ab0:	4a58      	ldr	r2, [pc, #352]	@ (8006c14 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f200 8096 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ab8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006abc:	f000 8089 	beq.w	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ac0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ac4:	f200 808e 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	d03e      	beq.n	8006b4c <HAL_TIM_ConfigClockSource+0x128>
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	f200 8087 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ada:	f000 8086 	beq.w	8006bea <HAL_TIM_ConfigClockSource+0x1c6>
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae2:	d87f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ae4:	2b70      	cmp	r3, #112	@ 0x70
 8006ae6:	d01a      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ae8:	2b70      	cmp	r3, #112	@ 0x70
 8006aea:	d87b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aec:	2b60      	cmp	r3, #96	@ 0x60
 8006aee:	d050      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x16e>
 8006af0:	2b60      	cmp	r3, #96	@ 0x60
 8006af2:	d877      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006af4:	2b50      	cmp	r3, #80	@ 0x50
 8006af6:	d03c      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x14e>
 8006af8:	2b50      	cmp	r3, #80	@ 0x50
 8006afa:	d873      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006afc:	2b40      	cmp	r3, #64	@ 0x40
 8006afe:	d058      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x18e>
 8006b00:	2b40      	cmp	r3, #64	@ 0x40
 8006b02:	d86f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b04:	2b30      	cmp	r3, #48	@ 0x30
 8006b06:	d064      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b08:	2b30      	cmp	r3, #48	@ 0x30
 8006b0a:	d86b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d060      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d867      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05c      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d05a      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b1c:	e062      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	f000 fca9 	bl	8007484 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	609a      	str	r2, [r3, #8]
      break;
 8006b4a:	e04f      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	f000 fc92 	bl	8007484 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b6e:	609a      	str	r2, [r3, #8]
      break;
 8006b70:	e03c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 fc04 	bl	800738c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2150      	movs	r1, #80	@ 0x50
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fc5d 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006b90:	e02c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 fc23 	bl	80073ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2160      	movs	r1, #96	@ 0x60
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fc4d 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006bb0:	e01c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f000 fbe4 	bl	800738c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	@ 0x40
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fc3d 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006bd0:	e00c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f000 fc34 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006be2:	e003      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e000      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	00100070 	.word	0x00100070
 8006c0c:	00100040 	.word	0x00100040
 8006c10:	00100030 	.word	0x00100030
 8006c14:	00100020 	.word	0x00100020

08006c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a42      	ldr	r2, [pc, #264]	@ (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00f      	beq.n	8006ca0 <TIM_Base_SetConfig+0x38>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c86:	d00b      	beq.n	8006ca0 <TIM_Base_SetConfig+0x38>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006d88 <TIM_Base_SetConfig+0x120>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d007      	beq.n	8006ca0 <TIM_Base_SetConfig+0x38>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3e      	ldr	r2, [pc, #248]	@ (8006d8c <TIM_Base_SetConfig+0x124>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_Base_SetConfig+0x38>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8006d90 <TIM_Base_SetConfig+0x128>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d108      	bne.n	8006cb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a33      	ldr	r2, [pc, #204]	@ (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01b      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d017      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a30      	ldr	r2, [pc, #192]	@ (8006d88 <TIM_Base_SetConfig+0x120>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8006d8c <TIM_Base_SetConfig+0x124>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00f      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d90 <TIM_Base_SetConfig+0x128>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00b      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <TIM_Base_SetConfig+0x12c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d007      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <TIM_Base_SetConfig+0x130>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_Base_SetConfig+0x8a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2b      	ldr	r2, [pc, #172]	@ (8006d9c <TIM_Base_SetConfig+0x134>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d108      	bne.n	8006d04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a16      	ldr	r2, [pc, #88]	@ (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00f      	beq.n	8006d50 <TIM_Base_SetConfig+0xe8>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a17      	ldr	r2, [pc, #92]	@ (8006d90 <TIM_Base_SetConfig+0x128>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00b      	beq.n	8006d50 <TIM_Base_SetConfig+0xe8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a16      	ldr	r2, [pc, #88]	@ (8006d94 <TIM_Base_SetConfig+0x12c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d007      	beq.n	8006d50 <TIM_Base_SetConfig+0xe8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a15      	ldr	r2, [pc, #84]	@ (8006d98 <TIM_Base_SetConfig+0x130>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_Base_SetConfig+0xe8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a14      	ldr	r2, [pc, #80]	@ (8006d9c <TIM_Base_SetConfig+0x134>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d103      	bne.n	8006d58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d105      	bne.n	8006d76 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f023 0201 	bic.w	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	611a      	str	r2, [r3, #16]
  }
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40012c00 	.word	0x40012c00
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40013400 	.word	0x40013400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800

08006da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f023 0201 	bic.w	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0303 	bic.w	r3, r3, #3
 8006dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 0302 	bic.w	r3, r3, #2
 8006dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8006eac <TIM_OC1_SetConfig+0x10c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00f      	beq.n	8006e20 <TIM_OC1_SetConfig+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb0 <TIM_OC1_SetConfig+0x110>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <TIM_OC1_SetConfig+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb4 <TIM_OC1_SetConfig+0x114>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_OC1_SetConfig+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a29      	ldr	r2, [pc, #164]	@ (8006eb8 <TIM_OC1_SetConfig+0x118>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC1_SetConfig+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a28      	ldr	r2, [pc, #160]	@ (8006ebc <TIM_OC1_SetConfig+0x11c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10c      	bne.n	8006e3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f023 0308 	bic.w	r3, r3, #8
 8006e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f023 0304 	bic.w	r3, r3, #4
 8006e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eac <TIM_OC1_SetConfig+0x10c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00f      	beq.n	8006e62 <TIM_OC1_SetConfig+0xc2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb0 <TIM_OC1_SetConfig+0x110>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00b      	beq.n	8006e62 <TIM_OC1_SetConfig+0xc2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <TIM_OC1_SetConfig+0x114>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <TIM_OC1_SetConfig+0xc2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a18      	ldr	r2, [pc, #96]	@ (8006eb8 <TIM_OC1_SetConfig+0x118>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_OC1_SetConfig+0xc2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a17      	ldr	r2, [pc, #92]	@ (8006ebc <TIM_OC1_SetConfig+0x11c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d111      	bne.n	8006e86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	621a      	str	r2, [r3, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40013400 	.word	0x40013400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800

08006ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f023 0210 	bic.w	r2, r3, #16
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 0320 	bic.w	r3, r3, #32
 8006f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a28      	ldr	r2, [pc, #160]	@ (8006fc0 <TIM_OC2_SetConfig+0x100>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC2_SetConfig+0x6c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a27      	ldr	r2, [pc, #156]	@ (8006fc4 <TIM_OC2_SetConfig+0x104>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d10d      	bne.n	8006f48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <TIM_OC2_SetConfig+0x100>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC2_SetConfig+0xb0>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc4 <TIM_OC2_SetConfig+0x104>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC2_SetConfig+0xb0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc8 <TIM_OC2_SetConfig+0x108>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC2_SetConfig+0xb0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a1a      	ldr	r2, [pc, #104]	@ (8006fcc <TIM_OC2_SetConfig+0x10c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC2_SetConfig+0xb0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a19      	ldr	r2, [pc, #100]	@ (8006fd0 <TIM_OC2_SetConfig+0x110>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d113      	bne.n	8006f98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40013400 	.word	0x40013400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800

08006fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a27      	ldr	r2, [pc, #156]	@ (80070d0 <TIM_OC3_SetConfig+0xfc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <TIM_OC3_SetConfig+0x6a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a26      	ldr	r2, [pc, #152]	@ (80070d4 <TIM_OC3_SetConfig+0x100>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10d      	bne.n	800705a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <TIM_OC3_SetConfig+0xfc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_OC3_SetConfig+0xae>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <TIM_OC3_SetConfig+0x100>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_OC3_SetConfig+0xae>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1a      	ldr	r2, [pc, #104]	@ (80070d8 <TIM_OC3_SetConfig+0x104>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_OC3_SetConfig+0xae>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <TIM_OC3_SetConfig+0x108>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_OC3_SetConfig+0xae>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a18      	ldr	r2, [pc, #96]	@ (80070e0 <TIM_OC3_SetConfig+0x10c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d113      	bne.n	80070aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	621a      	str	r2, [r3, #32]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40013400 	.word	0x40013400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40014400 	.word	0x40014400
 80070e0:	40014800 	.word	0x40014800

080070e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800711e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	031b      	lsls	r3, r3, #12
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a28      	ldr	r2, [pc, #160]	@ (80071e4 <TIM_OC4_SetConfig+0x100>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC4_SetConfig+0x6c>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a27      	ldr	r2, [pc, #156]	@ (80071e8 <TIM_OC4_SetConfig+0x104>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10d      	bne.n	800716c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800716a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a1d      	ldr	r2, [pc, #116]	@ (80071e4 <TIM_OC4_SetConfig+0x100>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00f      	beq.n	8007194 <TIM_OC4_SetConfig+0xb0>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a1c      	ldr	r2, [pc, #112]	@ (80071e8 <TIM_OC4_SetConfig+0x104>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00b      	beq.n	8007194 <TIM_OC4_SetConfig+0xb0>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a1b      	ldr	r2, [pc, #108]	@ (80071ec <TIM_OC4_SetConfig+0x108>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_OC4_SetConfig+0xb0>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1a      	ldr	r2, [pc, #104]	@ (80071f0 <TIM_OC4_SetConfig+0x10c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC4_SetConfig+0xb0>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a19      	ldr	r2, [pc, #100]	@ (80071f4 <TIM_OC4_SetConfig+0x110>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d113      	bne.n	80071bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800719a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	019b      	lsls	r3, r3, #6
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	019b      	lsls	r3, r3, #6
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	621a      	str	r2, [r3, #32]
}
 80071d6:	bf00      	nop
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800723c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a17      	ldr	r2, [pc, #92]	@ (80072ac <TIM_OC5_SetConfig+0xb4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00f      	beq.n	8007272 <TIM_OC5_SetConfig+0x7a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a16      	ldr	r2, [pc, #88]	@ (80072b0 <TIM_OC5_SetConfig+0xb8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00b      	beq.n	8007272 <TIM_OC5_SetConfig+0x7a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a15      	ldr	r2, [pc, #84]	@ (80072b4 <TIM_OC5_SetConfig+0xbc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_OC5_SetConfig+0x7a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a14      	ldr	r2, [pc, #80]	@ (80072b8 <TIM_OC5_SetConfig+0xc0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC5_SetConfig+0x7a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a13      	ldr	r2, [pc, #76]	@ (80072bc <TIM_OC5_SetConfig+0xc4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d109      	bne.n	8007286 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	621a      	str	r2, [r3, #32]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	051b      	lsls	r3, r3, #20
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a18      	ldr	r2, [pc, #96]	@ (8007378 <TIM_OC6_SetConfig+0xb8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00f      	beq.n	800733c <TIM_OC6_SetConfig+0x7c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a17      	ldr	r2, [pc, #92]	@ (800737c <TIM_OC6_SetConfig+0xbc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00b      	beq.n	800733c <TIM_OC6_SetConfig+0x7c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a16      	ldr	r2, [pc, #88]	@ (8007380 <TIM_OC6_SetConfig+0xc0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_OC6_SetConfig+0x7c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <TIM_OC6_SetConfig+0xc4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_OC6_SetConfig+0x7c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a14      	ldr	r2, [pc, #80]	@ (8007388 <TIM_OC6_SetConfig+0xc8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d109      	bne.n	8007350 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	621a      	str	r2, [r3, #32]
}
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800

0800738c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f023 030a 	bic.w	r3, r3, #10
 80073c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	f023 0210 	bic.w	r2, r3, #16
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	031b      	lsls	r3, r3, #12
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007426:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	f043 0307 	orr.w	r3, r3, #7
 8007470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800749e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	021a      	lsls	r2, r3, #8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	609a      	str	r2, [r3, #8]
}
 80074b8:	bf00      	nop
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	2201      	movs	r2, #1
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	401a      	ands	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1a      	ldr	r2, [r3, #32]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	fa01 f303 	lsl.w	r3, r1, r3
 80074fc:	431a      	orrs	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	621a      	str	r2, [r3, #32]
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
	...

08007510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007524:	2302      	movs	r3, #2
 8007526:	e065      	b.n	80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a2c      	ldr	r2, [pc, #176]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d004      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a2b      	ldr	r2, [pc, #172]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d108      	bne.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007578:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d018      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759e:	d013      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a18      	ldr	r2, [pc, #96]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00e      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a17      	ldr	r2, [pc, #92]	@ (800760c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d009      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a12      	ldr	r2, [pc, #72]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a13      	ldr	r2, [pc, #76]	@ (8007610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d10c      	bne.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40014000 	.word	0x40014000

08007614 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800762c:	2302      	movs	r3, #2
 800762e:	e073      	b.n	8007718 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a19      	ldr	r2, [pc, #100]	@ (8007724 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	@ (8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d11c      	bne.n	8007706 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d6:	051b      	lsls	r3, r3, #20
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40013400 	.word	0x40013400

0800772c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e042      	b.n	8007850 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fc f9bd 	bl	8003b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2224      	movs	r2, #36	@ 0x24
 80077e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0201 	bic.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 faf4 	bl	8007df0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f825 	bl	8007858 <UART_SetConfig>
 800780e:	4603      	mov	r3, r0
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e01b      	b.n	8007850 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fb73 	bl	8007f34 <UART_CheckIdleState>
 800784e:	4603      	mov	r3, r0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800785c:	b08c      	sub	sp, #48	@ 0x30
 800785e:	af00      	add	r7, sp, #0
 8007860:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	431a      	orrs	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	431a      	orrs	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	4313      	orrs	r3, r2
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4bab      	ldr	r3, [pc, #684]	@ (8007b34 <UART_SetConfig+0x2dc>)
 8007888:	4013      	ands	r3, r2
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007890:	430b      	orrs	r3, r1
 8007892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4aa0      	ldr	r2, [pc, #640]	@ (8007b38 <UART_SetConfig+0x2e0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078c0:	4313      	orrs	r3, r2
 80078c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80078ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078d8:	430b      	orrs	r3, r1
 80078da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	f023 010f 	bic.w	r1, r3, #15
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a91      	ldr	r2, [pc, #580]	@ (8007b3c <UART_SetConfig+0x2e4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d125      	bne.n	8007948 <UART_SetConfig+0xf0>
 80078fc:	4b90      	ldr	r3, [pc, #576]	@ (8007b40 <UART_SetConfig+0x2e8>)
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b03      	cmp	r3, #3
 8007908:	d81a      	bhi.n	8007940 <UART_SetConfig+0xe8>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0xb8>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007921 	.word	0x08007921
 8007914:	08007931 	.word	0x08007931
 8007918:	08007929 	.word	0x08007929
 800791c:	08007939 	.word	0x08007939
 8007920:	2301      	movs	r3, #1
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007926:	e0d6      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e0d2      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e0ce      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e0ca      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e0c6      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a7d      	ldr	r2, [pc, #500]	@ (8007b44 <UART_SetConfig+0x2ec>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d138      	bne.n	80079c4 <UART_SetConfig+0x16c>
 8007952:	4b7b      	ldr	r3, [pc, #492]	@ (8007b40 <UART_SetConfig+0x2e8>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007958:	f003 030c 	and.w	r3, r3, #12
 800795c:	2b0c      	cmp	r3, #12
 800795e:	d82d      	bhi.n	80079bc <UART_SetConfig+0x164>
 8007960:	a201      	add	r2, pc, #4	@ (adr r2, 8007968 <UART_SetConfig+0x110>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	0800799d 	.word	0x0800799d
 800796c:	080079bd 	.word	0x080079bd
 8007970:	080079bd 	.word	0x080079bd
 8007974:	080079bd 	.word	0x080079bd
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079bd 	.word	0x080079bd
 8007984:	080079bd 	.word	0x080079bd
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079bd 	.word	0x080079bd
 8007990:	080079bd 	.word	0x080079bd
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079b5 	.word	0x080079b5
 800799c:	2300      	movs	r3, #0
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a2:	e098      	b.n	8007ad6 <UART_SetConfig+0x27e>
 80079a4:	2302      	movs	r3, #2
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079aa:	e094      	b.n	8007ad6 <UART_SetConfig+0x27e>
 80079ac:	2304      	movs	r3, #4
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b2:	e090      	b.n	8007ad6 <UART_SetConfig+0x27e>
 80079b4:	2308      	movs	r3, #8
 80079b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ba:	e08c      	b.n	8007ad6 <UART_SetConfig+0x27e>
 80079bc:	2310      	movs	r3, #16
 80079be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c2:	e088      	b.n	8007ad6 <UART_SetConfig+0x27e>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a5f      	ldr	r2, [pc, #380]	@ (8007b48 <UART_SetConfig+0x2f0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d125      	bne.n	8007a1a <UART_SetConfig+0x1c2>
 80079ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007b40 <UART_SetConfig+0x2e8>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079d8:	2b30      	cmp	r3, #48	@ 0x30
 80079da:	d016      	beq.n	8007a0a <UART_SetConfig+0x1b2>
 80079dc:	2b30      	cmp	r3, #48	@ 0x30
 80079de:	d818      	bhi.n	8007a12 <UART_SetConfig+0x1ba>
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d00a      	beq.n	80079fa <UART_SetConfig+0x1a2>
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d814      	bhi.n	8007a12 <UART_SetConfig+0x1ba>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <UART_SetConfig+0x19a>
 80079ec:	2b10      	cmp	r3, #16
 80079ee:	d008      	beq.n	8007a02 <UART_SetConfig+0x1aa>
 80079f0:	e00f      	b.n	8007a12 <UART_SetConfig+0x1ba>
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079f8:	e06d      	b.n	8007ad6 <UART_SetConfig+0x27e>
 80079fa:	2302      	movs	r3, #2
 80079fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a00:	e069      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a02:	2304      	movs	r3, #4
 8007a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a08:	e065      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a10:	e061      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a12:	2310      	movs	r3, #16
 8007a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a18:	e05d      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8007b4c <UART_SetConfig+0x2f4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d125      	bne.n	8007a70 <UART_SetConfig+0x218>
 8007a24:	4b46      	ldr	r3, [pc, #280]	@ (8007b40 <UART_SetConfig+0x2e8>)
 8007a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a30:	d016      	beq.n	8007a60 <UART_SetConfig+0x208>
 8007a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a34:	d818      	bhi.n	8007a68 <UART_SetConfig+0x210>
 8007a36:	2b80      	cmp	r3, #128	@ 0x80
 8007a38:	d00a      	beq.n	8007a50 <UART_SetConfig+0x1f8>
 8007a3a:	2b80      	cmp	r3, #128	@ 0x80
 8007a3c:	d814      	bhi.n	8007a68 <UART_SetConfig+0x210>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <UART_SetConfig+0x1f0>
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d008      	beq.n	8007a58 <UART_SetConfig+0x200>
 8007a46:	e00f      	b.n	8007a68 <UART_SetConfig+0x210>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a4e:	e042      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a56:	e03e      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a5e:	e03a      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a66:	e036      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a6e:	e032      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a30      	ldr	r2, [pc, #192]	@ (8007b38 <UART_SetConfig+0x2e0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d12a      	bne.n	8007ad0 <UART_SetConfig+0x278>
 8007a7a:	4b31      	ldr	r3, [pc, #196]	@ (8007b40 <UART_SetConfig+0x2e8>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a88:	d01a      	beq.n	8007ac0 <UART_SetConfig+0x268>
 8007a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a8e:	d81b      	bhi.n	8007ac8 <UART_SetConfig+0x270>
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a94:	d00c      	beq.n	8007ab0 <UART_SetConfig+0x258>
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a9a:	d815      	bhi.n	8007ac8 <UART_SetConfig+0x270>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <UART_SetConfig+0x250>
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa4:	d008      	beq.n	8007ab8 <UART_SetConfig+0x260>
 8007aa6:	e00f      	b.n	8007ac8 <UART_SetConfig+0x270>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aae:	e012      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ab6:	e00e      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007abe:	e00a      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac6:	e006      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ace:	e002      	b.n	8007ad6 <UART_SetConfig+0x27e>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a17      	ldr	r2, [pc, #92]	@ (8007b38 <UART_SetConfig+0x2e0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	f040 80a8 	bne.w	8007c32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d834      	bhi.n	8007b54 <UART_SetConfig+0x2fc>
 8007aea:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <UART_SetConfig+0x298>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b23 	.word	0x08007b23
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b2b 	.word	0x08007b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b14:	f7fd ff68 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b1a:	e021      	b.n	8007b60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b50 <UART_SetConfig+0x2f8>)
 8007b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b20:	e01e      	b.n	8007b60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b22:	f7fd fef3 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8007b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b28:	e01a      	b.n	8007b60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b30:	e016      	b.n	8007b60 <UART_SetConfig+0x308>
 8007b32:	bf00      	nop
 8007b34:	cfff69f3 	.word	0xcfff69f3
 8007b38:	40008000 	.word	0x40008000
 8007b3c:	40013800 	.word	0x40013800
 8007b40:	40021000 	.word	0x40021000
 8007b44:	40004400 	.word	0x40004400
 8007b48:	40004800 	.word	0x40004800
 8007b4c:	40004c00 	.word	0x40004c00
 8007b50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 812a 	beq.w	8007dbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	4a9e      	ldr	r2, [pc, #632]	@ (8007de8 <UART_SetConfig+0x590>)
 8007b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	4613      	mov	r3, r2
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	4413      	add	r3, r2
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d305      	bcc.n	8007b98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d903      	bls.n	8007ba0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b9e:	e10d      	b.n	8007dbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	60fa      	str	r2, [r7, #12]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	4a8e      	ldr	r2, [pc, #568]	@ (8007de8 <UART_SetConfig+0x590>)
 8007bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bc2:	f7f9 f889 	bl	8000cd8 <__aeabi_uldivmod>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	020b      	lsls	r3, r1, #8
 8007bd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bdc:	0202      	lsls	r2, r0, #8
 8007bde:	6979      	ldr	r1, [r7, #20]
 8007be0:	6849      	ldr	r1, [r1, #4]
 8007be2:	0849      	lsrs	r1, r1, #1
 8007be4:	2000      	movs	r0, #0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4605      	mov	r5, r0
 8007bea:	eb12 0804 	adds.w	r8, r2, r4
 8007bee:	eb43 0905 	adc.w	r9, r3, r5
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	469a      	mov	sl, r3
 8007bfa:	4693      	mov	fp, r2
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	465b      	mov	r3, fp
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f9 f868 	bl	8000cd8 <__aeabi_uldivmod>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c16:	d308      	bcc.n	8007c2a <UART_SetConfig+0x3d2>
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c1e:	d204      	bcs.n	8007c2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	e0c8      	b.n	8007dbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c30:	e0c4      	b.n	8007dbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c3a:	d167      	bne.n	8007d0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d828      	bhi.n	8007c96 <UART_SetConfig+0x43e>
 8007c44:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <UART_SetConfig+0x3f4>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	08007c97 	.word	0x08007c97
 8007c5c:	08007c87 	.word	0x08007c87
 8007c60:	08007c97 	.word	0x08007c97
 8007c64:	08007c97 	.word	0x08007c97
 8007c68:	08007c97 	.word	0x08007c97
 8007c6c:	08007c8f 	.word	0x08007c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c70:	f7fd feba 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007c74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c76:	e014      	b.n	8007ca2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c78:	f7fd fecc 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8007c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c7e:	e010      	b.n	8007ca2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c80:	4b5a      	ldr	r3, [pc, #360]	@ (8007dec <UART_SetConfig+0x594>)
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c84:	e00d      	b.n	8007ca2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c86:	f7fd fe41 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8007c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c8c:	e009      	b.n	8007ca2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c94:	e005      	b.n	8007ca2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8089 	beq.w	8007dbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	4a4e      	ldr	r2, [pc, #312]	@ (8007de8 <UART_SetConfig+0x590>)
 8007cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cbc:	005a      	lsls	r2, r3, #1
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	441a      	add	r2, r3
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	d916      	bls.n	8007d04 <UART_SetConfig+0x4ac>
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cdc:	d212      	bcs.n	8007d04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f023 030f 	bic.w	r3, r3, #15
 8007ce6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	8bfb      	ldrh	r3, [r7, #30]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	8bfa      	ldrh	r2, [r7, #30]
 8007d00:	60da      	str	r2, [r3, #12]
 8007d02:	e05b      	b.n	8007dbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d0a:	e057      	b.n	8007dbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d828      	bhi.n	8007d66 <UART_SetConfig+0x50e>
 8007d14:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0x4c4>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d41 	.word	0x08007d41
 8007d20:	08007d49 	.word	0x08007d49
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	08007d67 	.word	0x08007d67
 8007d2c:	08007d57 	.word	0x08007d57
 8007d30:	08007d67 	.word	0x08007d67
 8007d34:	08007d67 	.word	0x08007d67
 8007d38:	08007d67 	.word	0x08007d67
 8007d3c:	08007d5f 	.word	0x08007d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d40:	f7fd fe52 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8007d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d46:	e014      	b.n	8007d72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d48:	f7fd fe64 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8007d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4e:	e010      	b.n	8007d72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d50:	4b26      	ldr	r3, [pc, #152]	@ (8007dec <UART_SetConfig+0x594>)
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d54:	e00d      	b.n	8007d72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d56:	f7fd fdd9 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8007d5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d5c:	e009      	b.n	8007d72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d64:	e005      	b.n	8007d72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d70:	bf00      	nop
    }

    if (pclk != 0U)
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d021      	beq.n	8007dbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007de8 <UART_SetConfig+0x590>)
 8007d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	441a      	add	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	2b0f      	cmp	r3, #15
 8007da0:	d909      	bls.n	8007db6 <UART_SetConfig+0x55e>
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da8:	d205      	bcs.n	8007db6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60da      	str	r2, [r3, #12]
 8007db4:	e002      	b.n	8007dbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007dd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3730      	adds	r7, #48	@ 0x30
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de6:	bf00      	nop
 8007de8:	0800de90 	.word	0x0800de90
 8007dec:	00f42400 	.word	0x00f42400

08007df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01a      	beq.n	8007f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eee:	d10a      	bne.n	8007f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	605a      	str	r2, [r3, #4]
  }
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b098      	sub	sp, #96	@ 0x60
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f44:	f7fb fef0 	bl	8003d28 <HAL_GetTick>
 8007f48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d12f      	bne.n	8007fb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f60:	2200      	movs	r2, #0
 8007f62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f88e 	bl	8008088 <UART_WaitOnFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d022      	beq.n	8007fb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e063      	b.n	8008080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d149      	bne.n	800805a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f857 	bl	8008088 <UART_WaitOnFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d03c      	beq.n	800805a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	623b      	str	r3, [r7, #32]
   return(result);
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008000:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e6      	bne.n	8007fe0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	60fb      	str	r3, [r7, #12]
   return(result);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f023 0301 	bic.w	r3, r3, #1
 8008028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008032:	61fa      	str	r2, [r7, #28]
 8008034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	69b9      	ldr	r1, [r7, #24]
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	617b      	str	r3, [r7, #20]
   return(result);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e5      	bne.n	8008012 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e012      	b.n	8008080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3758      	adds	r7, #88	@ 0x58
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	4613      	mov	r3, r2
 8008096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008098:	e04f      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d04b      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a2:	f7fb fe41 	bl	8003d28 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d302      	bcc.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e04e      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d037      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb2>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b80      	cmp	r3, #128	@ 0x80
 80080ce:	d034      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb2>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b40      	cmp	r3, #64	@ 0x40
 80080d4:	d031      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d110      	bne.n	8008106 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2208      	movs	r2, #8
 80080ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f838 	bl	8008162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2208      	movs	r2, #8
 80080f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e029      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008114:	d111      	bne.n	800813a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800811e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f81e 	bl	8008162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e00f      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69da      	ldr	r2, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	429a      	cmp	r2, r3
 8008156:	d0a0      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008162:	b480      	push	{r7}
 8008164:	b095      	sub	sp, #84	@ 0x54
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800817e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008188:	643b      	str	r3, [r7, #64]	@ 0x40
 800818a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800818e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e6      	bne.n	800816a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3308      	adds	r3, #8
 80081a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e3      	bne.n	800819c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d118      	bne.n	800820e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f023 0310 	bic.w	r3, r3, #16
 80081f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6979      	ldr	r1, [r7, #20]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	613b      	str	r3, [r7, #16]
   return(result);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e6      	bne.n	80081dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008222:	bf00      	nop
 8008224:	3754      	adds	r7, #84	@ 0x54
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_UARTEx_DisableFifoMode+0x16>
 8008240:	2302      	movs	r3, #2
 8008242:	e027      	b.n	8008294 <HAL_UARTEx_DisableFifoMode+0x66>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2224      	movs	r2, #36	@ 0x24
 8008250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008272:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e02d      	b.n	8008314 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2224      	movs	r2, #36	@ 0x24
 80082c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0201 	bic.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f84f 	bl	8008398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008330:	2302      	movs	r3, #2
 8008332:	e02d      	b.n	8008390 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2224      	movs	r2, #36	@ 0x24
 8008340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0201 	bic.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f811 	bl	8008398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d108      	bne.n	80083ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083b8:	e031      	b.n	800841e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083ba:	2308      	movs	r3, #8
 80083bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083be:	2308      	movs	r3, #8
 80083c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	0e5b      	lsrs	r3, r3, #25
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	0f5b      	lsrs	r3, r3, #29
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	7b3a      	ldrb	r2, [r7, #12]
 80083e6:	4911      	ldr	r1, [pc, #68]	@ (800842c <UARTEx_SetNbDataToProcess+0x94>)
 80083e8:	5c8a      	ldrb	r2, [r1, r2]
 80083ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083ee:	7b3a      	ldrb	r2, [r7, #12]
 80083f0:	490f      	ldr	r1, [pc, #60]	@ (8008430 <UARTEx_SetNbDataToProcess+0x98>)
 80083f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	7b7a      	ldrb	r2, [r7, #13]
 8008404:	4909      	ldr	r1, [pc, #36]	@ (800842c <UARTEx_SetNbDataToProcess+0x94>)
 8008406:	5c8a      	ldrb	r2, [r1, r2]
 8008408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800840c:	7b7a      	ldrb	r2, [r7, #13]
 800840e:	4908      	ldr	r1, [pc, #32]	@ (8008430 <UARTEx_SetNbDataToProcess+0x98>)
 8008410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008412:	fb93 f3f2 	sdiv	r3, r3, r2
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	0800dea8 	.word	0x0800dea8
 8008430:	0800deb0 	.word	0x0800deb0

08008434 <__cvt>:
 8008434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	ec57 6b10 	vmov	r6, r7, d0
 800843c:	2f00      	cmp	r7, #0
 800843e:	460c      	mov	r4, r1
 8008440:	4619      	mov	r1, r3
 8008442:	463b      	mov	r3, r7
 8008444:	bfbb      	ittet	lt
 8008446:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800844a:	461f      	movlt	r7, r3
 800844c:	2300      	movge	r3, #0
 800844e:	232d      	movlt	r3, #45	@ 0x2d
 8008450:	700b      	strb	r3, [r1, #0]
 8008452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008454:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008458:	4691      	mov	r9, r2
 800845a:	f023 0820 	bic.w	r8, r3, #32
 800845e:	bfbc      	itt	lt
 8008460:	4632      	movlt	r2, r6
 8008462:	4616      	movlt	r6, r2
 8008464:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008468:	d005      	beq.n	8008476 <__cvt+0x42>
 800846a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800846e:	d100      	bne.n	8008472 <__cvt+0x3e>
 8008470:	3401      	adds	r4, #1
 8008472:	2102      	movs	r1, #2
 8008474:	e000      	b.n	8008478 <__cvt+0x44>
 8008476:	2103      	movs	r1, #3
 8008478:	ab03      	add	r3, sp, #12
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	ab02      	add	r3, sp, #8
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	ec47 6b10 	vmov	d0, r6, r7
 8008484:	4653      	mov	r3, sl
 8008486:	4622      	mov	r2, r4
 8008488:	f001 f86e 	bl	8009568 <_dtoa_r>
 800848c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008490:	4605      	mov	r5, r0
 8008492:	d119      	bne.n	80084c8 <__cvt+0x94>
 8008494:	f019 0f01 	tst.w	r9, #1
 8008498:	d00e      	beq.n	80084b8 <__cvt+0x84>
 800849a:	eb00 0904 	add.w	r9, r0, r4
 800849e:	2200      	movs	r2, #0
 80084a0:	2300      	movs	r3, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	4639      	mov	r1, r7
 80084a6:	f7f8 fb37 	bl	8000b18 <__aeabi_dcmpeq>
 80084aa:	b108      	cbz	r0, 80084b0 <__cvt+0x7c>
 80084ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80084b0:	2230      	movs	r2, #48	@ 0x30
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	454b      	cmp	r3, r9
 80084b6:	d31e      	bcc.n	80084f6 <__cvt+0xc2>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084bc:	1b5b      	subs	r3, r3, r5
 80084be:	4628      	mov	r0, r5
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	b004      	add	sp, #16
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084cc:	eb00 0904 	add.w	r9, r0, r4
 80084d0:	d1e5      	bne.n	800849e <__cvt+0x6a>
 80084d2:	7803      	ldrb	r3, [r0, #0]
 80084d4:	2b30      	cmp	r3, #48	@ 0x30
 80084d6:	d10a      	bne.n	80084ee <__cvt+0xba>
 80084d8:	2200      	movs	r2, #0
 80084da:	2300      	movs	r3, #0
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f8 fb1a 	bl	8000b18 <__aeabi_dcmpeq>
 80084e4:	b918      	cbnz	r0, 80084ee <__cvt+0xba>
 80084e6:	f1c4 0401 	rsb	r4, r4, #1
 80084ea:	f8ca 4000 	str.w	r4, [sl]
 80084ee:	f8da 3000 	ldr.w	r3, [sl]
 80084f2:	4499      	add	r9, r3
 80084f4:	e7d3      	b.n	800849e <__cvt+0x6a>
 80084f6:	1c59      	adds	r1, r3, #1
 80084f8:	9103      	str	r1, [sp, #12]
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e7d9      	b.n	80084b2 <__cvt+0x7e>

080084fe <__exponent>:
 80084fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008500:	2900      	cmp	r1, #0
 8008502:	bfba      	itte	lt
 8008504:	4249      	neglt	r1, r1
 8008506:	232d      	movlt	r3, #45	@ 0x2d
 8008508:	232b      	movge	r3, #43	@ 0x2b
 800850a:	2909      	cmp	r1, #9
 800850c:	7002      	strb	r2, [r0, #0]
 800850e:	7043      	strb	r3, [r0, #1]
 8008510:	dd29      	ble.n	8008566 <__exponent+0x68>
 8008512:	f10d 0307 	add.w	r3, sp, #7
 8008516:	461d      	mov	r5, r3
 8008518:	270a      	movs	r7, #10
 800851a:	461a      	mov	r2, r3
 800851c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008520:	fb07 1416 	mls	r4, r7, r6, r1
 8008524:	3430      	adds	r4, #48	@ 0x30
 8008526:	f802 4c01 	strb.w	r4, [r2, #-1]
 800852a:	460c      	mov	r4, r1
 800852c:	2c63      	cmp	r4, #99	@ 0x63
 800852e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008532:	4631      	mov	r1, r6
 8008534:	dcf1      	bgt.n	800851a <__exponent+0x1c>
 8008536:	3130      	adds	r1, #48	@ 0x30
 8008538:	1e94      	subs	r4, r2, #2
 800853a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800853e:	1c41      	adds	r1, r0, #1
 8008540:	4623      	mov	r3, r4
 8008542:	42ab      	cmp	r3, r5
 8008544:	d30a      	bcc.n	800855c <__exponent+0x5e>
 8008546:	f10d 0309 	add.w	r3, sp, #9
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	42ac      	cmp	r4, r5
 800854e:	bf88      	it	hi
 8008550:	2300      	movhi	r3, #0
 8008552:	3302      	adds	r3, #2
 8008554:	4403      	add	r3, r0
 8008556:	1a18      	subs	r0, r3, r0
 8008558:	b003      	add	sp, #12
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008560:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008564:	e7ed      	b.n	8008542 <__exponent+0x44>
 8008566:	2330      	movs	r3, #48	@ 0x30
 8008568:	3130      	adds	r1, #48	@ 0x30
 800856a:	7083      	strb	r3, [r0, #2]
 800856c:	70c1      	strb	r1, [r0, #3]
 800856e:	1d03      	adds	r3, r0, #4
 8008570:	e7f1      	b.n	8008556 <__exponent+0x58>
	...

08008574 <_printf_float>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	b08d      	sub	sp, #52	@ 0x34
 800857a:	460c      	mov	r4, r1
 800857c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008580:	4616      	mov	r6, r2
 8008582:	461f      	mov	r7, r3
 8008584:	4605      	mov	r5, r0
 8008586:	f000 fee9 	bl	800935c <_localeconv_r>
 800858a:	6803      	ldr	r3, [r0, #0]
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	4618      	mov	r0, r3
 8008590:	f7f7 fe96 	bl	80002c0 <strlen>
 8008594:	2300      	movs	r3, #0
 8008596:	930a      	str	r3, [sp, #40]	@ 0x28
 8008598:	f8d8 3000 	ldr.w	r3, [r8]
 800859c:	9005      	str	r0, [sp, #20]
 800859e:	3307      	adds	r3, #7
 80085a0:	f023 0307 	bic.w	r3, r3, #7
 80085a4:	f103 0208 	add.w	r2, r3, #8
 80085a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085ac:	f8d4 b000 	ldr.w	fp, [r4]
 80085b0:	f8c8 2000 	str.w	r2, [r8]
 80085b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	f8cd 8018 	str.w	r8, [sp, #24]
 80085c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80085c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085ca:	4b9c      	ldr	r3, [pc, #624]	@ (800883c <_printf_float+0x2c8>)
 80085cc:	f04f 32ff 	mov.w	r2, #4294967295
 80085d0:	f7f8 fad4 	bl	8000b7c <__aeabi_dcmpun>
 80085d4:	bb70      	cbnz	r0, 8008634 <_printf_float+0xc0>
 80085d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085da:	4b98      	ldr	r3, [pc, #608]	@ (800883c <_printf_float+0x2c8>)
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	f7f8 faae 	bl	8000b40 <__aeabi_dcmple>
 80085e4:	bb30      	cbnz	r0, 8008634 <_printf_float+0xc0>
 80085e6:	2200      	movs	r2, #0
 80085e8:	2300      	movs	r3, #0
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f8 fa9d 	bl	8000b2c <__aeabi_dcmplt>
 80085f2:	b110      	cbz	r0, 80085fa <_printf_float+0x86>
 80085f4:	232d      	movs	r3, #45	@ 0x2d
 80085f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085fa:	4a91      	ldr	r2, [pc, #580]	@ (8008840 <_printf_float+0x2cc>)
 80085fc:	4b91      	ldr	r3, [pc, #580]	@ (8008844 <_printf_float+0x2d0>)
 80085fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008602:	bf8c      	ite	hi
 8008604:	4690      	movhi	r8, r2
 8008606:	4698      	movls	r8, r3
 8008608:	2303      	movs	r3, #3
 800860a:	6123      	str	r3, [r4, #16]
 800860c:	f02b 0304 	bic.w	r3, fp, #4
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	f04f 0900 	mov.w	r9, #0
 8008616:	9700      	str	r7, [sp, #0]
 8008618:	4633      	mov	r3, r6
 800861a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800861c:	4621      	mov	r1, r4
 800861e:	4628      	mov	r0, r5
 8008620:	f000 f9d2 	bl	80089c8 <_printf_common>
 8008624:	3001      	adds	r0, #1
 8008626:	f040 808d 	bne.w	8008744 <_printf_float+0x1d0>
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	b00d      	add	sp, #52	@ 0x34
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f8 fa9e 	bl	8000b7c <__aeabi_dcmpun>
 8008640:	b140      	cbz	r0, 8008654 <_printf_float+0xe0>
 8008642:	464b      	mov	r3, r9
 8008644:	2b00      	cmp	r3, #0
 8008646:	bfbc      	itt	lt
 8008648:	232d      	movlt	r3, #45	@ 0x2d
 800864a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800864e:	4a7e      	ldr	r2, [pc, #504]	@ (8008848 <_printf_float+0x2d4>)
 8008650:	4b7e      	ldr	r3, [pc, #504]	@ (800884c <_printf_float+0x2d8>)
 8008652:	e7d4      	b.n	80085fe <_printf_float+0x8a>
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800865a:	9206      	str	r2, [sp, #24]
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	d13b      	bne.n	80086d8 <_printf_float+0x164>
 8008660:	2306      	movs	r3, #6
 8008662:	6063      	str	r3, [r4, #4]
 8008664:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008668:	2300      	movs	r3, #0
 800866a:	6022      	str	r2, [r4, #0]
 800866c:	9303      	str	r3, [sp, #12]
 800866e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008670:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008674:	ab09      	add	r3, sp, #36	@ 0x24
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	6861      	ldr	r1, [r4, #4]
 800867a:	ec49 8b10 	vmov	d0, r8, r9
 800867e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008682:	4628      	mov	r0, r5
 8008684:	f7ff fed6 	bl	8008434 <__cvt>
 8008688:	9b06      	ldr	r3, [sp, #24]
 800868a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800868c:	2b47      	cmp	r3, #71	@ 0x47
 800868e:	4680      	mov	r8, r0
 8008690:	d129      	bne.n	80086e6 <_printf_float+0x172>
 8008692:	1cc8      	adds	r0, r1, #3
 8008694:	db02      	blt.n	800869c <_printf_float+0x128>
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	4299      	cmp	r1, r3
 800869a:	dd41      	ble.n	8008720 <_printf_float+0x1ac>
 800869c:	f1aa 0a02 	sub.w	sl, sl, #2
 80086a0:	fa5f fa8a 	uxtb.w	sl, sl
 80086a4:	3901      	subs	r1, #1
 80086a6:	4652      	mov	r2, sl
 80086a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80086ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80086ae:	f7ff ff26 	bl	80084fe <__exponent>
 80086b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086b4:	1813      	adds	r3, r2, r0
 80086b6:	2a01      	cmp	r2, #1
 80086b8:	4681      	mov	r9, r0
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	dc02      	bgt.n	80086c4 <_printf_float+0x150>
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	07d2      	lsls	r2, r2, #31
 80086c2:	d501      	bpl.n	80086c8 <_printf_float+0x154>
 80086c4:	3301      	adds	r3, #1
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0a2      	beq.n	8008616 <_printf_float+0xa2>
 80086d0:	232d      	movs	r3, #45	@ 0x2d
 80086d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086d6:	e79e      	b.n	8008616 <_printf_float+0xa2>
 80086d8:	9a06      	ldr	r2, [sp, #24]
 80086da:	2a47      	cmp	r2, #71	@ 0x47
 80086dc:	d1c2      	bne.n	8008664 <_printf_float+0xf0>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1c0      	bne.n	8008664 <_printf_float+0xf0>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7bd      	b.n	8008662 <_printf_float+0xee>
 80086e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086ea:	d9db      	bls.n	80086a4 <_printf_float+0x130>
 80086ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086f0:	d118      	bne.n	8008724 <_printf_float+0x1b0>
 80086f2:	2900      	cmp	r1, #0
 80086f4:	6863      	ldr	r3, [r4, #4]
 80086f6:	dd0b      	ble.n	8008710 <_printf_float+0x19c>
 80086f8:	6121      	str	r1, [r4, #16]
 80086fa:	b913      	cbnz	r3, 8008702 <_printf_float+0x18e>
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	07d0      	lsls	r0, r2, #31
 8008700:	d502      	bpl.n	8008708 <_printf_float+0x194>
 8008702:	3301      	adds	r3, #1
 8008704:	440b      	add	r3, r1
 8008706:	6123      	str	r3, [r4, #16]
 8008708:	65a1      	str	r1, [r4, #88]	@ 0x58
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	e7db      	b.n	80086c8 <_printf_float+0x154>
 8008710:	b913      	cbnz	r3, 8008718 <_printf_float+0x1a4>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	07d2      	lsls	r2, r2, #31
 8008716:	d501      	bpl.n	800871c <_printf_float+0x1a8>
 8008718:	3302      	adds	r3, #2
 800871a:	e7f4      	b.n	8008706 <_printf_float+0x192>
 800871c:	2301      	movs	r3, #1
 800871e:	e7f2      	b.n	8008706 <_printf_float+0x192>
 8008720:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008726:	4299      	cmp	r1, r3
 8008728:	db05      	blt.n	8008736 <_printf_float+0x1c2>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	6121      	str	r1, [r4, #16]
 800872e:	07d8      	lsls	r0, r3, #31
 8008730:	d5ea      	bpl.n	8008708 <_printf_float+0x194>
 8008732:	1c4b      	adds	r3, r1, #1
 8008734:	e7e7      	b.n	8008706 <_printf_float+0x192>
 8008736:	2900      	cmp	r1, #0
 8008738:	bfd4      	ite	le
 800873a:	f1c1 0202 	rsble	r2, r1, #2
 800873e:	2201      	movgt	r2, #1
 8008740:	4413      	add	r3, r2
 8008742:	e7e0      	b.n	8008706 <_printf_float+0x192>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	055a      	lsls	r2, r3, #21
 8008748:	d407      	bmi.n	800875a <_printf_float+0x1e6>
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	4642      	mov	r2, r8
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	d12b      	bne.n	80087b0 <_printf_float+0x23c>
 8008758:	e767      	b.n	800862a <_printf_float+0xb6>
 800875a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800875e:	f240 80dd 	bls.w	800891c <_printf_float+0x3a8>
 8008762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008766:	2200      	movs	r2, #0
 8008768:	2300      	movs	r3, #0
 800876a:	f7f8 f9d5 	bl	8000b18 <__aeabi_dcmpeq>
 800876e:	2800      	cmp	r0, #0
 8008770:	d033      	beq.n	80087da <_printf_float+0x266>
 8008772:	4a37      	ldr	r2, [pc, #220]	@ (8008850 <_printf_float+0x2dc>)
 8008774:	2301      	movs	r3, #1
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	f43f af54 	beq.w	800862a <_printf_float+0xb6>
 8008782:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008786:	4543      	cmp	r3, r8
 8008788:	db02      	blt.n	8008790 <_printf_float+0x21c>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	07d8      	lsls	r0, r3, #31
 800878e:	d50f      	bpl.n	80087b0 <_printf_float+0x23c>
 8008790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af45 	beq.w	800862a <_printf_float+0xb6>
 80087a0:	f04f 0900 	mov.w	r9, #0
 80087a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80087a8:	f104 0a1a 	add.w	sl, r4, #26
 80087ac:	45c8      	cmp	r8, r9
 80087ae:	dc09      	bgt.n	80087c4 <_printf_float+0x250>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	079b      	lsls	r3, r3, #30
 80087b4:	f100 8103 	bmi.w	80089be <_printf_float+0x44a>
 80087b8:	68e0      	ldr	r0, [r4, #12]
 80087ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087bc:	4298      	cmp	r0, r3
 80087be:	bfb8      	it	lt
 80087c0:	4618      	movlt	r0, r3
 80087c2:	e734      	b.n	800862e <_printf_float+0xba>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4652      	mov	r2, sl
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f af2b 	beq.w	800862a <_printf_float+0xb6>
 80087d4:	f109 0901 	add.w	r9, r9, #1
 80087d8:	e7e8      	b.n	80087ac <_printf_float+0x238>
 80087da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dc39      	bgt.n	8008854 <_printf_float+0x2e0>
 80087e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008850 <_printf_float+0x2dc>)
 80087e2:	2301      	movs	r3, #1
 80087e4:	4631      	mov	r1, r6
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b8      	blx	r7
 80087ea:	3001      	adds	r0, #1
 80087ec:	f43f af1d 	beq.w	800862a <_printf_float+0xb6>
 80087f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087f4:	ea59 0303 	orrs.w	r3, r9, r3
 80087f8:	d102      	bne.n	8008800 <_printf_float+0x28c>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	07d9      	lsls	r1, r3, #31
 80087fe:	d5d7      	bpl.n	80087b0 <_printf_float+0x23c>
 8008800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f af0d 	beq.w	800862a <_printf_float+0xb6>
 8008810:	f04f 0a00 	mov.w	sl, #0
 8008814:	f104 0b1a 	add.w	fp, r4, #26
 8008818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881a:	425b      	negs	r3, r3
 800881c:	4553      	cmp	r3, sl
 800881e:	dc01      	bgt.n	8008824 <_printf_float+0x2b0>
 8008820:	464b      	mov	r3, r9
 8008822:	e793      	b.n	800874c <_printf_float+0x1d8>
 8008824:	2301      	movs	r3, #1
 8008826:	465a      	mov	r2, fp
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f aefb 	beq.w	800862a <_printf_float+0xb6>
 8008834:	f10a 0a01 	add.w	sl, sl, #1
 8008838:	e7ee      	b.n	8008818 <_printf_float+0x2a4>
 800883a:	bf00      	nop
 800883c:	7fefffff 	.word	0x7fefffff
 8008840:	0800debc 	.word	0x0800debc
 8008844:	0800deb8 	.word	0x0800deb8
 8008848:	0800dec4 	.word	0x0800dec4
 800884c:	0800dec0 	.word	0x0800dec0
 8008850:	0800dec8 	.word	0x0800dec8
 8008854:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008856:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800885a:	4553      	cmp	r3, sl
 800885c:	bfa8      	it	ge
 800885e:	4653      	movge	r3, sl
 8008860:	2b00      	cmp	r3, #0
 8008862:	4699      	mov	r9, r3
 8008864:	dc36      	bgt.n	80088d4 <_printf_float+0x360>
 8008866:	f04f 0b00 	mov.w	fp, #0
 800886a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800886e:	f104 021a 	add.w	r2, r4, #26
 8008872:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008874:	9306      	str	r3, [sp, #24]
 8008876:	eba3 0309 	sub.w	r3, r3, r9
 800887a:	455b      	cmp	r3, fp
 800887c:	dc31      	bgt.n	80088e2 <_printf_float+0x36e>
 800887e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008880:	459a      	cmp	sl, r3
 8008882:	dc3a      	bgt.n	80088fa <_printf_float+0x386>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	07da      	lsls	r2, r3, #31
 8008888:	d437      	bmi.n	80088fa <_printf_float+0x386>
 800888a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888c:	ebaa 0903 	sub.w	r9, sl, r3
 8008890:	9b06      	ldr	r3, [sp, #24]
 8008892:	ebaa 0303 	sub.w	r3, sl, r3
 8008896:	4599      	cmp	r9, r3
 8008898:	bfa8      	it	ge
 800889a:	4699      	movge	r9, r3
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	dc33      	bgt.n	800890a <_printf_float+0x396>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088aa:	f104 0b1a 	add.w	fp, r4, #26
 80088ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b0:	ebaa 0303 	sub.w	r3, sl, r3
 80088b4:	eba3 0309 	sub.w	r3, r3, r9
 80088b8:	4543      	cmp	r3, r8
 80088ba:	f77f af79 	ble.w	80087b0 <_printf_float+0x23c>
 80088be:	2301      	movs	r3, #1
 80088c0:	465a      	mov	r2, fp
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f aeae 	beq.w	800862a <_printf_float+0xb6>
 80088ce:	f108 0801 	add.w	r8, r8, #1
 80088d2:	e7ec      	b.n	80088ae <_printf_float+0x33a>
 80088d4:	4642      	mov	r2, r8
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	d1c2      	bne.n	8008866 <_printf_float+0x2f2>
 80088e0:	e6a3      	b.n	800862a <_printf_float+0xb6>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	9206      	str	r2, [sp, #24]
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	f43f ae9c 	beq.w	800862a <_printf_float+0xb6>
 80088f2:	9a06      	ldr	r2, [sp, #24]
 80088f4:	f10b 0b01 	add.w	fp, fp, #1
 80088f8:	e7bb      	b.n	8008872 <_printf_float+0x2fe>
 80088fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	d1c0      	bne.n	800888a <_printf_float+0x316>
 8008908:	e68f      	b.n	800862a <_printf_float+0xb6>
 800890a:	9a06      	ldr	r2, [sp, #24]
 800890c:	464b      	mov	r3, r9
 800890e:	4442      	add	r2, r8
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	d1c3      	bne.n	80088a2 <_printf_float+0x32e>
 800891a:	e686      	b.n	800862a <_printf_float+0xb6>
 800891c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008920:	f1ba 0f01 	cmp.w	sl, #1
 8008924:	dc01      	bgt.n	800892a <_printf_float+0x3b6>
 8008926:	07db      	lsls	r3, r3, #31
 8008928:	d536      	bpl.n	8008998 <_printf_float+0x424>
 800892a:	2301      	movs	r3, #1
 800892c:	4642      	mov	r2, r8
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	f43f ae78 	beq.w	800862a <_printf_float+0xb6>
 800893a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae70 	beq.w	800862a <_printf_float+0xb6>
 800894a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800894e:	2200      	movs	r2, #0
 8008950:	2300      	movs	r3, #0
 8008952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008956:	f7f8 f8df 	bl	8000b18 <__aeabi_dcmpeq>
 800895a:	b9c0      	cbnz	r0, 800898e <_printf_float+0x41a>
 800895c:	4653      	mov	r3, sl
 800895e:	f108 0201 	add.w	r2, r8, #1
 8008962:	4631      	mov	r1, r6
 8008964:	4628      	mov	r0, r5
 8008966:	47b8      	blx	r7
 8008968:	3001      	adds	r0, #1
 800896a:	d10c      	bne.n	8008986 <_printf_float+0x412>
 800896c:	e65d      	b.n	800862a <_printf_float+0xb6>
 800896e:	2301      	movs	r3, #1
 8008970:	465a      	mov	r2, fp
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae56 	beq.w	800862a <_printf_float+0xb6>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	45d0      	cmp	r8, sl
 8008984:	dbf3      	blt.n	800896e <_printf_float+0x3fa>
 8008986:	464b      	mov	r3, r9
 8008988:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800898c:	e6df      	b.n	800874e <_printf_float+0x1da>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	f104 0b1a 	add.w	fp, r4, #26
 8008996:	e7f4      	b.n	8008982 <_printf_float+0x40e>
 8008998:	2301      	movs	r3, #1
 800899a:	4642      	mov	r2, r8
 800899c:	e7e1      	b.n	8008962 <_printf_float+0x3ee>
 800899e:	2301      	movs	r3, #1
 80089a0:	464a      	mov	r2, r9
 80089a2:	4631      	mov	r1, r6
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	f43f ae3e 	beq.w	800862a <_printf_float+0xb6>
 80089ae:	f108 0801 	add.w	r8, r8, #1
 80089b2:	68e3      	ldr	r3, [r4, #12]
 80089b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089b6:	1a5b      	subs	r3, r3, r1
 80089b8:	4543      	cmp	r3, r8
 80089ba:	dcf0      	bgt.n	800899e <_printf_float+0x42a>
 80089bc:	e6fc      	b.n	80087b8 <_printf_float+0x244>
 80089be:	f04f 0800 	mov.w	r8, #0
 80089c2:	f104 0919 	add.w	r9, r4, #25
 80089c6:	e7f4      	b.n	80089b2 <_printf_float+0x43e>

080089c8 <_printf_common>:
 80089c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	4616      	mov	r6, r2
 80089ce:	4698      	mov	r8, r3
 80089d0:	688a      	ldr	r2, [r1, #8]
 80089d2:	690b      	ldr	r3, [r1, #16]
 80089d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089d8:	4293      	cmp	r3, r2
 80089da:	bfb8      	it	lt
 80089dc:	4613      	movlt	r3, r2
 80089de:	6033      	str	r3, [r6, #0]
 80089e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089e4:	4607      	mov	r7, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	b10a      	cbz	r2, 80089ee <_printf_common+0x26>
 80089ea:	3301      	adds	r3, #1
 80089ec:	6033      	str	r3, [r6, #0]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	0699      	lsls	r1, r3, #26
 80089f2:	bf42      	ittt	mi
 80089f4:	6833      	ldrmi	r3, [r6, #0]
 80089f6:	3302      	addmi	r3, #2
 80089f8:	6033      	strmi	r3, [r6, #0]
 80089fa:	6825      	ldr	r5, [r4, #0]
 80089fc:	f015 0506 	ands.w	r5, r5, #6
 8008a00:	d106      	bne.n	8008a10 <_printf_common+0x48>
 8008a02:	f104 0a19 	add.w	sl, r4, #25
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	6832      	ldr	r2, [r6, #0]
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dc26      	bgt.n	8008a5e <_printf_common+0x96>
 8008a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	3b00      	subs	r3, #0
 8008a18:	bf18      	it	ne
 8008a1a:	2301      	movne	r3, #1
 8008a1c:	0692      	lsls	r2, r2, #26
 8008a1e:	d42b      	bmi.n	8008a78 <_printf_common+0xb0>
 8008a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a24:	4641      	mov	r1, r8
 8008a26:	4638      	mov	r0, r7
 8008a28:	47c8      	blx	r9
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	d01e      	beq.n	8008a6c <_printf_common+0xa4>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	6922      	ldr	r2, [r4, #16]
 8008a32:	f003 0306 	and.w	r3, r3, #6
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	bf02      	ittt	eq
 8008a3a:	68e5      	ldreq	r5, [r4, #12]
 8008a3c:	6833      	ldreq	r3, [r6, #0]
 8008a3e:	1aed      	subeq	r5, r5, r3
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	bf0c      	ite	eq
 8008a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a48:	2500      	movne	r5, #0
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	bfc4      	itt	gt
 8008a4e:	1a9b      	subgt	r3, r3, r2
 8008a50:	18ed      	addgt	r5, r5, r3
 8008a52:	2600      	movs	r6, #0
 8008a54:	341a      	adds	r4, #26
 8008a56:	42b5      	cmp	r5, r6
 8008a58:	d11a      	bne.n	8008a90 <_printf_common+0xc8>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	e008      	b.n	8008a70 <_printf_common+0xa8>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4652      	mov	r2, sl
 8008a62:	4641      	mov	r1, r8
 8008a64:	4638      	mov	r0, r7
 8008a66:	47c8      	blx	r9
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d103      	bne.n	8008a74 <_printf_common+0xac>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a74:	3501      	adds	r5, #1
 8008a76:	e7c6      	b.n	8008a06 <_printf_common+0x3e>
 8008a78:	18e1      	adds	r1, r4, r3
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	2030      	movs	r0, #48	@ 0x30
 8008a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a82:	4422      	add	r2, r4
 8008a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	e7c7      	b.n	8008a20 <_printf_common+0x58>
 8008a90:	2301      	movs	r3, #1
 8008a92:	4622      	mov	r2, r4
 8008a94:	4641      	mov	r1, r8
 8008a96:	4638      	mov	r0, r7
 8008a98:	47c8      	blx	r9
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	d0e6      	beq.n	8008a6c <_printf_common+0xa4>
 8008a9e:	3601      	adds	r6, #1
 8008aa0:	e7d9      	b.n	8008a56 <_printf_common+0x8e>
	...

08008aa4 <_printf_i>:
 8008aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	7e0f      	ldrb	r7, [r1, #24]
 8008aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008aac:	2f78      	cmp	r7, #120	@ 0x78
 8008aae:	4691      	mov	r9, r2
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	469a      	mov	sl, r3
 8008ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aba:	d807      	bhi.n	8008acc <_printf_i+0x28>
 8008abc:	2f62      	cmp	r7, #98	@ 0x62
 8008abe:	d80a      	bhi.n	8008ad6 <_printf_i+0x32>
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	f000 80d1 	beq.w	8008c68 <_printf_i+0x1c4>
 8008ac6:	2f58      	cmp	r7, #88	@ 0x58
 8008ac8:	f000 80b8 	beq.w	8008c3c <_printf_i+0x198>
 8008acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ad4:	e03a      	b.n	8008b4c <_printf_i+0xa8>
 8008ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ada:	2b15      	cmp	r3, #21
 8008adc:	d8f6      	bhi.n	8008acc <_printf_i+0x28>
 8008ade:	a101      	add	r1, pc, #4	@ (adr r1, 8008ae4 <_printf_i+0x40>)
 8008ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ae4:	08008b3d 	.word	0x08008b3d
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008acd 	.word	0x08008acd
 8008af0:	08008acd 	.word	0x08008acd
 8008af4:	08008acd 	.word	0x08008acd
 8008af8:	08008acd 	.word	0x08008acd
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008acd 	.word	0x08008acd
 8008b04:	08008acd 	.word	0x08008acd
 8008b08:	08008acd 	.word	0x08008acd
 8008b0c:	08008acd 	.word	0x08008acd
 8008b10:	08008c4f 	.word	0x08008c4f
 8008b14:	08008b7b 	.word	0x08008b7b
 8008b18:	08008c09 	.word	0x08008c09
 8008b1c:	08008acd 	.word	0x08008acd
 8008b20:	08008acd 	.word	0x08008acd
 8008b24:	08008c71 	.word	0x08008c71
 8008b28:	08008acd 	.word	0x08008acd
 8008b2c:	08008b7b 	.word	0x08008b7b
 8008b30:	08008acd 	.word	0x08008acd
 8008b34:	08008acd 	.word	0x08008acd
 8008b38:	08008c11 	.word	0x08008c11
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6032      	str	r2, [r6, #0]
 8008b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e09c      	b.n	8008c8a <_printf_i+0x1e6>
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	0606      	lsls	r6, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xbc>
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	e003      	b.n	8008b68 <_printf_i+0xc4>
 8008b60:	0645      	lsls	r5, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xb8>
 8008b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	da03      	bge.n	8008b74 <_printf_i+0xd0>
 8008b6c:	232d      	movs	r3, #45	@ 0x2d
 8008b6e:	426d      	negs	r5, r5
 8008b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b74:	4858      	ldr	r0, [pc, #352]	@ (8008cd8 <_printf_i+0x234>)
 8008b76:	230a      	movs	r3, #10
 8008b78:	e011      	b.n	8008b9e <_printf_i+0xfa>
 8008b7a:	6821      	ldr	r1, [r4, #0]
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	0608      	lsls	r0, r1, #24
 8008b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b84:	d402      	bmi.n	8008b8c <_printf_i+0xe8>
 8008b86:	0649      	lsls	r1, r1, #25
 8008b88:	bf48      	it	mi
 8008b8a:	b2ad      	uxthmi	r5, r5
 8008b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b8e:	4852      	ldr	r0, [pc, #328]	@ (8008cd8 <_printf_i+0x234>)
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	bf14      	ite	ne
 8008b94:	230a      	movne	r3, #10
 8008b96:	2308      	moveq	r3, #8
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b9e:	6866      	ldr	r6, [r4, #4]
 8008ba0:	60a6      	str	r6, [r4, #8]
 8008ba2:	2e00      	cmp	r6, #0
 8008ba4:	db05      	blt.n	8008bb2 <_printf_i+0x10e>
 8008ba6:	6821      	ldr	r1, [r4, #0]
 8008ba8:	432e      	orrs	r6, r5
 8008baa:	f021 0104 	bic.w	r1, r1, #4
 8008bae:	6021      	str	r1, [r4, #0]
 8008bb0:	d04b      	beq.n	8008c4a <_printf_i+0x1a6>
 8008bb2:	4616      	mov	r6, r2
 8008bb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bb8:	fb03 5711 	mls	r7, r3, r1, r5
 8008bbc:	5dc7      	ldrb	r7, [r0, r7]
 8008bbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bc2:	462f      	mov	r7, r5
 8008bc4:	42bb      	cmp	r3, r7
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	d9f4      	bls.n	8008bb4 <_printf_i+0x110>
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d10b      	bne.n	8008be6 <_printf_i+0x142>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	07df      	lsls	r7, r3, #31
 8008bd2:	d508      	bpl.n	8008be6 <_printf_i+0x142>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	6861      	ldr	r1, [r4, #4]
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	bfde      	ittt	le
 8008bdc:	2330      	movle	r3, #48	@ 0x30
 8008bde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008be2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008be6:	1b92      	subs	r2, r2, r6
 8008be8:	6122      	str	r2, [r4, #16]
 8008bea:	f8cd a000 	str.w	sl, [sp]
 8008bee:	464b      	mov	r3, r9
 8008bf0:	aa03      	add	r2, sp, #12
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	f7ff fee7 	bl	80089c8 <_printf_common>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d14a      	bne.n	8008c94 <_printf_i+0x1f0>
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008c02:	b004      	add	sp, #16
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	f043 0320 	orr.w	r3, r3, #32
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	4832      	ldr	r0, [pc, #200]	@ (8008cdc <_printf_i+0x238>)
 8008c12:	2778      	movs	r7, #120	@ 0x78
 8008c14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	6831      	ldr	r1, [r6, #0]
 8008c1c:	061f      	lsls	r7, r3, #24
 8008c1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c22:	d402      	bmi.n	8008c2a <_printf_i+0x186>
 8008c24:	065f      	lsls	r7, r3, #25
 8008c26:	bf48      	it	mi
 8008c28:	b2ad      	uxthmi	r5, r5
 8008c2a:	6031      	str	r1, [r6, #0]
 8008c2c:	07d9      	lsls	r1, r3, #31
 8008c2e:	bf44      	itt	mi
 8008c30:	f043 0320 	orrmi.w	r3, r3, #32
 8008c34:	6023      	strmi	r3, [r4, #0]
 8008c36:	b11d      	cbz	r5, 8008c40 <_printf_i+0x19c>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	e7ad      	b.n	8008b98 <_printf_i+0xf4>
 8008c3c:	4826      	ldr	r0, [pc, #152]	@ (8008cd8 <_printf_i+0x234>)
 8008c3e:	e7e9      	b.n	8008c14 <_printf_i+0x170>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	f023 0320 	bic.w	r3, r3, #32
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	e7f6      	b.n	8008c38 <_printf_i+0x194>
 8008c4a:	4616      	mov	r6, r2
 8008c4c:	e7bd      	b.n	8008bca <_printf_i+0x126>
 8008c4e:	6833      	ldr	r3, [r6, #0]
 8008c50:	6825      	ldr	r5, [r4, #0]
 8008c52:	6961      	ldr	r1, [r4, #20]
 8008c54:	1d18      	adds	r0, r3, #4
 8008c56:	6030      	str	r0, [r6, #0]
 8008c58:	062e      	lsls	r6, r5, #24
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	d501      	bpl.n	8008c62 <_printf_i+0x1be>
 8008c5e:	6019      	str	r1, [r3, #0]
 8008c60:	e002      	b.n	8008c68 <_printf_i+0x1c4>
 8008c62:	0668      	lsls	r0, r5, #25
 8008c64:	d5fb      	bpl.n	8008c5e <_printf_i+0x1ba>
 8008c66:	8019      	strh	r1, [r3, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6123      	str	r3, [r4, #16]
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	e7bc      	b.n	8008bea <_printf_i+0x146>
 8008c70:	6833      	ldr	r3, [r6, #0]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	6032      	str	r2, [r6, #0]
 8008c76:	681e      	ldr	r6, [r3, #0]
 8008c78:	6862      	ldr	r2, [r4, #4]
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7f7 facf 	bl	8000220 <memchr>
 8008c82:	b108      	cbz	r0, 8008c88 <_printf_i+0x1e4>
 8008c84:	1b80      	subs	r0, r0, r6
 8008c86:	6060      	str	r0, [r4, #4]
 8008c88:	6863      	ldr	r3, [r4, #4]
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c92:	e7aa      	b.n	8008bea <_printf_i+0x146>
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	4632      	mov	r2, r6
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	47d0      	blx	sl
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d0ad      	beq.n	8008bfe <_printf_i+0x15a>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	079b      	lsls	r3, r3, #30
 8008ca6:	d413      	bmi.n	8008cd0 <_printf_i+0x22c>
 8008ca8:	68e0      	ldr	r0, [r4, #12]
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	4298      	cmp	r0, r3
 8008cae:	bfb8      	it	lt
 8008cb0:	4618      	movlt	r0, r3
 8008cb2:	e7a6      	b.n	8008c02 <_printf_i+0x15e>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	4649      	mov	r1, r9
 8008cba:	4640      	mov	r0, r8
 8008cbc:	47d0      	blx	sl
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d09d      	beq.n	8008bfe <_printf_i+0x15a>
 8008cc2:	3501      	adds	r5, #1
 8008cc4:	68e3      	ldr	r3, [r4, #12]
 8008cc6:	9903      	ldr	r1, [sp, #12]
 8008cc8:	1a5b      	subs	r3, r3, r1
 8008cca:	42ab      	cmp	r3, r5
 8008ccc:	dcf2      	bgt.n	8008cb4 <_printf_i+0x210>
 8008cce:	e7eb      	b.n	8008ca8 <_printf_i+0x204>
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	f104 0619 	add.w	r6, r4, #25
 8008cd6:	e7f5      	b.n	8008cc4 <_printf_i+0x220>
 8008cd8:	0800deca 	.word	0x0800deca
 8008cdc:	0800dedb 	.word	0x0800dedb

08008ce0 <_scanf_float>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	b087      	sub	sp, #28
 8008ce6:	4691      	mov	r9, r2
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	688b      	ldr	r3, [r1, #8]
 8008cec:	1e5a      	subs	r2, r3, #1
 8008cee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008cf2:	bf81      	itttt	hi
 8008cf4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008cf8:	eb03 0b05 	addhi.w	fp, r3, r5
 8008cfc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d00:	608b      	strhi	r3, [r1, #8]
 8008d02:	680b      	ldr	r3, [r1, #0]
 8008d04:	460a      	mov	r2, r1
 8008d06:	f04f 0500 	mov.w	r5, #0
 8008d0a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008d0e:	f842 3b1c 	str.w	r3, [r2], #28
 8008d12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d16:	4680      	mov	r8, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	bf98      	it	ls
 8008d1c:	f04f 0b00 	movls.w	fp, #0
 8008d20:	9201      	str	r2, [sp, #4]
 8008d22:	4616      	mov	r6, r2
 8008d24:	46aa      	mov	sl, r5
 8008d26:	462f      	mov	r7, r5
 8008d28:	9502      	str	r5, [sp, #8]
 8008d2a:	68a2      	ldr	r2, [r4, #8]
 8008d2c:	b15a      	cbz	r2, 8008d46 <_scanf_float+0x66>
 8008d2e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b4e      	cmp	r3, #78	@ 0x4e
 8008d36:	d863      	bhi.n	8008e00 <_scanf_float+0x120>
 8008d38:	2b40      	cmp	r3, #64	@ 0x40
 8008d3a:	d83b      	bhi.n	8008db4 <_scanf_float+0xd4>
 8008d3c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008d40:	b2c8      	uxtb	r0, r1
 8008d42:	280e      	cmp	r0, #14
 8008d44:	d939      	bls.n	8008dba <_scanf_float+0xda>
 8008d46:	b11f      	cbz	r7, 8008d50 <_scanf_float+0x70>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d54:	f1ba 0f01 	cmp.w	sl, #1
 8008d58:	f200 8114 	bhi.w	8008f84 <_scanf_float+0x2a4>
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	429e      	cmp	r6, r3
 8008d60:	f200 8105 	bhi.w	8008f6e <_scanf_float+0x28e>
 8008d64:	2001      	movs	r0, #1
 8008d66:	b007      	add	sp, #28
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008d70:	2a0d      	cmp	r2, #13
 8008d72:	d8e8      	bhi.n	8008d46 <_scanf_float+0x66>
 8008d74:	a101      	add	r1, pc, #4	@ (adr r1, 8008d7c <_scanf_float+0x9c>)
 8008d76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008ec5 	.word	0x08008ec5
 8008d80:	08008d47 	.word	0x08008d47
 8008d84:	08008d47 	.word	0x08008d47
 8008d88:	08008d47 	.word	0x08008d47
 8008d8c:	08008f21 	.word	0x08008f21
 8008d90:	08008efb 	.word	0x08008efb
 8008d94:	08008d47 	.word	0x08008d47
 8008d98:	08008d47 	.word	0x08008d47
 8008d9c:	08008ed3 	.word	0x08008ed3
 8008da0:	08008d47 	.word	0x08008d47
 8008da4:	08008d47 	.word	0x08008d47
 8008da8:	08008d47 	.word	0x08008d47
 8008dac:	08008d47 	.word	0x08008d47
 8008db0:	08008e8f 	.word	0x08008e8f
 8008db4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008db8:	e7da      	b.n	8008d70 <_scanf_float+0x90>
 8008dba:	290e      	cmp	r1, #14
 8008dbc:	d8c3      	bhi.n	8008d46 <_scanf_float+0x66>
 8008dbe:	a001      	add	r0, pc, #4	@ (adr r0, 8008dc4 <_scanf_float+0xe4>)
 8008dc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008dc4:	08008e7f 	.word	0x08008e7f
 8008dc8:	08008d47 	.word	0x08008d47
 8008dcc:	08008e7f 	.word	0x08008e7f
 8008dd0:	08008f0f 	.word	0x08008f0f
 8008dd4:	08008d47 	.word	0x08008d47
 8008dd8:	08008e21 	.word	0x08008e21
 8008ddc:	08008e65 	.word	0x08008e65
 8008de0:	08008e65 	.word	0x08008e65
 8008de4:	08008e65 	.word	0x08008e65
 8008de8:	08008e65 	.word	0x08008e65
 8008dec:	08008e65 	.word	0x08008e65
 8008df0:	08008e65 	.word	0x08008e65
 8008df4:	08008e65 	.word	0x08008e65
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	08008e65 	.word	0x08008e65
 8008e00:	2b6e      	cmp	r3, #110	@ 0x6e
 8008e02:	d809      	bhi.n	8008e18 <_scanf_float+0x138>
 8008e04:	2b60      	cmp	r3, #96	@ 0x60
 8008e06:	d8b1      	bhi.n	8008d6c <_scanf_float+0x8c>
 8008e08:	2b54      	cmp	r3, #84	@ 0x54
 8008e0a:	d07b      	beq.n	8008f04 <_scanf_float+0x224>
 8008e0c:	2b59      	cmp	r3, #89	@ 0x59
 8008e0e:	d19a      	bne.n	8008d46 <_scanf_float+0x66>
 8008e10:	2d07      	cmp	r5, #7
 8008e12:	d198      	bne.n	8008d46 <_scanf_float+0x66>
 8008e14:	2508      	movs	r5, #8
 8008e16:	e02f      	b.n	8008e78 <_scanf_float+0x198>
 8008e18:	2b74      	cmp	r3, #116	@ 0x74
 8008e1a:	d073      	beq.n	8008f04 <_scanf_float+0x224>
 8008e1c:	2b79      	cmp	r3, #121	@ 0x79
 8008e1e:	e7f6      	b.n	8008e0e <_scanf_float+0x12e>
 8008e20:	6821      	ldr	r1, [r4, #0]
 8008e22:	05c8      	lsls	r0, r1, #23
 8008e24:	d51e      	bpl.n	8008e64 <_scanf_float+0x184>
 8008e26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008e2a:	6021      	str	r1, [r4, #0]
 8008e2c:	3701      	adds	r7, #1
 8008e2e:	f1bb 0f00 	cmp.w	fp, #0
 8008e32:	d003      	beq.n	8008e3c <_scanf_float+0x15c>
 8008e34:	3201      	adds	r2, #1
 8008e36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e3a:	60a2      	str	r2, [r4, #8]
 8008e3c:	68a3      	ldr	r3, [r4, #8]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	3301      	adds	r3, #1
 8008e46:	6123      	str	r3, [r4, #16]
 8008e48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f8c9 3004 	str.w	r3, [r9, #4]
 8008e54:	f340 8082 	ble.w	8008f5c <_scanf_float+0x27c>
 8008e58:	f8d9 3000 	ldr.w	r3, [r9]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	f8c9 3000 	str.w	r3, [r9]
 8008e62:	e762      	b.n	8008d2a <_scanf_float+0x4a>
 8008e64:	eb1a 0105 	adds.w	r1, sl, r5
 8008e68:	f47f af6d 	bne.w	8008d46 <_scanf_float+0x66>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008e72:	6022      	str	r2, [r4, #0]
 8008e74:	460d      	mov	r5, r1
 8008e76:	468a      	mov	sl, r1
 8008e78:	f806 3b01 	strb.w	r3, [r6], #1
 8008e7c:	e7de      	b.n	8008e3c <_scanf_float+0x15c>
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	0610      	lsls	r0, r2, #24
 8008e82:	f57f af60 	bpl.w	8008d46 <_scanf_float+0x66>
 8008e86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	e7f4      	b.n	8008e78 <_scanf_float+0x198>
 8008e8e:	f1ba 0f00 	cmp.w	sl, #0
 8008e92:	d10c      	bne.n	8008eae <_scanf_float+0x1ce>
 8008e94:	b977      	cbnz	r7, 8008eb4 <_scanf_float+0x1d4>
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ea0:	d108      	bne.n	8008eb4 <_scanf_float+0x1d4>
 8008ea2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	f04f 0a01 	mov.w	sl, #1
 8008eac:	e7e4      	b.n	8008e78 <_scanf_float+0x198>
 8008eae:	f1ba 0f02 	cmp.w	sl, #2
 8008eb2:	d050      	beq.n	8008f56 <_scanf_float+0x276>
 8008eb4:	2d01      	cmp	r5, #1
 8008eb6:	d002      	beq.n	8008ebe <_scanf_float+0x1de>
 8008eb8:	2d04      	cmp	r5, #4
 8008eba:	f47f af44 	bne.w	8008d46 <_scanf_float+0x66>
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	b2ed      	uxtb	r5, r5
 8008ec2:	e7d9      	b.n	8008e78 <_scanf_float+0x198>
 8008ec4:	f1ba 0f01 	cmp.w	sl, #1
 8008ec8:	f47f af3d 	bne.w	8008d46 <_scanf_float+0x66>
 8008ecc:	f04f 0a02 	mov.w	sl, #2
 8008ed0:	e7d2      	b.n	8008e78 <_scanf_float+0x198>
 8008ed2:	b975      	cbnz	r5, 8008ef2 <_scanf_float+0x212>
 8008ed4:	2f00      	cmp	r7, #0
 8008ed6:	f47f af37 	bne.w	8008d48 <_scanf_float+0x68>
 8008eda:	6822      	ldr	r2, [r4, #0]
 8008edc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008ee0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ee4:	f040 8103 	bne.w	80090ee <_scanf_float+0x40e>
 8008ee8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008eec:	6022      	str	r2, [r4, #0]
 8008eee:	2501      	movs	r5, #1
 8008ef0:	e7c2      	b.n	8008e78 <_scanf_float+0x198>
 8008ef2:	2d03      	cmp	r5, #3
 8008ef4:	d0e3      	beq.n	8008ebe <_scanf_float+0x1de>
 8008ef6:	2d05      	cmp	r5, #5
 8008ef8:	e7df      	b.n	8008eba <_scanf_float+0x1da>
 8008efa:	2d02      	cmp	r5, #2
 8008efc:	f47f af23 	bne.w	8008d46 <_scanf_float+0x66>
 8008f00:	2503      	movs	r5, #3
 8008f02:	e7b9      	b.n	8008e78 <_scanf_float+0x198>
 8008f04:	2d06      	cmp	r5, #6
 8008f06:	f47f af1e 	bne.w	8008d46 <_scanf_float+0x66>
 8008f0a:	2507      	movs	r5, #7
 8008f0c:	e7b4      	b.n	8008e78 <_scanf_float+0x198>
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	0591      	lsls	r1, r2, #22
 8008f12:	f57f af18 	bpl.w	8008d46 <_scanf_float+0x66>
 8008f16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008f1a:	6022      	str	r2, [r4, #0]
 8008f1c:	9702      	str	r7, [sp, #8]
 8008f1e:	e7ab      	b.n	8008e78 <_scanf_float+0x198>
 8008f20:	6822      	ldr	r2, [r4, #0]
 8008f22:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008f26:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008f2a:	d005      	beq.n	8008f38 <_scanf_float+0x258>
 8008f2c:	0550      	lsls	r0, r2, #21
 8008f2e:	f57f af0a 	bpl.w	8008d46 <_scanf_float+0x66>
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	f000 80db 	beq.w	80090ee <_scanf_float+0x40e>
 8008f38:	0591      	lsls	r1, r2, #22
 8008f3a:	bf58      	it	pl
 8008f3c:	9902      	ldrpl	r1, [sp, #8]
 8008f3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f42:	bf58      	it	pl
 8008f44:	1a79      	subpl	r1, r7, r1
 8008f46:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008f4a:	bf58      	it	pl
 8008f4c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f50:	6022      	str	r2, [r4, #0]
 8008f52:	2700      	movs	r7, #0
 8008f54:	e790      	b.n	8008e78 <_scanf_float+0x198>
 8008f56:	f04f 0a03 	mov.w	sl, #3
 8008f5a:	e78d      	b.n	8008e78 <_scanf_float+0x198>
 8008f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f60:	4649      	mov	r1, r9
 8008f62:	4640      	mov	r0, r8
 8008f64:	4798      	blx	r3
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f aedf 	beq.w	8008d2a <_scanf_float+0x4a>
 8008f6c:	e6eb      	b.n	8008d46 <_scanf_float+0x66>
 8008f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f76:	464a      	mov	r2, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4798      	blx	r3
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	6123      	str	r3, [r4, #16]
 8008f82:	e6eb      	b.n	8008d5c <_scanf_float+0x7c>
 8008f84:	1e6b      	subs	r3, r5, #1
 8008f86:	2b06      	cmp	r3, #6
 8008f88:	d824      	bhi.n	8008fd4 <_scanf_float+0x2f4>
 8008f8a:	2d02      	cmp	r5, #2
 8008f8c:	d836      	bhi.n	8008ffc <_scanf_float+0x31c>
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	429e      	cmp	r6, r3
 8008f92:	f67f aee7 	bls.w	8008d64 <_scanf_float+0x84>
 8008f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f9e:	464a      	mov	r2, r9
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4798      	blx	r3
 8008fa4:	6923      	ldr	r3, [r4, #16]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	e7f0      	b.n	8008f8e <_scanf_float+0x2ae>
 8008fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4798      	blx	r3
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fc4:	fa5f fa8a 	uxtb.w	sl, sl
 8008fc8:	f1ba 0f02 	cmp.w	sl, #2
 8008fcc:	d1ee      	bne.n	8008fac <_scanf_float+0x2cc>
 8008fce:	3d03      	subs	r5, #3
 8008fd0:	b2ed      	uxtb	r5, r5
 8008fd2:	1b76      	subs	r6, r6, r5
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	05da      	lsls	r2, r3, #23
 8008fd8:	d530      	bpl.n	800903c <_scanf_float+0x35c>
 8008fda:	055b      	lsls	r3, r3, #21
 8008fdc:	d511      	bpl.n	8009002 <_scanf_float+0x322>
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	429e      	cmp	r6, r3
 8008fe2:	f67f aebf 	bls.w	8008d64 <_scanf_float+0x84>
 8008fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fee:	464a      	mov	r2, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	4798      	blx	r3
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	e7f0      	b.n	8008fde <_scanf_float+0x2fe>
 8008ffc:	46aa      	mov	sl, r5
 8008ffe:	46b3      	mov	fp, r6
 8009000:	e7de      	b.n	8008fc0 <_scanf_float+0x2e0>
 8009002:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	2965      	cmp	r1, #101	@ 0x65
 800900a:	f103 33ff 	add.w	r3, r3, #4294967295
 800900e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	d00c      	beq.n	8009030 <_scanf_float+0x350>
 8009016:	2945      	cmp	r1, #69	@ 0x45
 8009018:	d00a      	beq.n	8009030 <_scanf_float+0x350>
 800901a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800901e:	464a      	mov	r2, r9
 8009020:	4640      	mov	r0, r8
 8009022:	4798      	blx	r3
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800902a:	3b01      	subs	r3, #1
 800902c:	1eb5      	subs	r5, r6, #2
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009034:	464a      	mov	r2, r9
 8009036:	4640      	mov	r0, r8
 8009038:	4798      	blx	r3
 800903a:	462e      	mov	r6, r5
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	f012 0210 	ands.w	r2, r2, #16
 8009042:	d001      	beq.n	8009048 <_scanf_float+0x368>
 8009044:	2000      	movs	r0, #0
 8009046:	e68e      	b.n	8008d66 <_scanf_float+0x86>
 8009048:	7032      	strb	r2, [r6, #0]
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009054:	d125      	bne.n	80090a2 <_scanf_float+0x3c2>
 8009056:	9b02      	ldr	r3, [sp, #8]
 8009058:	429f      	cmp	r7, r3
 800905a:	d00a      	beq.n	8009072 <_scanf_float+0x392>
 800905c:	1bda      	subs	r2, r3, r7
 800905e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009062:	429e      	cmp	r6, r3
 8009064:	bf28      	it	cs
 8009066:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800906a:	4922      	ldr	r1, [pc, #136]	@ (80090f4 <_scanf_float+0x414>)
 800906c:	4630      	mov	r0, r6
 800906e:	f000 f907 	bl	8009280 <siprintf>
 8009072:	9901      	ldr	r1, [sp, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	4640      	mov	r0, r8
 8009078:	f002 fbf2 	bl	800b860 <_strtod_r>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	6821      	ldr	r1, [r4, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f011 0f02 	tst.w	r1, #2
 8009086:	ec57 6b10 	vmov	r6, r7, d0
 800908a:	f103 0204 	add.w	r2, r3, #4
 800908e:	d015      	beq.n	80090bc <_scanf_float+0x3dc>
 8009090:	9903      	ldr	r1, [sp, #12]
 8009092:	600a      	str	r2, [r1, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	e9c3 6700 	strd	r6, r7, [r3]
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	3301      	adds	r3, #1
 800909e:	60e3      	str	r3, [r4, #12]
 80090a0:	e7d0      	b.n	8009044 <_scanf_float+0x364>
 80090a2:	9b04      	ldr	r3, [sp, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0e4      	beq.n	8009072 <_scanf_float+0x392>
 80090a8:	9905      	ldr	r1, [sp, #20]
 80090aa:	230a      	movs	r3, #10
 80090ac:	3101      	adds	r1, #1
 80090ae:	4640      	mov	r0, r8
 80090b0:	f002 fc56 	bl	800b960 <_strtol_r>
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	9e05      	ldr	r6, [sp, #20]
 80090b8:	1ac2      	subs	r2, r0, r3
 80090ba:	e7d0      	b.n	800905e <_scanf_float+0x37e>
 80090bc:	f011 0f04 	tst.w	r1, #4
 80090c0:	9903      	ldr	r1, [sp, #12]
 80090c2:	600a      	str	r2, [r1, #0]
 80090c4:	d1e6      	bne.n	8009094 <_scanf_float+0x3b4>
 80090c6:	681d      	ldr	r5, [r3, #0]
 80090c8:	4632      	mov	r2, r6
 80090ca:	463b      	mov	r3, r7
 80090cc:	4630      	mov	r0, r6
 80090ce:	4639      	mov	r1, r7
 80090d0:	f7f7 fd54 	bl	8000b7c <__aeabi_dcmpun>
 80090d4:	b128      	cbz	r0, 80090e2 <_scanf_float+0x402>
 80090d6:	4808      	ldr	r0, [pc, #32]	@ (80090f8 <_scanf_float+0x418>)
 80090d8:	f000 f9b8 	bl	800944c <nanf>
 80090dc:	ed85 0a00 	vstr	s0, [r5]
 80090e0:	e7db      	b.n	800909a <_scanf_float+0x3ba>
 80090e2:	4630      	mov	r0, r6
 80090e4:	4639      	mov	r1, r7
 80090e6:	f7f7 fda7 	bl	8000c38 <__aeabi_d2f>
 80090ea:	6028      	str	r0, [r5, #0]
 80090ec:	e7d5      	b.n	800909a <_scanf_float+0x3ba>
 80090ee:	2700      	movs	r7, #0
 80090f0:	e62e      	b.n	8008d50 <_scanf_float+0x70>
 80090f2:	bf00      	nop
 80090f4:	0800deec 	.word	0x0800deec
 80090f8:	0800e02d 	.word	0x0800e02d

080090fc <std>:
 80090fc:	2300      	movs	r3, #0
 80090fe:	b510      	push	{r4, lr}
 8009100:	4604      	mov	r4, r0
 8009102:	e9c0 3300 	strd	r3, r3, [r0]
 8009106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800910a:	6083      	str	r3, [r0, #8]
 800910c:	8181      	strh	r1, [r0, #12]
 800910e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009110:	81c2      	strh	r2, [r0, #14]
 8009112:	6183      	str	r3, [r0, #24]
 8009114:	4619      	mov	r1, r3
 8009116:	2208      	movs	r2, #8
 8009118:	305c      	adds	r0, #92	@ 0x5c
 800911a:	f000 f916 	bl	800934a <memset>
 800911e:	4b0d      	ldr	r3, [pc, #52]	@ (8009154 <std+0x58>)
 8009120:	6263      	str	r3, [r4, #36]	@ 0x24
 8009122:	4b0d      	ldr	r3, [pc, #52]	@ (8009158 <std+0x5c>)
 8009124:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009126:	4b0d      	ldr	r3, [pc, #52]	@ (800915c <std+0x60>)
 8009128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <std+0x64>)
 800912c:	6323      	str	r3, [r4, #48]	@ 0x30
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <std+0x68>)
 8009130:	6224      	str	r4, [r4, #32]
 8009132:	429c      	cmp	r4, r3
 8009134:	d006      	beq.n	8009144 <std+0x48>
 8009136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800913a:	4294      	cmp	r4, r2
 800913c:	d002      	beq.n	8009144 <std+0x48>
 800913e:	33d0      	adds	r3, #208	@ 0xd0
 8009140:	429c      	cmp	r4, r3
 8009142:	d105      	bne.n	8009150 <std+0x54>
 8009144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914c:	f000 b97a 	b.w	8009444 <__retarget_lock_init_recursive>
 8009150:	bd10      	pop	{r4, pc}
 8009152:	bf00      	nop
 8009154:	080092c5 	.word	0x080092c5
 8009158:	080092e7 	.word	0x080092e7
 800915c:	0800931f 	.word	0x0800931f
 8009160:	08009343 	.word	0x08009343
 8009164:	200005ec 	.word	0x200005ec

08009168 <stdio_exit_handler>:
 8009168:	4a02      	ldr	r2, [pc, #8]	@ (8009174 <stdio_exit_handler+0xc>)
 800916a:	4903      	ldr	r1, [pc, #12]	@ (8009178 <stdio_exit_handler+0x10>)
 800916c:	4803      	ldr	r0, [pc, #12]	@ (800917c <stdio_exit_handler+0x14>)
 800916e:	f000 b869 	b.w	8009244 <_fwalk_sglue>
 8009172:	bf00      	nop
 8009174:	20000034 	.word	0x20000034
 8009178:	0800bd1d 	.word	0x0800bd1d
 800917c:	20000044 	.word	0x20000044

08009180 <cleanup_stdio>:
 8009180:	6841      	ldr	r1, [r0, #4]
 8009182:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <cleanup_stdio+0x34>)
 8009184:	4299      	cmp	r1, r3
 8009186:	b510      	push	{r4, lr}
 8009188:	4604      	mov	r4, r0
 800918a:	d001      	beq.n	8009190 <cleanup_stdio+0x10>
 800918c:	f002 fdc6 	bl	800bd1c <_fflush_r>
 8009190:	68a1      	ldr	r1, [r4, #8]
 8009192:	4b09      	ldr	r3, [pc, #36]	@ (80091b8 <cleanup_stdio+0x38>)
 8009194:	4299      	cmp	r1, r3
 8009196:	d002      	beq.n	800919e <cleanup_stdio+0x1e>
 8009198:	4620      	mov	r0, r4
 800919a:	f002 fdbf 	bl	800bd1c <_fflush_r>
 800919e:	68e1      	ldr	r1, [r4, #12]
 80091a0:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <cleanup_stdio+0x3c>)
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d004      	beq.n	80091b0 <cleanup_stdio+0x30>
 80091a6:	4620      	mov	r0, r4
 80091a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ac:	f002 bdb6 	b.w	800bd1c <_fflush_r>
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	bf00      	nop
 80091b4:	200005ec 	.word	0x200005ec
 80091b8:	20000654 	.word	0x20000654
 80091bc:	200006bc 	.word	0x200006bc

080091c0 <global_stdio_init.part.0>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4b0b      	ldr	r3, [pc, #44]	@ (80091f0 <global_stdio_init.part.0+0x30>)
 80091c4:	4c0b      	ldr	r4, [pc, #44]	@ (80091f4 <global_stdio_init.part.0+0x34>)
 80091c6:	4a0c      	ldr	r2, [pc, #48]	@ (80091f8 <global_stdio_init.part.0+0x38>)
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	4620      	mov	r0, r4
 80091cc:	2200      	movs	r2, #0
 80091ce:	2104      	movs	r1, #4
 80091d0:	f7ff ff94 	bl	80090fc <std>
 80091d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091d8:	2201      	movs	r2, #1
 80091da:	2109      	movs	r1, #9
 80091dc:	f7ff ff8e 	bl	80090fc <std>
 80091e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091e4:	2202      	movs	r2, #2
 80091e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ea:	2112      	movs	r1, #18
 80091ec:	f7ff bf86 	b.w	80090fc <std>
 80091f0:	20000724 	.word	0x20000724
 80091f4:	200005ec 	.word	0x200005ec
 80091f8:	08009169 	.word	0x08009169

080091fc <__sfp_lock_acquire>:
 80091fc:	4801      	ldr	r0, [pc, #4]	@ (8009204 <__sfp_lock_acquire+0x8>)
 80091fe:	f000 b922 	b.w	8009446 <__retarget_lock_acquire_recursive>
 8009202:	bf00      	nop
 8009204:	2000072d 	.word	0x2000072d

08009208 <__sfp_lock_release>:
 8009208:	4801      	ldr	r0, [pc, #4]	@ (8009210 <__sfp_lock_release+0x8>)
 800920a:	f000 b91d 	b.w	8009448 <__retarget_lock_release_recursive>
 800920e:	bf00      	nop
 8009210:	2000072d 	.word	0x2000072d

08009214 <__sinit>:
 8009214:	b510      	push	{r4, lr}
 8009216:	4604      	mov	r4, r0
 8009218:	f7ff fff0 	bl	80091fc <__sfp_lock_acquire>
 800921c:	6a23      	ldr	r3, [r4, #32]
 800921e:	b11b      	cbz	r3, 8009228 <__sinit+0x14>
 8009220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009224:	f7ff bff0 	b.w	8009208 <__sfp_lock_release>
 8009228:	4b04      	ldr	r3, [pc, #16]	@ (800923c <__sinit+0x28>)
 800922a:	6223      	str	r3, [r4, #32]
 800922c:	4b04      	ldr	r3, [pc, #16]	@ (8009240 <__sinit+0x2c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f5      	bne.n	8009220 <__sinit+0xc>
 8009234:	f7ff ffc4 	bl	80091c0 <global_stdio_init.part.0>
 8009238:	e7f2      	b.n	8009220 <__sinit+0xc>
 800923a:	bf00      	nop
 800923c:	08009181 	.word	0x08009181
 8009240:	20000724 	.word	0x20000724

08009244 <_fwalk_sglue>:
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009248:	4607      	mov	r7, r0
 800924a:	4688      	mov	r8, r1
 800924c:	4614      	mov	r4, r2
 800924e:	2600      	movs	r6, #0
 8009250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009254:	f1b9 0901 	subs.w	r9, r9, #1
 8009258:	d505      	bpl.n	8009266 <_fwalk_sglue+0x22>
 800925a:	6824      	ldr	r4, [r4, #0]
 800925c:	2c00      	cmp	r4, #0
 800925e:	d1f7      	bne.n	8009250 <_fwalk_sglue+0xc>
 8009260:	4630      	mov	r0, r6
 8009262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d907      	bls.n	800927c <_fwalk_sglue+0x38>
 800926c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009270:	3301      	adds	r3, #1
 8009272:	d003      	beq.n	800927c <_fwalk_sglue+0x38>
 8009274:	4629      	mov	r1, r5
 8009276:	4638      	mov	r0, r7
 8009278:	47c0      	blx	r8
 800927a:	4306      	orrs	r6, r0
 800927c:	3568      	adds	r5, #104	@ 0x68
 800927e:	e7e9      	b.n	8009254 <_fwalk_sglue+0x10>

08009280 <siprintf>:
 8009280:	b40e      	push	{r1, r2, r3}
 8009282:	b510      	push	{r4, lr}
 8009284:	b09d      	sub	sp, #116	@ 0x74
 8009286:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009288:	9002      	str	r0, [sp, #8]
 800928a:	9006      	str	r0, [sp, #24]
 800928c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009290:	480a      	ldr	r0, [pc, #40]	@ (80092bc <siprintf+0x3c>)
 8009292:	9107      	str	r1, [sp, #28]
 8009294:	9104      	str	r1, [sp, #16]
 8009296:	490a      	ldr	r1, [pc, #40]	@ (80092c0 <siprintf+0x40>)
 8009298:	f853 2b04 	ldr.w	r2, [r3], #4
 800929c:	9105      	str	r1, [sp, #20]
 800929e:	2400      	movs	r4, #0
 80092a0:	a902      	add	r1, sp, #8
 80092a2:	6800      	ldr	r0, [r0, #0]
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80092a8:	f002 fbb8 	bl	800ba1c <_svfiprintf_r>
 80092ac:	9b02      	ldr	r3, [sp, #8]
 80092ae:	701c      	strb	r4, [r3, #0]
 80092b0:	b01d      	add	sp, #116	@ 0x74
 80092b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b6:	b003      	add	sp, #12
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000040 	.word	0x20000040
 80092c0:	ffff0208 	.word	0xffff0208

080092c4 <__sread>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	460c      	mov	r4, r1
 80092c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092cc:	f000 f86c 	bl	80093a8 <_read_r>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	bfab      	itete	ge
 80092d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092d6:	89a3      	ldrhlt	r3, [r4, #12]
 80092d8:	181b      	addge	r3, r3, r0
 80092da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092de:	bfac      	ite	ge
 80092e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092e2:	81a3      	strhlt	r3, [r4, #12]
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <__swrite>:
 80092e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	461f      	mov	r7, r3
 80092ec:	898b      	ldrh	r3, [r1, #12]
 80092ee:	05db      	lsls	r3, r3, #23
 80092f0:	4605      	mov	r5, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4616      	mov	r6, r2
 80092f6:	d505      	bpl.n	8009304 <__swrite+0x1e>
 80092f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fc:	2302      	movs	r3, #2
 80092fe:	2200      	movs	r2, #0
 8009300:	f000 f840 	bl	8009384 <_lseek_r>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800930a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	4632      	mov	r2, r6
 8009312:	463b      	mov	r3, r7
 8009314:	4628      	mov	r0, r5
 8009316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931a:	f000 b857 	b.w	80093cc <_write_r>

0800931e <__sseek>:
 800931e:	b510      	push	{r4, lr}
 8009320:	460c      	mov	r4, r1
 8009322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009326:	f000 f82d 	bl	8009384 <_lseek_r>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	bf15      	itete	ne
 8009330:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800933a:	81a3      	strheq	r3, [r4, #12]
 800933c:	bf18      	it	ne
 800933e:	81a3      	strhne	r3, [r4, #12]
 8009340:	bd10      	pop	{r4, pc}

08009342 <__sclose>:
 8009342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009346:	f000 b80d 	b.w	8009364 <_close_r>

0800934a <memset>:
 800934a:	4402      	add	r2, r0
 800934c:	4603      	mov	r3, r0
 800934e:	4293      	cmp	r3, r2
 8009350:	d100      	bne.n	8009354 <memset+0xa>
 8009352:	4770      	bx	lr
 8009354:	f803 1b01 	strb.w	r1, [r3], #1
 8009358:	e7f9      	b.n	800934e <memset+0x4>
	...

0800935c <_localeconv_r>:
 800935c:	4800      	ldr	r0, [pc, #0]	@ (8009360 <_localeconv_r+0x4>)
 800935e:	4770      	bx	lr
 8009360:	20000180 	.word	0x20000180

08009364 <_close_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d06      	ldr	r5, [pc, #24]	@ (8009380 <_close_r+0x1c>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	f7f9 ff22 	bl	80031b8 <_close>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_close_r+0x1a>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_close_r+0x1a>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000728 	.word	0x20000728

08009384 <_lseek_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d07      	ldr	r5, [pc, #28]	@ (80093a4 <_lseek_r+0x20>)
 8009388:	4604      	mov	r4, r0
 800938a:	4608      	mov	r0, r1
 800938c:	4611      	mov	r1, r2
 800938e:	2200      	movs	r2, #0
 8009390:	602a      	str	r2, [r5, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	f7f9 ff37 	bl	8003206 <_lseek>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_lseek_r+0x1e>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_lseek_r+0x1e>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000728 	.word	0x20000728

080093a8 <_read_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d07      	ldr	r5, [pc, #28]	@ (80093c8 <_read_r+0x20>)
 80093ac:	4604      	mov	r4, r0
 80093ae:	4608      	mov	r0, r1
 80093b0:	4611      	mov	r1, r2
 80093b2:	2200      	movs	r2, #0
 80093b4:	602a      	str	r2, [r5, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f7f9 fec5 	bl	8003146 <_read>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_read_r+0x1e>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_read_r+0x1e>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000728 	.word	0x20000728

080093cc <_write_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d07      	ldr	r5, [pc, #28]	@ (80093ec <_write_r+0x20>)
 80093d0:	4604      	mov	r4, r0
 80093d2:	4608      	mov	r0, r1
 80093d4:	4611      	mov	r1, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7f9 fed0 	bl	8003180 <_write>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_write_r+0x1e>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_write_r+0x1e>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000728 	.word	0x20000728

080093f0 <__errno>:
 80093f0:	4b01      	ldr	r3, [pc, #4]	@ (80093f8 <__errno+0x8>)
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	20000040 	.word	0x20000040

080093fc <__libc_init_array>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009434 <__libc_init_array+0x38>)
 8009400:	4c0d      	ldr	r4, [pc, #52]	@ (8009438 <__libc_init_array+0x3c>)
 8009402:	1b64      	subs	r4, r4, r5
 8009404:	10a4      	asrs	r4, r4, #2
 8009406:	2600      	movs	r6, #0
 8009408:	42a6      	cmp	r6, r4
 800940a:	d109      	bne.n	8009420 <__libc_init_array+0x24>
 800940c:	4d0b      	ldr	r5, [pc, #44]	@ (800943c <__libc_init_array+0x40>)
 800940e:	4c0c      	ldr	r4, [pc, #48]	@ (8009440 <__libc_init_array+0x44>)
 8009410:	f004 fd1e 	bl	800de50 <_init>
 8009414:	1b64      	subs	r4, r4, r5
 8009416:	10a4      	asrs	r4, r4, #2
 8009418:	2600      	movs	r6, #0
 800941a:	42a6      	cmp	r6, r4
 800941c:	d105      	bne.n	800942a <__libc_init_array+0x2e>
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	f855 3b04 	ldr.w	r3, [r5], #4
 8009424:	4798      	blx	r3
 8009426:	3601      	adds	r6, #1
 8009428:	e7ee      	b.n	8009408 <__libc_init_array+0xc>
 800942a:	f855 3b04 	ldr.w	r3, [r5], #4
 800942e:	4798      	blx	r3
 8009430:	3601      	adds	r6, #1
 8009432:	e7f2      	b.n	800941a <__libc_init_array+0x1e>
 8009434:	0800e4d8 	.word	0x0800e4d8
 8009438:	0800e4d8 	.word	0x0800e4d8
 800943c:	0800e4d8 	.word	0x0800e4d8
 8009440:	0800e4dc 	.word	0x0800e4dc

08009444 <__retarget_lock_init_recursive>:
 8009444:	4770      	bx	lr

08009446 <__retarget_lock_acquire_recursive>:
 8009446:	4770      	bx	lr

08009448 <__retarget_lock_release_recursive>:
 8009448:	4770      	bx	lr
	...

0800944c <nanf>:
 800944c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009454 <nanf+0x8>
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	7fc00000 	.word	0x7fc00000

08009458 <quorem>:
 8009458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	6903      	ldr	r3, [r0, #16]
 800945e:	690c      	ldr	r4, [r1, #16]
 8009460:	42a3      	cmp	r3, r4
 8009462:	4607      	mov	r7, r0
 8009464:	db7e      	blt.n	8009564 <quorem+0x10c>
 8009466:	3c01      	subs	r4, #1
 8009468:	f101 0814 	add.w	r8, r1, #20
 800946c:	00a3      	lsls	r3, r4, #2
 800946e:	f100 0514 	add.w	r5, r0, #20
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800947e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009482:	3301      	adds	r3, #1
 8009484:	429a      	cmp	r2, r3
 8009486:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800948a:	fbb2 f6f3 	udiv	r6, r2, r3
 800948e:	d32e      	bcc.n	80094ee <quorem+0x96>
 8009490:	f04f 0a00 	mov.w	sl, #0
 8009494:	46c4      	mov	ip, r8
 8009496:	46ae      	mov	lr, r5
 8009498:	46d3      	mov	fp, sl
 800949a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800949e:	b298      	uxth	r0, r3
 80094a0:	fb06 a000 	mla	r0, r6, r0, sl
 80094a4:	0c02      	lsrs	r2, r0, #16
 80094a6:	0c1b      	lsrs	r3, r3, #16
 80094a8:	fb06 2303 	mla	r3, r6, r3, r2
 80094ac:	f8de 2000 	ldr.w	r2, [lr]
 80094b0:	b280      	uxth	r0, r0
 80094b2:	b292      	uxth	r2, r2
 80094b4:	1a12      	subs	r2, r2, r0
 80094b6:	445a      	add	r2, fp
 80094b8:	f8de 0000 	ldr.w	r0, [lr]
 80094bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094ca:	b292      	uxth	r2, r2
 80094cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094d0:	45e1      	cmp	r9, ip
 80094d2:	f84e 2b04 	str.w	r2, [lr], #4
 80094d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094da:	d2de      	bcs.n	800949a <quorem+0x42>
 80094dc:	9b00      	ldr	r3, [sp, #0]
 80094de:	58eb      	ldr	r3, [r5, r3]
 80094e0:	b92b      	cbnz	r3, 80094ee <quorem+0x96>
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	429d      	cmp	r5, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	d32f      	bcc.n	800954c <quorem+0xf4>
 80094ec:	613c      	str	r4, [r7, #16]
 80094ee:	4638      	mov	r0, r7
 80094f0:	f001 f9c6 	bl	800a880 <__mcmp>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	db25      	blt.n	8009544 <quorem+0xec>
 80094f8:	4629      	mov	r1, r5
 80094fa:	2000      	movs	r0, #0
 80094fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009500:	f8d1 c000 	ldr.w	ip, [r1]
 8009504:	fa1f fe82 	uxth.w	lr, r2
 8009508:	fa1f f38c 	uxth.w	r3, ip
 800950c:	eba3 030e 	sub.w	r3, r3, lr
 8009510:	4403      	add	r3, r0
 8009512:	0c12      	lsrs	r2, r2, #16
 8009514:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009518:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800951c:	b29b      	uxth	r3, r3
 800951e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009522:	45c1      	cmp	r9, r8
 8009524:	f841 3b04 	str.w	r3, [r1], #4
 8009528:	ea4f 4022 	mov.w	r0, r2, asr #16
 800952c:	d2e6      	bcs.n	80094fc <quorem+0xa4>
 800952e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009536:	b922      	cbnz	r2, 8009542 <quorem+0xea>
 8009538:	3b04      	subs	r3, #4
 800953a:	429d      	cmp	r5, r3
 800953c:	461a      	mov	r2, r3
 800953e:	d30b      	bcc.n	8009558 <quorem+0x100>
 8009540:	613c      	str	r4, [r7, #16]
 8009542:	3601      	adds	r6, #1
 8009544:	4630      	mov	r0, r6
 8009546:	b003      	add	sp, #12
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	6812      	ldr	r2, [r2, #0]
 800954e:	3b04      	subs	r3, #4
 8009550:	2a00      	cmp	r2, #0
 8009552:	d1cb      	bne.n	80094ec <quorem+0x94>
 8009554:	3c01      	subs	r4, #1
 8009556:	e7c6      	b.n	80094e6 <quorem+0x8e>
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	3b04      	subs	r3, #4
 800955c:	2a00      	cmp	r2, #0
 800955e:	d1ef      	bne.n	8009540 <quorem+0xe8>
 8009560:	3c01      	subs	r4, #1
 8009562:	e7ea      	b.n	800953a <quorem+0xe2>
 8009564:	2000      	movs	r0, #0
 8009566:	e7ee      	b.n	8009546 <quorem+0xee>

08009568 <_dtoa_r>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	69c7      	ldr	r7, [r0, #28]
 800956e:	b097      	sub	sp, #92	@ 0x5c
 8009570:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009574:	ec55 4b10 	vmov	r4, r5, d0
 8009578:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800957a:	9107      	str	r1, [sp, #28]
 800957c:	4681      	mov	r9, r0
 800957e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009580:	9311      	str	r3, [sp, #68]	@ 0x44
 8009582:	b97f      	cbnz	r7, 80095a4 <_dtoa_r+0x3c>
 8009584:	2010      	movs	r0, #16
 8009586:	f000 fe09 	bl	800a19c <malloc>
 800958a:	4602      	mov	r2, r0
 800958c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009590:	b920      	cbnz	r0, 800959c <_dtoa_r+0x34>
 8009592:	4ba9      	ldr	r3, [pc, #676]	@ (8009838 <_dtoa_r+0x2d0>)
 8009594:	21ef      	movs	r1, #239	@ 0xef
 8009596:	48a9      	ldr	r0, [pc, #676]	@ (800983c <_dtoa_r+0x2d4>)
 8009598:	f002 fc3a 	bl	800be10 <__assert_func>
 800959c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095a0:	6007      	str	r7, [r0, #0]
 80095a2:	60c7      	str	r7, [r0, #12]
 80095a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	b159      	cbz	r1, 80095c4 <_dtoa_r+0x5c>
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	604a      	str	r2, [r1, #4]
 80095b0:	2301      	movs	r3, #1
 80095b2:	4093      	lsls	r3, r2
 80095b4:	608b      	str	r3, [r1, #8]
 80095b6:	4648      	mov	r0, r9
 80095b8:	f000 fee6 	bl	800a388 <_Bfree>
 80095bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	1e2b      	subs	r3, r5, #0
 80095c6:	bfb9      	ittee	lt
 80095c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095cc:	9305      	strlt	r3, [sp, #20]
 80095ce:	2300      	movge	r3, #0
 80095d0:	6033      	strge	r3, [r6, #0]
 80095d2:	9f05      	ldr	r7, [sp, #20]
 80095d4:	4b9a      	ldr	r3, [pc, #616]	@ (8009840 <_dtoa_r+0x2d8>)
 80095d6:	bfbc      	itt	lt
 80095d8:	2201      	movlt	r2, #1
 80095da:	6032      	strlt	r2, [r6, #0]
 80095dc:	43bb      	bics	r3, r7
 80095de:	d112      	bne.n	8009606 <_dtoa_r+0x9e>
 80095e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095ec:	4323      	orrs	r3, r4
 80095ee:	f000 855a 	beq.w	800a0a6 <_dtoa_r+0xb3e>
 80095f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009854 <_dtoa_r+0x2ec>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 855c 	beq.w	800a0b6 <_dtoa_r+0xb4e>
 80095fe:	f10a 0303 	add.w	r3, sl, #3
 8009602:	f000 bd56 	b.w	800a0b2 <_dtoa_r+0xb4a>
 8009606:	ed9d 7b04 	vldr	d7, [sp, #16]
 800960a:	2200      	movs	r2, #0
 800960c:	ec51 0b17 	vmov	r0, r1, d7
 8009610:	2300      	movs	r3, #0
 8009612:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009616:	f7f7 fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800961a:	4680      	mov	r8, r0
 800961c:	b158      	cbz	r0, 8009636 <_dtoa_r+0xce>
 800961e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009620:	2301      	movs	r3, #1
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009626:	b113      	cbz	r3, 800962e <_dtoa_r+0xc6>
 8009628:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800962a:	4b86      	ldr	r3, [pc, #536]	@ (8009844 <_dtoa_r+0x2dc>)
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009858 <_dtoa_r+0x2f0>
 8009632:	f000 bd40 	b.w	800a0b6 <_dtoa_r+0xb4e>
 8009636:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800963a:	aa14      	add	r2, sp, #80	@ 0x50
 800963c:	a915      	add	r1, sp, #84	@ 0x54
 800963e:	4648      	mov	r0, r9
 8009640:	f001 fa3e 	bl	800aac0 <__d2b>
 8009644:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009648:	9002      	str	r0, [sp, #8]
 800964a:	2e00      	cmp	r6, #0
 800964c:	d078      	beq.n	8009740 <_dtoa_r+0x1d8>
 800964e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009650:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800965c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009660:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009664:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009668:	4619      	mov	r1, r3
 800966a:	2200      	movs	r2, #0
 800966c:	4b76      	ldr	r3, [pc, #472]	@ (8009848 <_dtoa_r+0x2e0>)
 800966e:	f7f6 fe33 	bl	80002d8 <__aeabi_dsub>
 8009672:	a36b      	add	r3, pc, #428	@ (adr r3, 8009820 <_dtoa_r+0x2b8>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 ffe6 	bl	8000648 <__aeabi_dmul>
 800967c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009828 <_dtoa_r+0x2c0>)
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	f7f6 fe2b 	bl	80002dc <__adddf3>
 8009686:	4604      	mov	r4, r0
 8009688:	4630      	mov	r0, r6
 800968a:	460d      	mov	r5, r1
 800968c:	f7f6 ff72 	bl	8000574 <__aeabi_i2d>
 8009690:	a367      	add	r3, pc, #412	@ (adr r3, 8009830 <_dtoa_r+0x2c8>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ffd7 	bl	8000648 <__aeabi_dmul>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f6 fe1b 	bl	80002dc <__adddf3>
 80096a6:	4604      	mov	r4, r0
 80096a8:	460d      	mov	r5, r1
 80096aa:	f7f7 fa7d 	bl	8000ba8 <__aeabi_d2iz>
 80096ae:	2200      	movs	r2, #0
 80096b0:	4607      	mov	r7, r0
 80096b2:	2300      	movs	r3, #0
 80096b4:	4620      	mov	r0, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	f7f7 fa38 	bl	8000b2c <__aeabi_dcmplt>
 80096bc:	b140      	cbz	r0, 80096d0 <_dtoa_r+0x168>
 80096be:	4638      	mov	r0, r7
 80096c0:	f7f6 ff58 	bl	8000574 <__aeabi_i2d>
 80096c4:	4622      	mov	r2, r4
 80096c6:	462b      	mov	r3, r5
 80096c8:	f7f7 fa26 	bl	8000b18 <__aeabi_dcmpeq>
 80096cc:	b900      	cbnz	r0, 80096d0 <_dtoa_r+0x168>
 80096ce:	3f01      	subs	r7, #1
 80096d0:	2f16      	cmp	r7, #22
 80096d2:	d852      	bhi.n	800977a <_dtoa_r+0x212>
 80096d4:	4b5d      	ldr	r3, [pc, #372]	@ (800984c <_dtoa_r+0x2e4>)
 80096d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096e2:	f7f7 fa23 	bl	8000b2c <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d049      	beq.n	800977e <_dtoa_r+0x216>
 80096ea:	3f01      	subs	r7, #1
 80096ec:	2300      	movs	r3, #0
 80096ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80096f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096f2:	1b9b      	subs	r3, r3, r6
 80096f4:	1e5a      	subs	r2, r3, #1
 80096f6:	bf45      	ittet	mi
 80096f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80096fc:	9300      	strmi	r3, [sp, #0]
 80096fe:	2300      	movpl	r3, #0
 8009700:	2300      	movmi	r3, #0
 8009702:	9206      	str	r2, [sp, #24]
 8009704:	bf54      	ite	pl
 8009706:	9300      	strpl	r3, [sp, #0]
 8009708:	9306      	strmi	r3, [sp, #24]
 800970a:	2f00      	cmp	r7, #0
 800970c:	db39      	blt.n	8009782 <_dtoa_r+0x21a>
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	970d      	str	r7, [sp, #52]	@ 0x34
 8009712:	443b      	add	r3, r7
 8009714:	9306      	str	r3, [sp, #24]
 8009716:	2300      	movs	r3, #0
 8009718:	9308      	str	r3, [sp, #32]
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	2b09      	cmp	r3, #9
 800971e:	d863      	bhi.n	80097e8 <_dtoa_r+0x280>
 8009720:	2b05      	cmp	r3, #5
 8009722:	bfc4      	itt	gt
 8009724:	3b04      	subgt	r3, #4
 8009726:	9307      	strgt	r3, [sp, #28]
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	f1a3 0302 	sub.w	r3, r3, #2
 800972e:	bfcc      	ite	gt
 8009730:	2400      	movgt	r4, #0
 8009732:	2401      	movle	r4, #1
 8009734:	2b03      	cmp	r3, #3
 8009736:	d863      	bhi.n	8009800 <_dtoa_r+0x298>
 8009738:	e8df f003 	tbb	[pc, r3]
 800973c:	2b375452 	.word	0x2b375452
 8009740:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009744:	441e      	add	r6, r3
 8009746:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800974a:	2b20      	cmp	r3, #32
 800974c:	bfc1      	itttt	gt
 800974e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009752:	409f      	lslgt	r7, r3
 8009754:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009758:	fa24 f303 	lsrgt.w	r3, r4, r3
 800975c:	bfd6      	itet	le
 800975e:	f1c3 0320 	rsble	r3, r3, #32
 8009762:	ea47 0003 	orrgt.w	r0, r7, r3
 8009766:	fa04 f003 	lslle.w	r0, r4, r3
 800976a:	f7f6 fef3 	bl	8000554 <__aeabi_ui2d>
 800976e:	2201      	movs	r2, #1
 8009770:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009774:	3e01      	subs	r6, #1
 8009776:	9212      	str	r2, [sp, #72]	@ 0x48
 8009778:	e776      	b.n	8009668 <_dtoa_r+0x100>
 800977a:	2301      	movs	r3, #1
 800977c:	e7b7      	b.n	80096ee <_dtoa_r+0x186>
 800977e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009780:	e7b6      	b.n	80096f0 <_dtoa_r+0x188>
 8009782:	9b00      	ldr	r3, [sp, #0]
 8009784:	1bdb      	subs	r3, r3, r7
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	427b      	negs	r3, r7
 800978a:	9308      	str	r3, [sp, #32]
 800978c:	2300      	movs	r3, #0
 800978e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009790:	e7c3      	b.n	800971a <_dtoa_r+0x1b2>
 8009792:	2301      	movs	r3, #1
 8009794:	9309      	str	r3, [sp, #36]	@ 0x24
 8009796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009798:	eb07 0b03 	add.w	fp, r7, r3
 800979c:	f10b 0301 	add.w	r3, fp, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	bfb8      	it	lt
 80097a6:	2301      	movlt	r3, #1
 80097a8:	e006      	b.n	80097b8 <_dtoa_r+0x250>
 80097aa:	2301      	movs	r3, #1
 80097ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd28      	ble.n	8009806 <_dtoa_r+0x29e>
 80097b4:	469b      	mov	fp, r3
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80097bc:	2100      	movs	r1, #0
 80097be:	2204      	movs	r2, #4
 80097c0:	f102 0514 	add.w	r5, r2, #20
 80097c4:	429d      	cmp	r5, r3
 80097c6:	d926      	bls.n	8009816 <_dtoa_r+0x2ae>
 80097c8:	6041      	str	r1, [r0, #4]
 80097ca:	4648      	mov	r0, r9
 80097cc:	f000 fd9c 	bl	800a308 <_Balloc>
 80097d0:	4682      	mov	sl, r0
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d142      	bne.n	800985c <_dtoa_r+0x2f4>
 80097d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009850 <_dtoa_r+0x2e8>)
 80097d8:	4602      	mov	r2, r0
 80097da:	f240 11af 	movw	r1, #431	@ 0x1af
 80097de:	e6da      	b.n	8009596 <_dtoa_r+0x2e>
 80097e0:	2300      	movs	r3, #0
 80097e2:	e7e3      	b.n	80097ac <_dtoa_r+0x244>
 80097e4:	2300      	movs	r3, #0
 80097e6:	e7d5      	b.n	8009794 <_dtoa_r+0x22c>
 80097e8:	2401      	movs	r4, #1
 80097ea:	2300      	movs	r3, #0
 80097ec:	9307      	str	r3, [sp, #28]
 80097ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80097f0:	f04f 3bff 	mov.w	fp, #4294967295
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80097fa:	2312      	movs	r3, #18
 80097fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80097fe:	e7db      	b.n	80097b8 <_dtoa_r+0x250>
 8009800:	2301      	movs	r3, #1
 8009802:	9309      	str	r3, [sp, #36]	@ 0x24
 8009804:	e7f4      	b.n	80097f0 <_dtoa_r+0x288>
 8009806:	f04f 0b01 	mov.w	fp, #1
 800980a:	f8cd b00c 	str.w	fp, [sp, #12]
 800980e:	465b      	mov	r3, fp
 8009810:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009814:	e7d0      	b.n	80097b8 <_dtoa_r+0x250>
 8009816:	3101      	adds	r1, #1
 8009818:	0052      	lsls	r2, r2, #1
 800981a:	e7d1      	b.n	80097c0 <_dtoa_r+0x258>
 800981c:	f3af 8000 	nop.w
 8009820:	636f4361 	.word	0x636f4361
 8009824:	3fd287a7 	.word	0x3fd287a7
 8009828:	8b60c8b3 	.word	0x8b60c8b3
 800982c:	3fc68a28 	.word	0x3fc68a28
 8009830:	509f79fb 	.word	0x509f79fb
 8009834:	3fd34413 	.word	0x3fd34413
 8009838:	0800defe 	.word	0x0800defe
 800983c:	0800df15 	.word	0x0800df15
 8009840:	7ff00000 	.word	0x7ff00000
 8009844:	0800dec9 	.word	0x0800dec9
 8009848:	3ff80000 	.word	0x3ff80000
 800984c:	0800e0c8 	.word	0x0800e0c8
 8009850:	0800df6d 	.word	0x0800df6d
 8009854:	0800defa 	.word	0x0800defa
 8009858:	0800dec8 	.word	0x0800dec8
 800985c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009860:	6018      	str	r0, [r3, #0]
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	2b0e      	cmp	r3, #14
 8009866:	f200 80a1 	bhi.w	80099ac <_dtoa_r+0x444>
 800986a:	2c00      	cmp	r4, #0
 800986c:	f000 809e 	beq.w	80099ac <_dtoa_r+0x444>
 8009870:	2f00      	cmp	r7, #0
 8009872:	dd33      	ble.n	80098dc <_dtoa_r+0x374>
 8009874:	4b9c      	ldr	r3, [pc, #624]	@ (8009ae8 <_dtoa_r+0x580>)
 8009876:	f007 020f 	and.w	r2, r7, #15
 800987a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987e:	ed93 7b00 	vldr	d7, [r3]
 8009882:	05f8      	lsls	r0, r7, #23
 8009884:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009888:	ea4f 1427 	mov.w	r4, r7, asr #4
 800988c:	d516      	bpl.n	80098bc <_dtoa_r+0x354>
 800988e:	4b97      	ldr	r3, [pc, #604]	@ (8009aec <_dtoa_r+0x584>)
 8009890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009898:	f7f7 f800 	bl	800089c <__aeabi_ddiv>
 800989c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a0:	f004 040f 	and.w	r4, r4, #15
 80098a4:	2603      	movs	r6, #3
 80098a6:	4d91      	ldr	r5, [pc, #580]	@ (8009aec <_dtoa_r+0x584>)
 80098a8:	b954      	cbnz	r4, 80098c0 <_dtoa_r+0x358>
 80098aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b2:	f7f6 fff3 	bl	800089c <__aeabi_ddiv>
 80098b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ba:	e028      	b.n	800990e <_dtoa_r+0x3a6>
 80098bc:	2602      	movs	r6, #2
 80098be:	e7f2      	b.n	80098a6 <_dtoa_r+0x33e>
 80098c0:	07e1      	lsls	r1, r4, #31
 80098c2:	d508      	bpl.n	80098d6 <_dtoa_r+0x36e>
 80098c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098cc:	f7f6 febc 	bl	8000648 <__aeabi_dmul>
 80098d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098d4:	3601      	adds	r6, #1
 80098d6:	1064      	asrs	r4, r4, #1
 80098d8:	3508      	adds	r5, #8
 80098da:	e7e5      	b.n	80098a8 <_dtoa_r+0x340>
 80098dc:	f000 80af 	beq.w	8009a3e <_dtoa_r+0x4d6>
 80098e0:	427c      	negs	r4, r7
 80098e2:	4b81      	ldr	r3, [pc, #516]	@ (8009ae8 <_dtoa_r+0x580>)
 80098e4:	4d81      	ldr	r5, [pc, #516]	@ (8009aec <_dtoa_r+0x584>)
 80098e6:	f004 020f 	and.w	r2, r4, #15
 80098ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098f6:	f7f6 fea7 	bl	8000648 <__aeabi_dmul>
 80098fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098fe:	1124      	asrs	r4, r4, #4
 8009900:	2300      	movs	r3, #0
 8009902:	2602      	movs	r6, #2
 8009904:	2c00      	cmp	r4, #0
 8009906:	f040 808f 	bne.w	8009a28 <_dtoa_r+0x4c0>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1d3      	bne.n	80098b6 <_dtoa_r+0x34e>
 800990e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009910:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8094 	beq.w	8009a42 <_dtoa_r+0x4da>
 800991a:	4b75      	ldr	r3, [pc, #468]	@ (8009af0 <_dtoa_r+0x588>)
 800991c:	2200      	movs	r2, #0
 800991e:	4620      	mov	r0, r4
 8009920:	4629      	mov	r1, r5
 8009922:	f7f7 f903 	bl	8000b2c <__aeabi_dcmplt>
 8009926:	2800      	cmp	r0, #0
 8009928:	f000 808b 	beq.w	8009a42 <_dtoa_r+0x4da>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 8087 	beq.w	8009a42 <_dtoa_r+0x4da>
 8009934:	f1bb 0f00 	cmp.w	fp, #0
 8009938:	dd34      	ble.n	80099a4 <_dtoa_r+0x43c>
 800993a:	4620      	mov	r0, r4
 800993c:	4b6d      	ldr	r3, [pc, #436]	@ (8009af4 <_dtoa_r+0x58c>)
 800993e:	2200      	movs	r2, #0
 8009940:	4629      	mov	r1, r5
 8009942:	f7f6 fe81 	bl	8000648 <__aeabi_dmul>
 8009946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800994a:	f107 38ff 	add.w	r8, r7, #4294967295
 800994e:	3601      	adds	r6, #1
 8009950:	465c      	mov	r4, fp
 8009952:	4630      	mov	r0, r6
 8009954:	f7f6 fe0e 	bl	8000574 <__aeabi_i2d>
 8009958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800995c:	f7f6 fe74 	bl	8000648 <__aeabi_dmul>
 8009960:	4b65      	ldr	r3, [pc, #404]	@ (8009af8 <_dtoa_r+0x590>)
 8009962:	2200      	movs	r2, #0
 8009964:	f7f6 fcba 	bl	80002dc <__adddf3>
 8009968:	4605      	mov	r5, r0
 800996a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800996e:	2c00      	cmp	r4, #0
 8009970:	d16a      	bne.n	8009a48 <_dtoa_r+0x4e0>
 8009972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009976:	4b61      	ldr	r3, [pc, #388]	@ (8009afc <_dtoa_r+0x594>)
 8009978:	2200      	movs	r2, #0
 800997a:	f7f6 fcad 	bl	80002d8 <__aeabi_dsub>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009986:	462a      	mov	r2, r5
 8009988:	4633      	mov	r3, r6
 800998a:	f7f7 f8ed 	bl	8000b68 <__aeabi_dcmpgt>
 800998e:	2800      	cmp	r0, #0
 8009990:	f040 8298 	bne.w	8009ec4 <_dtoa_r+0x95c>
 8009994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009998:	462a      	mov	r2, r5
 800999a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800999e:	f7f7 f8c5 	bl	8000b2c <__aeabi_dcmplt>
 80099a2:	bb38      	cbnz	r0, 80099f4 <_dtoa_r+0x48c>
 80099a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80099a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f2c0 8157 	blt.w	8009c62 <_dtoa_r+0x6fa>
 80099b4:	2f0e      	cmp	r7, #14
 80099b6:	f300 8154 	bgt.w	8009c62 <_dtoa_r+0x6fa>
 80099ba:	4b4b      	ldr	r3, [pc, #300]	@ (8009ae8 <_dtoa_r+0x580>)
 80099bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099c0:	ed93 7b00 	vldr	d7, [r3]
 80099c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	ed8d 7b00 	vstr	d7, [sp]
 80099cc:	f280 80e5 	bge.w	8009b9a <_dtoa_r+0x632>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f300 80e1 	bgt.w	8009b9a <_dtoa_r+0x632>
 80099d8:	d10c      	bne.n	80099f4 <_dtoa_r+0x48c>
 80099da:	4b48      	ldr	r3, [pc, #288]	@ (8009afc <_dtoa_r+0x594>)
 80099dc:	2200      	movs	r2, #0
 80099de:	ec51 0b17 	vmov	r0, r1, d7
 80099e2:	f7f6 fe31 	bl	8000648 <__aeabi_dmul>
 80099e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ea:	f7f7 f8b3 	bl	8000b54 <__aeabi_dcmpge>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f000 8266 	beq.w	8009ec0 <_dtoa_r+0x958>
 80099f4:	2400      	movs	r4, #0
 80099f6:	4625      	mov	r5, r4
 80099f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099fa:	4656      	mov	r6, sl
 80099fc:	ea6f 0803 	mvn.w	r8, r3
 8009a00:	2700      	movs	r7, #0
 8009a02:	4621      	mov	r1, r4
 8009a04:	4648      	mov	r0, r9
 8009a06:	f000 fcbf 	bl	800a388 <_Bfree>
 8009a0a:	2d00      	cmp	r5, #0
 8009a0c:	f000 80bd 	beq.w	8009b8a <_dtoa_r+0x622>
 8009a10:	b12f      	cbz	r7, 8009a1e <_dtoa_r+0x4b6>
 8009a12:	42af      	cmp	r7, r5
 8009a14:	d003      	beq.n	8009a1e <_dtoa_r+0x4b6>
 8009a16:	4639      	mov	r1, r7
 8009a18:	4648      	mov	r0, r9
 8009a1a:	f000 fcb5 	bl	800a388 <_Bfree>
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4648      	mov	r0, r9
 8009a22:	f000 fcb1 	bl	800a388 <_Bfree>
 8009a26:	e0b0      	b.n	8009b8a <_dtoa_r+0x622>
 8009a28:	07e2      	lsls	r2, r4, #31
 8009a2a:	d505      	bpl.n	8009a38 <_dtoa_r+0x4d0>
 8009a2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a30:	f7f6 fe0a 	bl	8000648 <__aeabi_dmul>
 8009a34:	3601      	adds	r6, #1
 8009a36:	2301      	movs	r3, #1
 8009a38:	1064      	asrs	r4, r4, #1
 8009a3a:	3508      	adds	r5, #8
 8009a3c:	e762      	b.n	8009904 <_dtoa_r+0x39c>
 8009a3e:	2602      	movs	r6, #2
 8009a40:	e765      	b.n	800990e <_dtoa_r+0x3a6>
 8009a42:	9c03      	ldr	r4, [sp, #12]
 8009a44:	46b8      	mov	r8, r7
 8009a46:	e784      	b.n	8009952 <_dtoa_r+0x3ea>
 8009a48:	4b27      	ldr	r3, [pc, #156]	@ (8009ae8 <_dtoa_r+0x580>)
 8009a4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a54:	4454      	add	r4, sl
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d054      	beq.n	8009b04 <_dtoa_r+0x59c>
 8009a5a:	4929      	ldr	r1, [pc, #164]	@ (8009b00 <_dtoa_r+0x598>)
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7f6 ff1d 	bl	800089c <__aeabi_ddiv>
 8009a62:	4633      	mov	r3, r6
 8009a64:	462a      	mov	r2, r5
 8009a66:	f7f6 fc37 	bl	80002d8 <__aeabi_dsub>
 8009a6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a6e:	4656      	mov	r6, sl
 8009a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a74:	f7f7 f898 	bl	8000ba8 <__aeabi_d2iz>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	f7f6 fd7b 	bl	8000574 <__aeabi_i2d>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a86:	f7f6 fc27 	bl	80002d8 <__aeabi_dsub>
 8009a8a:	3530      	adds	r5, #48	@ 0x30
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a94:	f806 5b01 	strb.w	r5, [r6], #1
 8009a98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a9c:	f7f7 f846 	bl	8000b2c <__aeabi_dcmplt>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d172      	bne.n	8009b8a <_dtoa_r+0x622>
 8009aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aa8:	4911      	ldr	r1, [pc, #68]	@ (8009af0 <_dtoa_r+0x588>)
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f7f6 fc14 	bl	80002d8 <__aeabi_dsub>
 8009ab0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ab4:	f7f7 f83a 	bl	8000b2c <__aeabi_dcmplt>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f040 80b4 	bne.w	8009c26 <_dtoa_r+0x6be>
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	f43f af70 	beq.w	80099a4 <_dtoa_r+0x43c>
 8009ac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8009af4 <_dtoa_r+0x58c>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	f7f6 fdbc 	bl	8000648 <__aeabi_dmul>
 8009ad0:	4b08      	ldr	r3, [pc, #32]	@ (8009af4 <_dtoa_r+0x58c>)
 8009ad2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009adc:	f7f6 fdb4 	bl	8000648 <__aeabi_dmul>
 8009ae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ae4:	e7c4      	b.n	8009a70 <_dtoa_r+0x508>
 8009ae6:	bf00      	nop
 8009ae8:	0800e0c8 	.word	0x0800e0c8
 8009aec:	0800e0a0 	.word	0x0800e0a0
 8009af0:	3ff00000 	.word	0x3ff00000
 8009af4:	40240000 	.word	0x40240000
 8009af8:	401c0000 	.word	0x401c0000
 8009afc:	40140000 	.word	0x40140000
 8009b00:	3fe00000 	.word	0x3fe00000
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	f7f6 fd9e 	bl	8000648 <__aeabi_dmul>
 8009b0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b12:	4656      	mov	r6, sl
 8009b14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b18:	f7f7 f846 	bl	8000ba8 <__aeabi_d2iz>
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	f7f6 fd29 	bl	8000574 <__aeabi_i2d>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b2a:	f7f6 fbd5 	bl	80002d8 <__aeabi_dsub>
 8009b2e:	3530      	adds	r5, #48	@ 0x30
 8009b30:	f806 5b01 	strb.w	r5, [r6], #1
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	42a6      	cmp	r6, r4
 8009b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	d124      	bne.n	8009b8e <_dtoa_r+0x626>
 8009b44:	4baf      	ldr	r3, [pc, #700]	@ (8009e04 <_dtoa_r+0x89c>)
 8009b46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b4a:	f7f6 fbc7 	bl	80002dc <__adddf3>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b56:	f7f7 f807 	bl	8000b68 <__aeabi_dcmpgt>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d163      	bne.n	8009c26 <_dtoa_r+0x6be>
 8009b5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b62:	49a8      	ldr	r1, [pc, #672]	@ (8009e04 <_dtoa_r+0x89c>)
 8009b64:	2000      	movs	r0, #0
 8009b66:	f7f6 fbb7 	bl	80002d8 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b72:	f7f6 ffdb 	bl	8000b2c <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f af14 	beq.w	80099a4 <_dtoa_r+0x43c>
 8009b7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b7e:	1e73      	subs	r3, r6, #1
 8009b80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b86:	2b30      	cmp	r3, #48	@ 0x30
 8009b88:	d0f8      	beq.n	8009b7c <_dtoa_r+0x614>
 8009b8a:	4647      	mov	r7, r8
 8009b8c:	e03b      	b.n	8009c06 <_dtoa_r+0x69e>
 8009b8e:	4b9e      	ldr	r3, [pc, #632]	@ (8009e08 <_dtoa_r+0x8a0>)
 8009b90:	f7f6 fd5a 	bl	8000648 <__aeabi_dmul>
 8009b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b98:	e7bc      	b.n	8009b14 <_dtoa_r+0x5ac>
 8009b9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009b9e:	4656      	mov	r6, sl
 8009ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fe78 	bl	800089c <__aeabi_ddiv>
 8009bac:	f7f6 fffc 	bl	8000ba8 <__aeabi_d2iz>
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	f7f6 fcdf 	bl	8000574 <__aeabi_i2d>
 8009bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bba:	f7f6 fd45 	bl	8000648 <__aeabi_dmul>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009bca:	f7f6 fb85 	bl	80002d8 <__aeabi_dsub>
 8009bce:	f806 4b01 	strb.w	r4, [r6], #1
 8009bd2:	9d03      	ldr	r5, [sp, #12]
 8009bd4:	eba6 040a 	sub.w	r4, r6, sl
 8009bd8:	42a5      	cmp	r5, r4
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	d133      	bne.n	8009c48 <_dtoa_r+0x6e0>
 8009be0:	f7f6 fb7c 	bl	80002dc <__adddf3>
 8009be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	f7f6 ffbc 	bl	8000b68 <__aeabi_dcmpgt>
 8009bf0:	b9c0      	cbnz	r0, 8009c24 <_dtoa_r+0x6bc>
 8009bf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7f6 ff8d 	bl	8000b18 <__aeabi_dcmpeq>
 8009bfe:	b110      	cbz	r0, 8009c06 <_dtoa_r+0x69e>
 8009c00:	f018 0f01 	tst.w	r8, #1
 8009c04:	d10e      	bne.n	8009c24 <_dtoa_r+0x6bc>
 8009c06:	9902      	ldr	r1, [sp, #8]
 8009c08:	4648      	mov	r0, r9
 8009c0a:	f000 fbbd 	bl	800a388 <_Bfree>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	7033      	strb	r3, [r6, #0]
 8009c12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c14:	3701      	adds	r7, #1
 8009c16:	601f      	str	r7, [r3, #0]
 8009c18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 824b 	beq.w	800a0b6 <_dtoa_r+0xb4e>
 8009c20:	601e      	str	r6, [r3, #0]
 8009c22:	e248      	b.n	800a0b6 <_dtoa_r+0xb4e>
 8009c24:	46b8      	mov	r8, r7
 8009c26:	4633      	mov	r3, r6
 8009c28:	461e      	mov	r6, r3
 8009c2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c2e:	2a39      	cmp	r2, #57	@ 0x39
 8009c30:	d106      	bne.n	8009c40 <_dtoa_r+0x6d8>
 8009c32:	459a      	cmp	sl, r3
 8009c34:	d1f8      	bne.n	8009c28 <_dtoa_r+0x6c0>
 8009c36:	2230      	movs	r2, #48	@ 0x30
 8009c38:	f108 0801 	add.w	r8, r8, #1
 8009c3c:	f88a 2000 	strb.w	r2, [sl]
 8009c40:	781a      	ldrb	r2, [r3, #0]
 8009c42:	3201      	adds	r2, #1
 8009c44:	701a      	strb	r2, [r3, #0]
 8009c46:	e7a0      	b.n	8009b8a <_dtoa_r+0x622>
 8009c48:	4b6f      	ldr	r3, [pc, #444]	@ (8009e08 <_dtoa_r+0x8a0>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f7f6 fcfc 	bl	8000648 <__aeabi_dmul>
 8009c50:	2200      	movs	r2, #0
 8009c52:	2300      	movs	r3, #0
 8009c54:	4604      	mov	r4, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	f7f6 ff5e 	bl	8000b18 <__aeabi_dcmpeq>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d09f      	beq.n	8009ba0 <_dtoa_r+0x638>
 8009c60:	e7d1      	b.n	8009c06 <_dtoa_r+0x69e>
 8009c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	f000 80ea 	beq.w	8009e3e <_dtoa_r+0x8d6>
 8009c6a:	9a07      	ldr	r2, [sp, #28]
 8009c6c:	2a01      	cmp	r2, #1
 8009c6e:	f300 80cd 	bgt.w	8009e0c <_dtoa_r+0x8a4>
 8009c72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c74:	2a00      	cmp	r2, #0
 8009c76:	f000 80c1 	beq.w	8009dfc <_dtoa_r+0x894>
 8009c7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c7e:	9c08      	ldr	r4, [sp, #32]
 8009c80:	9e00      	ldr	r6, [sp, #0]
 8009c82:	9a00      	ldr	r2, [sp, #0]
 8009c84:	441a      	add	r2, r3
 8009c86:	9200      	str	r2, [sp, #0]
 8009c88:	9a06      	ldr	r2, [sp, #24]
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	441a      	add	r2, r3
 8009c8e:	4648      	mov	r0, r9
 8009c90:	9206      	str	r2, [sp, #24]
 8009c92:	f000 fc77 	bl	800a584 <__i2b>
 8009c96:	4605      	mov	r5, r0
 8009c98:	b166      	cbz	r6, 8009cb4 <_dtoa_r+0x74c>
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd09      	ble.n	8009cb4 <_dtoa_r+0x74c>
 8009ca0:	42b3      	cmp	r3, r6
 8009ca2:	9a00      	ldr	r2, [sp, #0]
 8009ca4:	bfa8      	it	ge
 8009ca6:	4633      	movge	r3, r6
 8009ca8:	1ad2      	subs	r2, r2, r3
 8009caa:	9200      	str	r2, [sp, #0]
 8009cac:	9a06      	ldr	r2, [sp, #24]
 8009cae:	1af6      	subs	r6, r6, r3
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	9306      	str	r3, [sp, #24]
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	b30b      	cbz	r3, 8009cfc <_dtoa_r+0x794>
 8009cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 80c6 	beq.w	8009e4c <_dtoa_r+0x8e4>
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	f000 80c0 	beq.w	8009e46 <_dtoa_r+0x8de>
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4648      	mov	r0, r9
 8009ccc:	f000 fd12 	bl	800a6f4 <__pow5mult>
 8009cd0:	9a02      	ldr	r2, [sp, #8]
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	4648      	mov	r0, r9
 8009cd8:	f000 fc6a 	bl	800a5b0 <__multiply>
 8009cdc:	9902      	ldr	r1, [sp, #8]
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4648      	mov	r0, r9
 8009ce2:	f000 fb51 	bl	800a388 <_Bfree>
 8009ce6:	9b08      	ldr	r3, [sp, #32]
 8009ce8:	1b1b      	subs	r3, r3, r4
 8009cea:	9308      	str	r3, [sp, #32]
 8009cec:	f000 80b1 	beq.w	8009e52 <_dtoa_r+0x8ea>
 8009cf0:	9a08      	ldr	r2, [sp, #32]
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	f000 fcfd 	bl	800a6f4 <__pow5mult>
 8009cfa:	9002      	str	r0, [sp, #8]
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	4648      	mov	r0, r9
 8009d00:	f000 fc40 	bl	800a584 <__i2b>
 8009d04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d06:	4604      	mov	r4, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 81d8 	beq.w	800a0be <_dtoa_r+0xb56>
 8009d0e:	461a      	mov	r2, r3
 8009d10:	4601      	mov	r1, r0
 8009d12:	4648      	mov	r0, r9
 8009d14:	f000 fcee 	bl	800a6f4 <__pow5mult>
 8009d18:	9b07      	ldr	r3, [sp, #28]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	f300 809f 	bgt.w	8009e60 <_dtoa_r+0x8f8>
 8009d22:	9b04      	ldr	r3, [sp, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f040 8097 	bne.w	8009e58 <_dtoa_r+0x8f0>
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f040 8093 	bne.w	8009e5c <_dtoa_r+0x8f4>
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d3c:	0d1b      	lsrs	r3, r3, #20
 8009d3e:	051b      	lsls	r3, r3, #20
 8009d40:	b133      	cbz	r3, 8009d50 <_dtoa_r+0x7e8>
 8009d42:	9b00      	ldr	r3, [sp, #0]
 8009d44:	3301      	adds	r3, #1
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	9b06      	ldr	r3, [sp, #24]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	9306      	str	r3, [sp, #24]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9308      	str	r3, [sp, #32]
 8009d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 81b8 	beq.w	800a0ca <_dtoa_r+0xb62>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d60:	6918      	ldr	r0, [r3, #16]
 8009d62:	f000 fbc3 	bl	800a4ec <__hi0bits>
 8009d66:	f1c0 0020 	rsb	r0, r0, #32
 8009d6a:	9b06      	ldr	r3, [sp, #24]
 8009d6c:	4418      	add	r0, r3
 8009d6e:	f010 001f 	ands.w	r0, r0, #31
 8009d72:	f000 8082 	beq.w	8009e7a <_dtoa_r+0x912>
 8009d76:	f1c0 0320 	rsb	r3, r0, #32
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	dd73      	ble.n	8009e66 <_dtoa_r+0x8fe>
 8009d7e:	9b00      	ldr	r3, [sp, #0]
 8009d80:	f1c0 001c 	rsb	r0, r0, #28
 8009d84:	4403      	add	r3, r0
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	4403      	add	r3, r0
 8009d8c:	4406      	add	r6, r0
 8009d8e:	9306      	str	r3, [sp, #24]
 8009d90:	9b00      	ldr	r3, [sp, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dd05      	ble.n	8009da2 <_dtoa_r+0x83a>
 8009d96:	9902      	ldr	r1, [sp, #8]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4648      	mov	r0, r9
 8009d9c:	f000 fd04 	bl	800a7a8 <__lshift>
 8009da0:	9002      	str	r0, [sp, #8]
 8009da2:	9b06      	ldr	r3, [sp, #24]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dd05      	ble.n	8009db4 <_dtoa_r+0x84c>
 8009da8:	4621      	mov	r1, r4
 8009daa:	461a      	mov	r2, r3
 8009dac:	4648      	mov	r0, r9
 8009dae:	f000 fcfb 	bl	800a7a8 <__lshift>
 8009db2:	4604      	mov	r4, r0
 8009db4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d061      	beq.n	8009e7e <_dtoa_r+0x916>
 8009dba:	9802      	ldr	r0, [sp, #8]
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	f000 fd5f 	bl	800a880 <__mcmp>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	da5b      	bge.n	8009e7e <_dtoa_r+0x916>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9902      	ldr	r1, [sp, #8]
 8009dca:	220a      	movs	r2, #10
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f000 fafd 	bl	800a3cc <__multadd>
 8009dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd4:	9002      	str	r0, [sp, #8]
 8009dd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 8177 	beq.w	800a0ce <_dtoa_r+0xb66>
 8009de0:	4629      	mov	r1, r5
 8009de2:	2300      	movs	r3, #0
 8009de4:	220a      	movs	r2, #10
 8009de6:	4648      	mov	r0, r9
 8009de8:	f000 faf0 	bl	800a3cc <__multadd>
 8009dec:	f1bb 0f00 	cmp.w	fp, #0
 8009df0:	4605      	mov	r5, r0
 8009df2:	dc6f      	bgt.n	8009ed4 <_dtoa_r+0x96c>
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	dc49      	bgt.n	8009e8e <_dtoa_r+0x926>
 8009dfa:	e06b      	b.n	8009ed4 <_dtoa_r+0x96c>
 8009dfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009dfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e02:	e73c      	b.n	8009c7e <_dtoa_r+0x716>
 8009e04:	3fe00000 	.word	0x3fe00000
 8009e08:	40240000 	.word	0x40240000
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	1e5c      	subs	r4, r3, #1
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	db09      	blt.n	8009e2a <_dtoa_r+0x8c2>
 8009e16:	1b1c      	subs	r4, r3, r4
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f6bf af30 	bge.w	8009c80 <_dtoa_r+0x718>
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	9a03      	ldr	r2, [sp, #12]
 8009e24:	1a9e      	subs	r6, r3, r2
 8009e26:	2300      	movs	r3, #0
 8009e28:	e72b      	b.n	8009c82 <_dtoa_r+0x71a>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e2e:	9408      	str	r4, [sp, #32]
 8009e30:	1ae3      	subs	r3, r4, r3
 8009e32:	441a      	add	r2, r3
 8009e34:	9e00      	ldr	r6, [sp, #0]
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e3a:	2400      	movs	r4, #0
 8009e3c:	e721      	b.n	8009c82 <_dtoa_r+0x71a>
 8009e3e:	9c08      	ldr	r4, [sp, #32]
 8009e40:	9e00      	ldr	r6, [sp, #0]
 8009e42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009e44:	e728      	b.n	8009c98 <_dtoa_r+0x730>
 8009e46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009e4a:	e751      	b.n	8009cf0 <_dtoa_r+0x788>
 8009e4c:	9a08      	ldr	r2, [sp, #32]
 8009e4e:	9902      	ldr	r1, [sp, #8]
 8009e50:	e750      	b.n	8009cf4 <_dtoa_r+0x78c>
 8009e52:	f8cd 8008 	str.w	r8, [sp, #8]
 8009e56:	e751      	b.n	8009cfc <_dtoa_r+0x794>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e779      	b.n	8009d50 <_dtoa_r+0x7e8>
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	e777      	b.n	8009d50 <_dtoa_r+0x7e8>
 8009e60:	2300      	movs	r3, #0
 8009e62:	9308      	str	r3, [sp, #32]
 8009e64:	e779      	b.n	8009d5a <_dtoa_r+0x7f2>
 8009e66:	d093      	beq.n	8009d90 <_dtoa_r+0x828>
 8009e68:	9a00      	ldr	r2, [sp, #0]
 8009e6a:	331c      	adds	r3, #28
 8009e6c:	441a      	add	r2, r3
 8009e6e:	9200      	str	r2, [sp, #0]
 8009e70:	9a06      	ldr	r2, [sp, #24]
 8009e72:	441a      	add	r2, r3
 8009e74:	441e      	add	r6, r3
 8009e76:	9206      	str	r2, [sp, #24]
 8009e78:	e78a      	b.n	8009d90 <_dtoa_r+0x828>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e7f4      	b.n	8009e68 <_dtoa_r+0x900>
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	46b8      	mov	r8, r7
 8009e84:	dc20      	bgt.n	8009ec8 <_dtoa_r+0x960>
 8009e86:	469b      	mov	fp, r3
 8009e88:	9b07      	ldr	r3, [sp, #28]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	dd1e      	ble.n	8009ecc <_dtoa_r+0x964>
 8009e8e:	f1bb 0f00 	cmp.w	fp, #0
 8009e92:	f47f adb1 	bne.w	80099f8 <_dtoa_r+0x490>
 8009e96:	4621      	mov	r1, r4
 8009e98:	465b      	mov	r3, fp
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	4648      	mov	r0, r9
 8009e9e:	f000 fa95 	bl	800a3cc <__multadd>
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	9802      	ldr	r0, [sp, #8]
 8009ea8:	f000 fcea 	bl	800a880 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f77f ada3 	ble.w	80099f8 <_dtoa_r+0x490>
 8009eb2:	4656      	mov	r6, sl
 8009eb4:	2331      	movs	r3, #49	@ 0x31
 8009eb6:	f806 3b01 	strb.w	r3, [r6], #1
 8009eba:	f108 0801 	add.w	r8, r8, #1
 8009ebe:	e59f      	b.n	8009a00 <_dtoa_r+0x498>
 8009ec0:	9c03      	ldr	r4, [sp, #12]
 8009ec2:	46b8      	mov	r8, r7
 8009ec4:	4625      	mov	r5, r4
 8009ec6:	e7f4      	b.n	8009eb2 <_dtoa_r+0x94a>
 8009ec8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 8101 	beq.w	800a0d6 <_dtoa_r+0xb6e>
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	dd05      	ble.n	8009ee4 <_dtoa_r+0x97c>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4632      	mov	r2, r6
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 fc63 	bl	800a7a8 <__lshift>
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	9b08      	ldr	r3, [sp, #32]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d05c      	beq.n	8009fa4 <_dtoa_r+0xa3c>
 8009eea:	6869      	ldr	r1, [r5, #4]
 8009eec:	4648      	mov	r0, r9
 8009eee:	f000 fa0b 	bl	800a308 <_Balloc>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	b928      	cbnz	r0, 8009f02 <_dtoa_r+0x99a>
 8009ef6:	4b82      	ldr	r3, [pc, #520]	@ (800a100 <_dtoa_r+0xb98>)
 8009ef8:	4602      	mov	r2, r0
 8009efa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009efe:	f7ff bb4a 	b.w	8009596 <_dtoa_r+0x2e>
 8009f02:	692a      	ldr	r2, [r5, #16]
 8009f04:	3202      	adds	r2, #2
 8009f06:	0092      	lsls	r2, r2, #2
 8009f08:	f105 010c 	add.w	r1, r5, #12
 8009f0c:	300c      	adds	r0, #12
 8009f0e:	f001 ff69 	bl	800bde4 <memcpy>
 8009f12:	2201      	movs	r2, #1
 8009f14:	4631      	mov	r1, r6
 8009f16:	4648      	mov	r0, r9
 8009f18:	f000 fc46 	bl	800a7a8 <__lshift>
 8009f1c:	f10a 0301 	add.w	r3, sl, #1
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	eb0a 030b 	add.w	r3, sl, fp
 8009f26:	9308      	str	r3, [sp, #32]
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	462f      	mov	r7, r5
 8009f30:	9306      	str	r3, [sp, #24]
 8009f32:	4605      	mov	r5, r0
 8009f34:	9b00      	ldr	r3, [sp, #0]
 8009f36:	9802      	ldr	r0, [sp, #8]
 8009f38:	4621      	mov	r1, r4
 8009f3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f3e:	f7ff fa8b 	bl	8009458 <quorem>
 8009f42:	4603      	mov	r3, r0
 8009f44:	3330      	adds	r3, #48	@ 0x30
 8009f46:	9003      	str	r0, [sp, #12]
 8009f48:	4639      	mov	r1, r7
 8009f4a:	9802      	ldr	r0, [sp, #8]
 8009f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4e:	f000 fc97 	bl	800a880 <__mcmp>
 8009f52:	462a      	mov	r2, r5
 8009f54:	9004      	str	r0, [sp, #16]
 8009f56:	4621      	mov	r1, r4
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f000 fcad 	bl	800a8b8 <__mdiff>
 8009f5e:	68c2      	ldr	r2, [r0, #12]
 8009f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f62:	4606      	mov	r6, r0
 8009f64:	bb02      	cbnz	r2, 8009fa8 <_dtoa_r+0xa40>
 8009f66:	4601      	mov	r1, r0
 8009f68:	9802      	ldr	r0, [sp, #8]
 8009f6a:	f000 fc89 	bl	800a880 <__mcmp>
 8009f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f70:	4602      	mov	r2, r0
 8009f72:	4631      	mov	r1, r6
 8009f74:	4648      	mov	r0, r9
 8009f76:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7a:	f000 fa05 	bl	800a388 <_Bfree>
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f82:	9e00      	ldr	r6, [sp, #0]
 8009f84:	ea42 0103 	orr.w	r1, r2, r3
 8009f88:	9b06      	ldr	r3, [sp, #24]
 8009f8a:	4319      	orrs	r1, r3
 8009f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f8e:	d10d      	bne.n	8009fac <_dtoa_r+0xa44>
 8009f90:	2b39      	cmp	r3, #57	@ 0x39
 8009f92:	d027      	beq.n	8009fe4 <_dtoa_r+0xa7c>
 8009f94:	9a04      	ldr	r2, [sp, #16]
 8009f96:	2a00      	cmp	r2, #0
 8009f98:	dd01      	ble.n	8009f9e <_dtoa_r+0xa36>
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	3331      	adds	r3, #49	@ 0x31
 8009f9e:	f88b 3000 	strb.w	r3, [fp]
 8009fa2:	e52e      	b.n	8009a02 <_dtoa_r+0x49a>
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	e7b9      	b.n	8009f1c <_dtoa_r+0x9b4>
 8009fa8:	2201      	movs	r2, #1
 8009faa:	e7e2      	b.n	8009f72 <_dtoa_r+0xa0a>
 8009fac:	9904      	ldr	r1, [sp, #16]
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	db04      	blt.n	8009fbc <_dtoa_r+0xa54>
 8009fb2:	9807      	ldr	r0, [sp, #28]
 8009fb4:	4301      	orrs	r1, r0
 8009fb6:	9806      	ldr	r0, [sp, #24]
 8009fb8:	4301      	orrs	r1, r0
 8009fba:	d120      	bne.n	8009ffe <_dtoa_r+0xa96>
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	ddee      	ble.n	8009f9e <_dtoa_r+0xa36>
 8009fc0:	9902      	ldr	r1, [sp, #8]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f000 fbee 	bl	800a7a8 <__lshift>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	9002      	str	r0, [sp, #8]
 8009fd0:	f000 fc56 	bl	800a880 <__mcmp>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	dc02      	bgt.n	8009fe0 <_dtoa_r+0xa78>
 8009fda:	d1e0      	bne.n	8009f9e <_dtoa_r+0xa36>
 8009fdc:	07da      	lsls	r2, r3, #31
 8009fde:	d5de      	bpl.n	8009f9e <_dtoa_r+0xa36>
 8009fe0:	2b39      	cmp	r3, #57	@ 0x39
 8009fe2:	d1da      	bne.n	8009f9a <_dtoa_r+0xa32>
 8009fe4:	2339      	movs	r3, #57	@ 0x39
 8009fe6:	f88b 3000 	strb.w	r3, [fp]
 8009fea:	4633      	mov	r3, r6
 8009fec:	461e      	mov	r6, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ff4:	2a39      	cmp	r2, #57	@ 0x39
 8009ff6:	d04e      	beq.n	800a096 <_dtoa_r+0xb2e>
 8009ff8:	3201      	adds	r2, #1
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e501      	b.n	8009a02 <_dtoa_r+0x49a>
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	dd03      	ble.n	800a00a <_dtoa_r+0xaa2>
 800a002:	2b39      	cmp	r3, #57	@ 0x39
 800a004:	d0ee      	beq.n	8009fe4 <_dtoa_r+0xa7c>
 800a006:	3301      	adds	r3, #1
 800a008:	e7c9      	b.n	8009f9e <_dtoa_r+0xa36>
 800a00a:	9a00      	ldr	r2, [sp, #0]
 800a00c:	9908      	ldr	r1, [sp, #32]
 800a00e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a012:	428a      	cmp	r2, r1
 800a014:	d028      	beq.n	800a068 <_dtoa_r+0xb00>
 800a016:	9902      	ldr	r1, [sp, #8]
 800a018:	2300      	movs	r3, #0
 800a01a:	220a      	movs	r2, #10
 800a01c:	4648      	mov	r0, r9
 800a01e:	f000 f9d5 	bl	800a3cc <__multadd>
 800a022:	42af      	cmp	r7, r5
 800a024:	9002      	str	r0, [sp, #8]
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	f04f 020a 	mov.w	r2, #10
 800a02e:	4639      	mov	r1, r7
 800a030:	4648      	mov	r0, r9
 800a032:	d107      	bne.n	800a044 <_dtoa_r+0xadc>
 800a034:	f000 f9ca 	bl	800a3cc <__multadd>
 800a038:	4607      	mov	r7, r0
 800a03a:	4605      	mov	r5, r0
 800a03c:	9b00      	ldr	r3, [sp, #0]
 800a03e:	3301      	adds	r3, #1
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	e777      	b.n	8009f34 <_dtoa_r+0x9cc>
 800a044:	f000 f9c2 	bl	800a3cc <__multadd>
 800a048:	4629      	mov	r1, r5
 800a04a:	4607      	mov	r7, r0
 800a04c:	2300      	movs	r3, #0
 800a04e:	220a      	movs	r2, #10
 800a050:	4648      	mov	r0, r9
 800a052:	f000 f9bb 	bl	800a3cc <__multadd>
 800a056:	4605      	mov	r5, r0
 800a058:	e7f0      	b.n	800a03c <_dtoa_r+0xad4>
 800a05a:	f1bb 0f00 	cmp.w	fp, #0
 800a05e:	bfcc      	ite	gt
 800a060:	465e      	movgt	r6, fp
 800a062:	2601      	movle	r6, #1
 800a064:	4456      	add	r6, sl
 800a066:	2700      	movs	r7, #0
 800a068:	9902      	ldr	r1, [sp, #8]
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	2201      	movs	r2, #1
 800a06e:	4648      	mov	r0, r9
 800a070:	f000 fb9a 	bl	800a7a8 <__lshift>
 800a074:	4621      	mov	r1, r4
 800a076:	9002      	str	r0, [sp, #8]
 800a078:	f000 fc02 	bl	800a880 <__mcmp>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	dcb4      	bgt.n	8009fea <_dtoa_r+0xa82>
 800a080:	d102      	bne.n	800a088 <_dtoa_r+0xb20>
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	07db      	lsls	r3, r3, #31
 800a086:	d4b0      	bmi.n	8009fea <_dtoa_r+0xa82>
 800a088:	4633      	mov	r3, r6
 800a08a:	461e      	mov	r6, r3
 800a08c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a090:	2a30      	cmp	r2, #48	@ 0x30
 800a092:	d0fa      	beq.n	800a08a <_dtoa_r+0xb22>
 800a094:	e4b5      	b.n	8009a02 <_dtoa_r+0x49a>
 800a096:	459a      	cmp	sl, r3
 800a098:	d1a8      	bne.n	8009fec <_dtoa_r+0xa84>
 800a09a:	2331      	movs	r3, #49	@ 0x31
 800a09c:	f108 0801 	add.w	r8, r8, #1
 800a0a0:	f88a 3000 	strb.w	r3, [sl]
 800a0a4:	e4ad      	b.n	8009a02 <_dtoa_r+0x49a>
 800a0a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a104 <_dtoa_r+0xb9c>
 800a0ac:	b11b      	cbz	r3, 800a0b6 <_dtoa_r+0xb4e>
 800a0ae:	f10a 0308 	add.w	r3, sl, #8
 800a0b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	b017      	add	sp, #92	@ 0x5c
 800a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0be:	9b07      	ldr	r3, [sp, #28]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	f77f ae2e 	ble.w	8009d22 <_dtoa_r+0x7ba>
 800a0c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0c8:	9308      	str	r3, [sp, #32]
 800a0ca:	2001      	movs	r0, #1
 800a0cc:	e64d      	b.n	8009d6a <_dtoa_r+0x802>
 800a0ce:	f1bb 0f00 	cmp.w	fp, #0
 800a0d2:	f77f aed9 	ble.w	8009e88 <_dtoa_r+0x920>
 800a0d6:	4656      	mov	r6, sl
 800a0d8:	9802      	ldr	r0, [sp, #8]
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f7ff f9bc 	bl	8009458 <quorem>
 800a0e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a0e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0e8:	eba6 020a 	sub.w	r2, r6, sl
 800a0ec:	4593      	cmp	fp, r2
 800a0ee:	ddb4      	ble.n	800a05a <_dtoa_r+0xaf2>
 800a0f0:	9902      	ldr	r1, [sp, #8]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4648      	mov	r0, r9
 800a0f8:	f000 f968 	bl	800a3cc <__multadd>
 800a0fc:	9002      	str	r0, [sp, #8]
 800a0fe:	e7eb      	b.n	800a0d8 <_dtoa_r+0xb70>
 800a100:	0800df6d 	.word	0x0800df6d
 800a104:	0800def1 	.word	0x0800def1

0800a108 <_free_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4605      	mov	r5, r0
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d041      	beq.n	800a194 <_free_r+0x8c>
 800a110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a114:	1f0c      	subs	r4, r1, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	bfb8      	it	lt
 800a11a:	18e4      	addlt	r4, r4, r3
 800a11c:	f000 f8e8 	bl	800a2f0 <__malloc_lock>
 800a120:	4a1d      	ldr	r2, [pc, #116]	@ (800a198 <_free_r+0x90>)
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	b933      	cbnz	r3, 800a134 <_free_r+0x2c>
 800a126:	6063      	str	r3, [r4, #4]
 800a128:	6014      	str	r4, [r2, #0]
 800a12a:	4628      	mov	r0, r5
 800a12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a130:	f000 b8e4 	b.w	800a2fc <__malloc_unlock>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d908      	bls.n	800a14a <_free_r+0x42>
 800a138:	6820      	ldr	r0, [r4, #0]
 800a13a:	1821      	adds	r1, r4, r0
 800a13c:	428b      	cmp	r3, r1
 800a13e:	bf01      	itttt	eq
 800a140:	6819      	ldreq	r1, [r3, #0]
 800a142:	685b      	ldreq	r3, [r3, #4]
 800a144:	1809      	addeq	r1, r1, r0
 800a146:	6021      	streq	r1, [r4, #0]
 800a148:	e7ed      	b.n	800a126 <_free_r+0x1e>
 800a14a:	461a      	mov	r2, r3
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b10b      	cbz	r3, 800a154 <_free_r+0x4c>
 800a150:	42a3      	cmp	r3, r4
 800a152:	d9fa      	bls.n	800a14a <_free_r+0x42>
 800a154:	6811      	ldr	r1, [r2, #0]
 800a156:	1850      	adds	r0, r2, r1
 800a158:	42a0      	cmp	r0, r4
 800a15a:	d10b      	bne.n	800a174 <_free_r+0x6c>
 800a15c:	6820      	ldr	r0, [r4, #0]
 800a15e:	4401      	add	r1, r0
 800a160:	1850      	adds	r0, r2, r1
 800a162:	4283      	cmp	r3, r0
 800a164:	6011      	str	r1, [r2, #0]
 800a166:	d1e0      	bne.n	800a12a <_free_r+0x22>
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	6053      	str	r3, [r2, #4]
 800a16e:	4408      	add	r0, r1
 800a170:	6010      	str	r0, [r2, #0]
 800a172:	e7da      	b.n	800a12a <_free_r+0x22>
 800a174:	d902      	bls.n	800a17c <_free_r+0x74>
 800a176:	230c      	movs	r3, #12
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	e7d6      	b.n	800a12a <_free_r+0x22>
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	1821      	adds	r1, r4, r0
 800a180:	428b      	cmp	r3, r1
 800a182:	bf04      	itt	eq
 800a184:	6819      	ldreq	r1, [r3, #0]
 800a186:	685b      	ldreq	r3, [r3, #4]
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	bf04      	itt	eq
 800a18c:	1809      	addeq	r1, r1, r0
 800a18e:	6021      	streq	r1, [r4, #0]
 800a190:	6054      	str	r4, [r2, #4]
 800a192:	e7ca      	b.n	800a12a <_free_r+0x22>
 800a194:	bd38      	pop	{r3, r4, r5, pc}
 800a196:	bf00      	nop
 800a198:	20000734 	.word	0x20000734

0800a19c <malloc>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	@ (800a1a8 <malloc+0xc>)
 800a19e:	4601      	mov	r1, r0
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	f000 b825 	b.w	800a1f0 <_malloc_r>
 800a1a6:	bf00      	nop
 800a1a8:	20000040 	.word	0x20000040

0800a1ac <sbrk_aligned>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a1ec <sbrk_aligned+0x40>)
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	6831      	ldr	r1, [r6, #0]
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	b911      	cbnz	r1, 800a1be <sbrk_aligned+0x12>
 800a1b8:	f001 fe04 	bl	800bdc4 <_sbrk_r>
 800a1bc:	6030      	str	r0, [r6, #0]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f001 fdff 	bl	800bdc4 <_sbrk_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d103      	bne.n	800a1d2 <sbrk_aligned+0x26>
 800a1ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d0f8      	beq.n	800a1ce <sbrk_aligned+0x22>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f001 fdf0 	bl	800bdc4 <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d1f2      	bne.n	800a1ce <sbrk_aligned+0x22>
 800a1e8:	e7ef      	b.n	800a1ca <sbrk_aligned+0x1e>
 800a1ea:	bf00      	nop
 800a1ec:	20000730 	.word	0x20000730

0800a1f0 <_malloc_r>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	1ccd      	adds	r5, r1, #3
 800a1f6:	f025 0503 	bic.w	r5, r5, #3
 800a1fa:	3508      	adds	r5, #8
 800a1fc:	2d0c      	cmp	r5, #12
 800a1fe:	bf38      	it	cc
 800a200:	250c      	movcc	r5, #12
 800a202:	2d00      	cmp	r5, #0
 800a204:	4606      	mov	r6, r0
 800a206:	db01      	blt.n	800a20c <_malloc_r+0x1c>
 800a208:	42a9      	cmp	r1, r5
 800a20a:	d904      	bls.n	800a216 <_malloc_r+0x26>
 800a20c:	230c      	movs	r3, #12
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	2000      	movs	r0, #0
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2ec <_malloc_r+0xfc>
 800a21a:	f000 f869 	bl	800a2f0 <__malloc_lock>
 800a21e:	f8d8 3000 	ldr.w	r3, [r8]
 800a222:	461c      	mov	r4, r3
 800a224:	bb44      	cbnz	r4, 800a278 <_malloc_r+0x88>
 800a226:	4629      	mov	r1, r5
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff ffbf 	bl	800a1ac <sbrk_aligned>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	4604      	mov	r4, r0
 800a232:	d158      	bne.n	800a2e6 <_malloc_r+0xf6>
 800a234:	f8d8 4000 	ldr.w	r4, [r8]
 800a238:	4627      	mov	r7, r4
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	d143      	bne.n	800a2c6 <_malloc_r+0xd6>
 800a23e:	2c00      	cmp	r4, #0
 800a240:	d04b      	beq.n	800a2da <_malloc_r+0xea>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	4639      	mov	r1, r7
 800a246:	4630      	mov	r0, r6
 800a248:	eb04 0903 	add.w	r9, r4, r3
 800a24c:	f001 fdba 	bl	800bdc4 <_sbrk_r>
 800a250:	4581      	cmp	r9, r0
 800a252:	d142      	bne.n	800a2da <_malloc_r+0xea>
 800a254:	6821      	ldr	r1, [r4, #0]
 800a256:	1a6d      	subs	r5, r5, r1
 800a258:	4629      	mov	r1, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ffa6 	bl	800a1ac <sbrk_aligned>
 800a260:	3001      	adds	r0, #1
 800a262:	d03a      	beq.n	800a2da <_malloc_r+0xea>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	442b      	add	r3, r5
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	f8d8 3000 	ldr.w	r3, [r8]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	bb62      	cbnz	r2, 800a2cc <_malloc_r+0xdc>
 800a272:	f8c8 7000 	str.w	r7, [r8]
 800a276:	e00f      	b.n	800a298 <_malloc_r+0xa8>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	1b52      	subs	r2, r2, r5
 800a27c:	d420      	bmi.n	800a2c0 <_malloc_r+0xd0>
 800a27e:	2a0b      	cmp	r2, #11
 800a280:	d917      	bls.n	800a2b2 <_malloc_r+0xc2>
 800a282:	1961      	adds	r1, r4, r5
 800a284:	42a3      	cmp	r3, r4
 800a286:	6025      	str	r5, [r4, #0]
 800a288:	bf18      	it	ne
 800a28a:	6059      	strne	r1, [r3, #4]
 800a28c:	6863      	ldr	r3, [r4, #4]
 800a28e:	bf08      	it	eq
 800a290:	f8c8 1000 	streq.w	r1, [r8]
 800a294:	5162      	str	r2, [r4, r5]
 800a296:	604b      	str	r3, [r1, #4]
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f82f 	bl	800a2fc <__malloc_unlock>
 800a29e:	f104 000b 	add.w	r0, r4, #11
 800a2a2:	1d23      	adds	r3, r4, #4
 800a2a4:	f020 0007 	bic.w	r0, r0, #7
 800a2a8:	1ac2      	subs	r2, r0, r3
 800a2aa:	bf1c      	itt	ne
 800a2ac:	1a1b      	subne	r3, r3, r0
 800a2ae:	50a3      	strne	r3, [r4, r2]
 800a2b0:	e7af      	b.n	800a212 <_malloc_r+0x22>
 800a2b2:	6862      	ldr	r2, [r4, #4]
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	bf0c      	ite	eq
 800a2b8:	f8c8 2000 	streq.w	r2, [r8]
 800a2bc:	605a      	strne	r2, [r3, #4]
 800a2be:	e7eb      	b.n	800a298 <_malloc_r+0xa8>
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	6864      	ldr	r4, [r4, #4]
 800a2c4:	e7ae      	b.n	800a224 <_malloc_r+0x34>
 800a2c6:	463c      	mov	r4, r7
 800a2c8:	687f      	ldr	r7, [r7, #4]
 800a2ca:	e7b6      	b.n	800a23a <_malloc_r+0x4a>
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	d1fb      	bne.n	800a2cc <_malloc_r+0xdc>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6053      	str	r3, [r2, #4]
 800a2d8:	e7de      	b.n	800a298 <_malloc_r+0xa8>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	6033      	str	r3, [r6, #0]
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f000 f80c 	bl	800a2fc <__malloc_unlock>
 800a2e4:	e794      	b.n	800a210 <_malloc_r+0x20>
 800a2e6:	6005      	str	r5, [r0, #0]
 800a2e8:	e7d6      	b.n	800a298 <_malloc_r+0xa8>
 800a2ea:	bf00      	nop
 800a2ec:	20000734 	.word	0x20000734

0800a2f0 <__malloc_lock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	@ (800a2f8 <__malloc_lock+0x8>)
 800a2f2:	f7ff b8a8 	b.w	8009446 <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	2000072c 	.word	0x2000072c

0800a2fc <__malloc_unlock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	@ (800a304 <__malloc_unlock+0x8>)
 800a2fe:	f7ff b8a3 	b.w	8009448 <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	2000072c 	.word	0x2000072c

0800a308 <_Balloc>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	69c6      	ldr	r6, [r0, #28]
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	b976      	cbnz	r6, 800a330 <_Balloc+0x28>
 800a312:	2010      	movs	r0, #16
 800a314:	f7ff ff42 	bl	800a19c <malloc>
 800a318:	4602      	mov	r2, r0
 800a31a:	61e0      	str	r0, [r4, #28]
 800a31c:	b920      	cbnz	r0, 800a328 <_Balloc+0x20>
 800a31e:	4b18      	ldr	r3, [pc, #96]	@ (800a380 <_Balloc+0x78>)
 800a320:	4818      	ldr	r0, [pc, #96]	@ (800a384 <_Balloc+0x7c>)
 800a322:	216b      	movs	r1, #107	@ 0x6b
 800a324:	f001 fd74 	bl	800be10 <__assert_func>
 800a328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a32c:	6006      	str	r6, [r0, #0]
 800a32e:	60c6      	str	r6, [r0, #12]
 800a330:	69e6      	ldr	r6, [r4, #28]
 800a332:	68f3      	ldr	r3, [r6, #12]
 800a334:	b183      	cbz	r3, 800a358 <_Balloc+0x50>
 800a336:	69e3      	ldr	r3, [r4, #28]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a33e:	b9b8      	cbnz	r0, 800a370 <_Balloc+0x68>
 800a340:	2101      	movs	r1, #1
 800a342:	fa01 f605 	lsl.w	r6, r1, r5
 800a346:	1d72      	adds	r2, r6, #5
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	4620      	mov	r0, r4
 800a34c:	f001 fd7e 	bl	800be4c <_calloc_r>
 800a350:	b160      	cbz	r0, 800a36c <_Balloc+0x64>
 800a352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a356:	e00e      	b.n	800a376 <_Balloc+0x6e>
 800a358:	2221      	movs	r2, #33	@ 0x21
 800a35a:	2104      	movs	r1, #4
 800a35c:	4620      	mov	r0, r4
 800a35e:	f001 fd75 	bl	800be4c <_calloc_r>
 800a362:	69e3      	ldr	r3, [r4, #28]
 800a364:	60f0      	str	r0, [r6, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e4      	bne.n	800a336 <_Balloc+0x2e>
 800a36c:	2000      	movs	r0, #0
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	6802      	ldr	r2, [r0, #0]
 800a372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a376:	2300      	movs	r3, #0
 800a378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a37c:	e7f7      	b.n	800a36e <_Balloc+0x66>
 800a37e:	bf00      	nop
 800a380:	0800defe 	.word	0x0800defe
 800a384:	0800df7e 	.word	0x0800df7e

0800a388 <_Bfree>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	69c6      	ldr	r6, [r0, #28]
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b976      	cbnz	r6, 800a3b0 <_Bfree+0x28>
 800a392:	2010      	movs	r0, #16
 800a394:	f7ff ff02 	bl	800a19c <malloc>
 800a398:	4602      	mov	r2, r0
 800a39a:	61e8      	str	r0, [r5, #28]
 800a39c:	b920      	cbnz	r0, 800a3a8 <_Bfree+0x20>
 800a39e:	4b09      	ldr	r3, [pc, #36]	@ (800a3c4 <_Bfree+0x3c>)
 800a3a0:	4809      	ldr	r0, [pc, #36]	@ (800a3c8 <_Bfree+0x40>)
 800a3a2:	218f      	movs	r1, #143	@ 0x8f
 800a3a4:	f001 fd34 	bl	800be10 <__assert_func>
 800a3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ac:	6006      	str	r6, [r0, #0]
 800a3ae:	60c6      	str	r6, [r0, #12]
 800a3b0:	b13c      	cbz	r4, 800a3c2 <_Bfree+0x3a>
 800a3b2:	69eb      	ldr	r3, [r5, #28]
 800a3b4:	6862      	ldr	r2, [r4, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3bc:	6021      	str	r1, [r4, #0]
 800a3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	0800defe 	.word	0x0800defe
 800a3c8:	0800df7e 	.word	0x0800df7e

0800a3cc <__multadd>:
 800a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	690d      	ldr	r5, [r1, #16]
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	461e      	mov	r6, r3
 800a3d8:	f101 0c14 	add.w	ip, r1, #20
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f8dc 3000 	ldr.w	r3, [ip]
 800a3e2:	b299      	uxth	r1, r3
 800a3e4:	fb02 6101 	mla	r1, r2, r1, r6
 800a3e8:	0c1e      	lsrs	r6, r3, #16
 800a3ea:	0c0b      	lsrs	r3, r1, #16
 800a3ec:	fb02 3306 	mla	r3, r2, r6, r3
 800a3f0:	b289      	uxth	r1, r1
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3f8:	4285      	cmp	r5, r0
 800a3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a402:	dcec      	bgt.n	800a3de <__multadd+0x12>
 800a404:	b30e      	cbz	r6, 800a44a <__multadd+0x7e>
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	42ab      	cmp	r3, r5
 800a40a:	dc19      	bgt.n	800a440 <__multadd+0x74>
 800a40c:	6861      	ldr	r1, [r4, #4]
 800a40e:	4638      	mov	r0, r7
 800a410:	3101      	adds	r1, #1
 800a412:	f7ff ff79 	bl	800a308 <_Balloc>
 800a416:	4680      	mov	r8, r0
 800a418:	b928      	cbnz	r0, 800a426 <__multadd+0x5a>
 800a41a:	4602      	mov	r2, r0
 800a41c:	4b0c      	ldr	r3, [pc, #48]	@ (800a450 <__multadd+0x84>)
 800a41e:	480d      	ldr	r0, [pc, #52]	@ (800a454 <__multadd+0x88>)
 800a420:	21ba      	movs	r1, #186	@ 0xba
 800a422:	f001 fcf5 	bl	800be10 <__assert_func>
 800a426:	6922      	ldr	r2, [r4, #16]
 800a428:	3202      	adds	r2, #2
 800a42a:	f104 010c 	add.w	r1, r4, #12
 800a42e:	0092      	lsls	r2, r2, #2
 800a430:	300c      	adds	r0, #12
 800a432:	f001 fcd7 	bl	800bde4 <memcpy>
 800a436:	4621      	mov	r1, r4
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff ffa5 	bl	800a388 <_Bfree>
 800a43e:	4644      	mov	r4, r8
 800a440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a444:	3501      	adds	r5, #1
 800a446:	615e      	str	r6, [r3, #20]
 800a448:	6125      	str	r5, [r4, #16]
 800a44a:	4620      	mov	r0, r4
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	0800df6d 	.word	0x0800df6d
 800a454:	0800df7e 	.word	0x0800df7e

0800a458 <__s2b>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	4615      	mov	r5, r2
 800a460:	461f      	mov	r7, r3
 800a462:	2209      	movs	r2, #9
 800a464:	3308      	adds	r3, #8
 800a466:	4606      	mov	r6, r0
 800a468:	fb93 f3f2 	sdiv	r3, r3, r2
 800a46c:	2100      	movs	r1, #0
 800a46e:	2201      	movs	r2, #1
 800a470:	429a      	cmp	r2, r3
 800a472:	db09      	blt.n	800a488 <__s2b+0x30>
 800a474:	4630      	mov	r0, r6
 800a476:	f7ff ff47 	bl	800a308 <_Balloc>
 800a47a:	b940      	cbnz	r0, 800a48e <__s2b+0x36>
 800a47c:	4602      	mov	r2, r0
 800a47e:	4b19      	ldr	r3, [pc, #100]	@ (800a4e4 <__s2b+0x8c>)
 800a480:	4819      	ldr	r0, [pc, #100]	@ (800a4e8 <__s2b+0x90>)
 800a482:	21d3      	movs	r1, #211	@ 0xd3
 800a484:	f001 fcc4 	bl	800be10 <__assert_func>
 800a488:	0052      	lsls	r2, r2, #1
 800a48a:	3101      	adds	r1, #1
 800a48c:	e7f0      	b.n	800a470 <__s2b+0x18>
 800a48e:	9b08      	ldr	r3, [sp, #32]
 800a490:	6143      	str	r3, [r0, #20]
 800a492:	2d09      	cmp	r5, #9
 800a494:	f04f 0301 	mov.w	r3, #1
 800a498:	6103      	str	r3, [r0, #16]
 800a49a:	dd16      	ble.n	800a4ca <__s2b+0x72>
 800a49c:	f104 0909 	add.w	r9, r4, #9
 800a4a0:	46c8      	mov	r8, r9
 800a4a2:	442c      	add	r4, r5
 800a4a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	3b30      	subs	r3, #48	@ 0x30
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ff8c 	bl	800a3cc <__multadd>
 800a4b4:	45a0      	cmp	r8, r4
 800a4b6:	d1f5      	bne.n	800a4a4 <__s2b+0x4c>
 800a4b8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4bc:	444c      	add	r4, r9
 800a4be:	1b2d      	subs	r5, r5, r4
 800a4c0:	1963      	adds	r3, r4, r5
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	db04      	blt.n	800a4d0 <__s2b+0x78>
 800a4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ca:	340a      	adds	r4, #10
 800a4cc:	2509      	movs	r5, #9
 800a4ce:	e7f6      	b.n	800a4be <__s2b+0x66>
 800a4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	3b30      	subs	r3, #48	@ 0x30
 800a4d8:	220a      	movs	r2, #10
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7ff ff76 	bl	800a3cc <__multadd>
 800a4e0:	e7ee      	b.n	800a4c0 <__s2b+0x68>
 800a4e2:	bf00      	nop
 800a4e4:	0800df6d 	.word	0x0800df6d
 800a4e8:	0800df7e 	.word	0x0800df7e

0800a4ec <__hi0bits>:
 800a4ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	bf36      	itet	cc
 800a4f4:	0403      	lslcc	r3, r0, #16
 800a4f6:	2000      	movcs	r0, #0
 800a4f8:	2010      	movcc	r0, #16
 800a4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4fe:	bf3c      	itt	cc
 800a500:	021b      	lslcc	r3, r3, #8
 800a502:	3008      	addcc	r0, #8
 800a504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a508:	bf3c      	itt	cc
 800a50a:	011b      	lslcc	r3, r3, #4
 800a50c:	3004      	addcc	r0, #4
 800a50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a512:	bf3c      	itt	cc
 800a514:	009b      	lslcc	r3, r3, #2
 800a516:	3002      	addcc	r0, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db05      	blt.n	800a528 <__hi0bits+0x3c>
 800a51c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a520:	f100 0001 	add.w	r0, r0, #1
 800a524:	bf08      	it	eq
 800a526:	2020      	moveq	r0, #32
 800a528:	4770      	bx	lr

0800a52a <__lo0bits>:
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	4602      	mov	r2, r0
 800a52e:	f013 0007 	ands.w	r0, r3, #7
 800a532:	d00b      	beq.n	800a54c <__lo0bits+0x22>
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d421      	bmi.n	800a57c <__lo0bits+0x52>
 800a538:	0798      	lsls	r0, r3, #30
 800a53a:	bf49      	itett	mi
 800a53c:	085b      	lsrmi	r3, r3, #1
 800a53e:	089b      	lsrpl	r3, r3, #2
 800a540:	2001      	movmi	r0, #1
 800a542:	6013      	strmi	r3, [r2, #0]
 800a544:	bf5c      	itt	pl
 800a546:	6013      	strpl	r3, [r2, #0]
 800a548:	2002      	movpl	r0, #2
 800a54a:	4770      	bx	lr
 800a54c:	b299      	uxth	r1, r3
 800a54e:	b909      	cbnz	r1, 800a554 <__lo0bits+0x2a>
 800a550:	0c1b      	lsrs	r3, r3, #16
 800a552:	2010      	movs	r0, #16
 800a554:	b2d9      	uxtb	r1, r3
 800a556:	b909      	cbnz	r1, 800a55c <__lo0bits+0x32>
 800a558:	3008      	adds	r0, #8
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	0719      	lsls	r1, r3, #28
 800a55e:	bf04      	itt	eq
 800a560:	091b      	lsreq	r3, r3, #4
 800a562:	3004      	addeq	r0, #4
 800a564:	0799      	lsls	r1, r3, #30
 800a566:	bf04      	itt	eq
 800a568:	089b      	lsreq	r3, r3, #2
 800a56a:	3002      	addeq	r0, #2
 800a56c:	07d9      	lsls	r1, r3, #31
 800a56e:	d403      	bmi.n	800a578 <__lo0bits+0x4e>
 800a570:	085b      	lsrs	r3, r3, #1
 800a572:	f100 0001 	add.w	r0, r0, #1
 800a576:	d003      	beq.n	800a580 <__lo0bits+0x56>
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	4770      	bx	lr
 800a57c:	2000      	movs	r0, #0
 800a57e:	4770      	bx	lr
 800a580:	2020      	movs	r0, #32
 800a582:	4770      	bx	lr

0800a584 <__i2b>:
 800a584:	b510      	push	{r4, lr}
 800a586:	460c      	mov	r4, r1
 800a588:	2101      	movs	r1, #1
 800a58a:	f7ff febd 	bl	800a308 <_Balloc>
 800a58e:	4602      	mov	r2, r0
 800a590:	b928      	cbnz	r0, 800a59e <__i2b+0x1a>
 800a592:	4b05      	ldr	r3, [pc, #20]	@ (800a5a8 <__i2b+0x24>)
 800a594:	4805      	ldr	r0, [pc, #20]	@ (800a5ac <__i2b+0x28>)
 800a596:	f240 1145 	movw	r1, #325	@ 0x145
 800a59a:	f001 fc39 	bl	800be10 <__assert_func>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	6144      	str	r4, [r0, #20]
 800a5a2:	6103      	str	r3, [r0, #16]
 800a5a4:	bd10      	pop	{r4, pc}
 800a5a6:	bf00      	nop
 800a5a8:	0800df6d 	.word	0x0800df6d
 800a5ac:	0800df7e 	.word	0x0800df7e

0800a5b0 <__multiply>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	4617      	mov	r7, r2
 800a5b6:	690a      	ldr	r2, [r1, #16]
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	bfa8      	it	ge
 800a5be:	463b      	movge	r3, r7
 800a5c0:	4689      	mov	r9, r1
 800a5c2:	bfa4      	itt	ge
 800a5c4:	460f      	movge	r7, r1
 800a5c6:	4699      	movge	r9, r3
 800a5c8:	693d      	ldr	r5, [r7, #16]
 800a5ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6879      	ldr	r1, [r7, #4]
 800a5d2:	eb05 060a 	add.w	r6, r5, sl
 800a5d6:	42b3      	cmp	r3, r6
 800a5d8:	b085      	sub	sp, #20
 800a5da:	bfb8      	it	lt
 800a5dc:	3101      	addlt	r1, #1
 800a5de:	f7ff fe93 	bl	800a308 <_Balloc>
 800a5e2:	b930      	cbnz	r0, 800a5f2 <__multiply+0x42>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	4b41      	ldr	r3, [pc, #260]	@ (800a6ec <__multiply+0x13c>)
 800a5e8:	4841      	ldr	r0, [pc, #260]	@ (800a6f0 <__multiply+0x140>)
 800a5ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5ee:	f001 fc0f 	bl	800be10 <__assert_func>
 800a5f2:	f100 0414 	add.w	r4, r0, #20
 800a5f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a5fa:	4623      	mov	r3, r4
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4573      	cmp	r3, lr
 800a600:	d320      	bcc.n	800a644 <__multiply+0x94>
 800a602:	f107 0814 	add.w	r8, r7, #20
 800a606:	f109 0114 	add.w	r1, r9, #20
 800a60a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a60e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	1beb      	subs	r3, r5, r7
 800a616:	3b15      	subs	r3, #21
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	3304      	adds	r3, #4
 800a61e:	3715      	adds	r7, #21
 800a620:	42bd      	cmp	r5, r7
 800a622:	bf38      	it	cc
 800a624:	2304      	movcc	r3, #4
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	9b02      	ldr	r3, [sp, #8]
 800a62a:	9103      	str	r1, [sp, #12]
 800a62c:	428b      	cmp	r3, r1
 800a62e:	d80c      	bhi.n	800a64a <__multiply+0x9a>
 800a630:	2e00      	cmp	r6, #0
 800a632:	dd03      	ble.n	800a63c <__multiply+0x8c>
 800a634:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d055      	beq.n	800a6e8 <__multiply+0x138>
 800a63c:	6106      	str	r6, [r0, #16]
 800a63e:	b005      	add	sp, #20
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	f843 2b04 	str.w	r2, [r3], #4
 800a648:	e7d9      	b.n	800a5fe <__multiply+0x4e>
 800a64a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a64e:	f1ba 0f00 	cmp.w	sl, #0
 800a652:	d01f      	beq.n	800a694 <__multiply+0xe4>
 800a654:	46c4      	mov	ip, r8
 800a656:	46a1      	mov	r9, r4
 800a658:	2700      	movs	r7, #0
 800a65a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a65e:	f8d9 3000 	ldr.w	r3, [r9]
 800a662:	fa1f fb82 	uxth.w	fp, r2
 800a666:	b29b      	uxth	r3, r3
 800a668:	fb0a 330b 	mla	r3, sl, fp, r3
 800a66c:	443b      	add	r3, r7
 800a66e:	f8d9 7000 	ldr.w	r7, [r9]
 800a672:	0c12      	lsrs	r2, r2, #16
 800a674:	0c3f      	lsrs	r7, r7, #16
 800a676:	fb0a 7202 	mla	r2, sl, r2, r7
 800a67a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a67e:	b29b      	uxth	r3, r3
 800a680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a684:	4565      	cmp	r5, ip
 800a686:	f849 3b04 	str.w	r3, [r9], #4
 800a68a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a68e:	d8e4      	bhi.n	800a65a <__multiply+0xaa>
 800a690:	9b01      	ldr	r3, [sp, #4]
 800a692:	50e7      	str	r7, [r4, r3]
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a69a:	3104      	adds	r1, #4
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	d020      	beq.n	800a6e4 <__multiply+0x134>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	4647      	mov	r7, r8
 800a6a6:	46a4      	mov	ip, r4
 800a6a8:	f04f 0a00 	mov.w	sl, #0
 800a6ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6b4:	fb09 220b 	mla	r2, r9, fp, r2
 800a6b8:	4452      	add	r2, sl
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c0:	f84c 3b04 	str.w	r3, [ip], #4
 800a6c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a6c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a6d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a6d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a6d8:	42bd      	cmp	r5, r7
 800a6da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6de:	d8e5      	bhi.n	800a6ac <__multiply+0xfc>
 800a6e0:	9a01      	ldr	r2, [sp, #4]
 800a6e2:	50a3      	str	r3, [r4, r2]
 800a6e4:	3404      	adds	r4, #4
 800a6e6:	e79f      	b.n	800a628 <__multiply+0x78>
 800a6e8:	3e01      	subs	r6, #1
 800a6ea:	e7a1      	b.n	800a630 <__multiply+0x80>
 800a6ec:	0800df6d 	.word	0x0800df6d
 800a6f0:	0800df7e 	.word	0x0800df7e

0800a6f4 <__pow5mult>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	4615      	mov	r5, r2
 800a6fa:	f012 0203 	ands.w	r2, r2, #3
 800a6fe:	4607      	mov	r7, r0
 800a700:	460e      	mov	r6, r1
 800a702:	d007      	beq.n	800a714 <__pow5mult+0x20>
 800a704:	4c25      	ldr	r4, [pc, #148]	@ (800a79c <__pow5mult+0xa8>)
 800a706:	3a01      	subs	r2, #1
 800a708:	2300      	movs	r3, #0
 800a70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a70e:	f7ff fe5d 	bl	800a3cc <__multadd>
 800a712:	4606      	mov	r6, r0
 800a714:	10ad      	asrs	r5, r5, #2
 800a716:	d03d      	beq.n	800a794 <__pow5mult+0xa0>
 800a718:	69fc      	ldr	r4, [r7, #28]
 800a71a:	b97c      	cbnz	r4, 800a73c <__pow5mult+0x48>
 800a71c:	2010      	movs	r0, #16
 800a71e:	f7ff fd3d 	bl	800a19c <malloc>
 800a722:	4602      	mov	r2, r0
 800a724:	61f8      	str	r0, [r7, #28]
 800a726:	b928      	cbnz	r0, 800a734 <__pow5mult+0x40>
 800a728:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a0 <__pow5mult+0xac>)
 800a72a:	481e      	ldr	r0, [pc, #120]	@ (800a7a4 <__pow5mult+0xb0>)
 800a72c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a730:	f001 fb6e 	bl	800be10 <__assert_func>
 800a734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a738:	6004      	str	r4, [r0, #0]
 800a73a:	60c4      	str	r4, [r0, #12]
 800a73c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a744:	b94c      	cbnz	r4, 800a75a <__pow5mult+0x66>
 800a746:	f240 2171 	movw	r1, #625	@ 0x271
 800a74a:	4638      	mov	r0, r7
 800a74c:	f7ff ff1a 	bl	800a584 <__i2b>
 800a750:	2300      	movs	r3, #0
 800a752:	f8c8 0008 	str.w	r0, [r8, #8]
 800a756:	4604      	mov	r4, r0
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	f04f 0900 	mov.w	r9, #0
 800a75e:	07eb      	lsls	r3, r5, #31
 800a760:	d50a      	bpl.n	800a778 <__pow5mult+0x84>
 800a762:	4631      	mov	r1, r6
 800a764:	4622      	mov	r2, r4
 800a766:	4638      	mov	r0, r7
 800a768:	f7ff ff22 	bl	800a5b0 <__multiply>
 800a76c:	4631      	mov	r1, r6
 800a76e:	4680      	mov	r8, r0
 800a770:	4638      	mov	r0, r7
 800a772:	f7ff fe09 	bl	800a388 <_Bfree>
 800a776:	4646      	mov	r6, r8
 800a778:	106d      	asrs	r5, r5, #1
 800a77a:	d00b      	beq.n	800a794 <__pow5mult+0xa0>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	b938      	cbnz	r0, 800a790 <__pow5mult+0x9c>
 800a780:	4622      	mov	r2, r4
 800a782:	4621      	mov	r1, r4
 800a784:	4638      	mov	r0, r7
 800a786:	f7ff ff13 	bl	800a5b0 <__multiply>
 800a78a:	6020      	str	r0, [r4, #0]
 800a78c:	f8c0 9000 	str.w	r9, [r0]
 800a790:	4604      	mov	r4, r0
 800a792:	e7e4      	b.n	800a75e <__pow5mult+0x6a>
 800a794:	4630      	mov	r0, r6
 800a796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79a:	bf00      	nop
 800a79c:	0800e090 	.word	0x0800e090
 800a7a0:	0800defe 	.word	0x0800defe
 800a7a4:	0800df7e 	.word	0x0800df7e

0800a7a8 <__lshift>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	6849      	ldr	r1, [r1, #4]
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7b6:	68a3      	ldr	r3, [r4, #8]
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	4691      	mov	r9, r2
 800a7bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7c0:	f108 0601 	add.w	r6, r8, #1
 800a7c4:	42b3      	cmp	r3, r6
 800a7c6:	db0b      	blt.n	800a7e0 <__lshift+0x38>
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f7ff fd9d 	bl	800a308 <_Balloc>
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	b948      	cbnz	r0, 800a7e6 <__lshift+0x3e>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4b28      	ldr	r3, [pc, #160]	@ (800a878 <__lshift+0xd0>)
 800a7d6:	4829      	ldr	r0, [pc, #164]	@ (800a87c <__lshift+0xd4>)
 800a7d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7dc:	f001 fb18 	bl	800be10 <__assert_func>
 800a7e0:	3101      	adds	r1, #1
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	e7ee      	b.n	800a7c4 <__lshift+0x1c>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f100 0114 	add.w	r1, r0, #20
 800a7ec:	f100 0210 	add.w	r2, r0, #16
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	4553      	cmp	r3, sl
 800a7f4:	db33      	blt.n	800a85e <__lshift+0xb6>
 800a7f6:	6920      	ldr	r0, [r4, #16]
 800a7f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7fc:	f104 0314 	add.w	r3, r4, #20
 800a800:	f019 091f 	ands.w	r9, r9, #31
 800a804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a80c:	d02b      	beq.n	800a866 <__lshift+0xbe>
 800a80e:	f1c9 0e20 	rsb	lr, r9, #32
 800a812:	468a      	mov	sl, r1
 800a814:	2200      	movs	r2, #0
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	fa00 f009 	lsl.w	r0, r0, r9
 800a81c:	4310      	orrs	r0, r2
 800a81e:	f84a 0b04 	str.w	r0, [sl], #4
 800a822:	f853 2b04 	ldr.w	r2, [r3], #4
 800a826:	459c      	cmp	ip, r3
 800a828:	fa22 f20e 	lsr.w	r2, r2, lr
 800a82c:	d8f3      	bhi.n	800a816 <__lshift+0x6e>
 800a82e:	ebac 0304 	sub.w	r3, ip, r4
 800a832:	3b15      	subs	r3, #21
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	3304      	adds	r3, #4
 800a83a:	f104 0015 	add.w	r0, r4, #21
 800a83e:	4560      	cmp	r0, ip
 800a840:	bf88      	it	hi
 800a842:	2304      	movhi	r3, #4
 800a844:	50ca      	str	r2, [r1, r3]
 800a846:	b10a      	cbz	r2, 800a84c <__lshift+0xa4>
 800a848:	f108 0602 	add.w	r6, r8, #2
 800a84c:	3e01      	subs	r6, #1
 800a84e:	4638      	mov	r0, r7
 800a850:	612e      	str	r6, [r5, #16]
 800a852:	4621      	mov	r1, r4
 800a854:	f7ff fd98 	bl	800a388 <_Bfree>
 800a858:	4628      	mov	r0, r5
 800a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a862:	3301      	adds	r3, #1
 800a864:	e7c5      	b.n	800a7f2 <__lshift+0x4a>
 800a866:	3904      	subs	r1, #4
 800a868:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a870:	459c      	cmp	ip, r3
 800a872:	d8f9      	bhi.n	800a868 <__lshift+0xc0>
 800a874:	e7ea      	b.n	800a84c <__lshift+0xa4>
 800a876:	bf00      	nop
 800a878:	0800df6d 	.word	0x0800df6d
 800a87c:	0800df7e 	.word	0x0800df7e

0800a880 <__mcmp>:
 800a880:	690a      	ldr	r2, [r1, #16]
 800a882:	4603      	mov	r3, r0
 800a884:	6900      	ldr	r0, [r0, #16]
 800a886:	1a80      	subs	r0, r0, r2
 800a888:	b530      	push	{r4, r5, lr}
 800a88a:	d10e      	bne.n	800a8aa <__mcmp+0x2a>
 800a88c:	3314      	adds	r3, #20
 800a88e:	3114      	adds	r1, #20
 800a890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a89c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8a0:	4295      	cmp	r5, r2
 800a8a2:	d003      	beq.n	800a8ac <__mcmp+0x2c>
 800a8a4:	d205      	bcs.n	800a8b2 <__mcmp+0x32>
 800a8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8aa:	bd30      	pop	{r4, r5, pc}
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	d3f3      	bcc.n	800a898 <__mcmp+0x18>
 800a8b0:	e7fb      	b.n	800a8aa <__mcmp+0x2a>
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7f9      	b.n	800a8aa <__mcmp+0x2a>
	...

0800a8b8 <__mdiff>:
 800a8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	4689      	mov	r9, r1
 800a8be:	4606      	mov	r6, r0
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4648      	mov	r0, r9
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	f7ff ffdb 	bl	800a880 <__mcmp>
 800a8ca:	1e05      	subs	r5, r0, #0
 800a8cc:	d112      	bne.n	800a8f4 <__mdiff+0x3c>
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f7ff fd19 	bl	800a308 <_Balloc>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <__mdiff+0x2e>
 800a8da:	4b3f      	ldr	r3, [pc, #252]	@ (800a9d8 <__mdiff+0x120>)
 800a8dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a8e0:	483e      	ldr	r0, [pc, #248]	@ (800a9dc <__mdiff+0x124>)
 800a8e2:	f001 fa95 	bl	800be10 <__assert_func>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	b003      	add	sp, #12
 800a8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f4:	bfbc      	itt	lt
 800a8f6:	464b      	movlt	r3, r9
 800a8f8:	46a1      	movlt	r9, r4
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a900:	bfba      	itte	lt
 800a902:	461c      	movlt	r4, r3
 800a904:	2501      	movlt	r5, #1
 800a906:	2500      	movge	r5, #0
 800a908:	f7ff fcfe 	bl	800a308 <_Balloc>
 800a90c:	4602      	mov	r2, r0
 800a90e:	b918      	cbnz	r0, 800a918 <__mdiff+0x60>
 800a910:	4b31      	ldr	r3, [pc, #196]	@ (800a9d8 <__mdiff+0x120>)
 800a912:	f240 2145 	movw	r1, #581	@ 0x245
 800a916:	e7e3      	b.n	800a8e0 <__mdiff+0x28>
 800a918:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a91c:	6926      	ldr	r6, [r4, #16]
 800a91e:	60c5      	str	r5, [r0, #12]
 800a920:	f109 0310 	add.w	r3, r9, #16
 800a924:	f109 0514 	add.w	r5, r9, #20
 800a928:	f104 0e14 	add.w	lr, r4, #20
 800a92c:	f100 0b14 	add.w	fp, r0, #20
 800a930:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a934:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	46d9      	mov	r9, fp
 800a93c:	f04f 0c00 	mov.w	ip, #0
 800a940:	9b01      	ldr	r3, [sp, #4]
 800a942:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a946:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	fa1f f38a 	uxth.w	r3, sl
 800a950:	4619      	mov	r1, r3
 800a952:	b283      	uxth	r3, r0
 800a954:	1acb      	subs	r3, r1, r3
 800a956:	0c00      	lsrs	r0, r0, #16
 800a958:	4463      	add	r3, ip
 800a95a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a95e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a962:	b29b      	uxth	r3, r3
 800a964:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a968:	4576      	cmp	r6, lr
 800a96a:	f849 3b04 	str.w	r3, [r9], #4
 800a96e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a972:	d8e5      	bhi.n	800a940 <__mdiff+0x88>
 800a974:	1b33      	subs	r3, r6, r4
 800a976:	3b15      	subs	r3, #21
 800a978:	f023 0303 	bic.w	r3, r3, #3
 800a97c:	3415      	adds	r4, #21
 800a97e:	3304      	adds	r3, #4
 800a980:	42a6      	cmp	r6, r4
 800a982:	bf38      	it	cc
 800a984:	2304      	movcc	r3, #4
 800a986:	441d      	add	r5, r3
 800a988:	445b      	add	r3, fp
 800a98a:	461e      	mov	r6, r3
 800a98c:	462c      	mov	r4, r5
 800a98e:	4544      	cmp	r4, r8
 800a990:	d30e      	bcc.n	800a9b0 <__mdiff+0xf8>
 800a992:	f108 0103 	add.w	r1, r8, #3
 800a996:	1b49      	subs	r1, r1, r5
 800a998:	f021 0103 	bic.w	r1, r1, #3
 800a99c:	3d03      	subs	r5, #3
 800a99e:	45a8      	cmp	r8, r5
 800a9a0:	bf38      	it	cc
 800a9a2:	2100      	movcc	r1, #0
 800a9a4:	440b      	add	r3, r1
 800a9a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9aa:	b191      	cbz	r1, 800a9d2 <__mdiff+0x11a>
 800a9ac:	6117      	str	r7, [r2, #16]
 800a9ae:	e79d      	b.n	800a8ec <__mdiff+0x34>
 800a9b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9b4:	46e6      	mov	lr, ip
 800a9b6:	0c08      	lsrs	r0, r1, #16
 800a9b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a9bc:	4471      	add	r1, lr
 800a9be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9c2:	b289      	uxth	r1, r1
 800a9c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9c8:	f846 1b04 	str.w	r1, [r6], #4
 800a9cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9d0:	e7dd      	b.n	800a98e <__mdiff+0xd6>
 800a9d2:	3f01      	subs	r7, #1
 800a9d4:	e7e7      	b.n	800a9a6 <__mdiff+0xee>
 800a9d6:	bf00      	nop
 800a9d8:	0800df6d 	.word	0x0800df6d
 800a9dc:	0800df7e 	.word	0x0800df7e

0800a9e0 <__ulp>:
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	ed8d 0b00 	vstr	d0, [sp]
 800a9e6:	9a01      	ldr	r2, [sp, #4]
 800a9e8:	4b0f      	ldr	r3, [pc, #60]	@ (800aa28 <__ulp+0x48>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc08      	bgt.n	800aa06 <__ulp+0x26>
 800a9f4:	425b      	negs	r3, r3
 800a9f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a9fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9fe:	da04      	bge.n	800aa0a <__ulp+0x2a>
 800aa00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa04:	4113      	asrs	r3, r2
 800aa06:	2200      	movs	r2, #0
 800aa08:	e008      	b.n	800aa1c <__ulp+0x3c>
 800aa0a:	f1a2 0314 	sub.w	r3, r2, #20
 800aa0e:	2b1e      	cmp	r3, #30
 800aa10:	bfda      	itte	le
 800aa12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aa16:	40da      	lsrle	r2, r3
 800aa18:	2201      	movgt	r2, #1
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	ec41 0b10 	vmov	d0, r0, r1
 800aa24:	b002      	add	sp, #8
 800aa26:	4770      	bx	lr
 800aa28:	7ff00000 	.word	0x7ff00000

0800aa2c <__b2d>:
 800aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa30:	6906      	ldr	r6, [r0, #16]
 800aa32:	f100 0814 	add.w	r8, r0, #20
 800aa36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa3a:	1f37      	subs	r7, r6, #4
 800aa3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa40:	4610      	mov	r0, r2
 800aa42:	f7ff fd53 	bl	800a4ec <__hi0bits>
 800aa46:	f1c0 0320 	rsb	r3, r0, #32
 800aa4a:	280a      	cmp	r0, #10
 800aa4c:	600b      	str	r3, [r1, #0]
 800aa4e:	491b      	ldr	r1, [pc, #108]	@ (800aabc <__b2d+0x90>)
 800aa50:	dc15      	bgt.n	800aa7e <__b2d+0x52>
 800aa52:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa56:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa5a:	45b8      	cmp	r8, r7
 800aa5c:	ea43 0501 	orr.w	r5, r3, r1
 800aa60:	bf34      	ite	cc
 800aa62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa66:	2300      	movcs	r3, #0
 800aa68:	3015      	adds	r0, #21
 800aa6a:	fa02 f000 	lsl.w	r0, r2, r0
 800aa6e:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa72:	4303      	orrs	r3, r0
 800aa74:	461c      	mov	r4, r3
 800aa76:	ec45 4b10 	vmov	d0, r4, r5
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7e:	45b8      	cmp	r8, r7
 800aa80:	bf3a      	itte	cc
 800aa82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa86:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa8a:	2300      	movcs	r3, #0
 800aa8c:	380b      	subs	r0, #11
 800aa8e:	d012      	beq.n	800aab6 <__b2d+0x8a>
 800aa90:	f1c0 0120 	rsb	r1, r0, #32
 800aa94:	fa23 f401 	lsr.w	r4, r3, r1
 800aa98:	4082      	lsls	r2, r0
 800aa9a:	4322      	orrs	r2, r4
 800aa9c:	4547      	cmp	r7, r8
 800aa9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aaa2:	bf8c      	ite	hi
 800aaa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aaa8:	2200      	movls	r2, #0
 800aaaa:	4083      	lsls	r3, r0
 800aaac:	40ca      	lsrs	r2, r1
 800aaae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aab2:	4313      	orrs	r3, r2
 800aab4:	e7de      	b.n	800aa74 <__b2d+0x48>
 800aab6:	ea42 0501 	orr.w	r5, r2, r1
 800aaba:	e7db      	b.n	800aa74 <__b2d+0x48>
 800aabc:	3ff00000 	.word	0x3ff00000

0800aac0 <__d2b>:
 800aac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aac4:	460f      	mov	r7, r1
 800aac6:	2101      	movs	r1, #1
 800aac8:	ec59 8b10 	vmov	r8, r9, d0
 800aacc:	4616      	mov	r6, r2
 800aace:	f7ff fc1b 	bl	800a308 <_Balloc>
 800aad2:	4604      	mov	r4, r0
 800aad4:	b930      	cbnz	r0, 800aae4 <__d2b+0x24>
 800aad6:	4602      	mov	r2, r0
 800aad8:	4b23      	ldr	r3, [pc, #140]	@ (800ab68 <__d2b+0xa8>)
 800aada:	4824      	ldr	r0, [pc, #144]	@ (800ab6c <__d2b+0xac>)
 800aadc:	f240 310f 	movw	r1, #783	@ 0x30f
 800aae0:	f001 f996 	bl	800be10 <__assert_func>
 800aae4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaec:	b10d      	cbz	r5, 800aaf2 <__d2b+0x32>
 800aaee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	f1b8 0300 	subs.w	r3, r8, #0
 800aaf8:	d023      	beq.n	800ab42 <__d2b+0x82>
 800aafa:	4668      	mov	r0, sp
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	f7ff fd14 	bl	800a52a <__lo0bits>
 800ab02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab06:	b1d0      	cbz	r0, 800ab3e <__d2b+0x7e>
 800ab08:	f1c0 0320 	rsb	r3, r0, #32
 800ab0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab10:	430b      	orrs	r3, r1
 800ab12:	40c2      	lsrs	r2, r0
 800ab14:	6163      	str	r3, [r4, #20]
 800ab16:	9201      	str	r2, [sp, #4]
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	61a3      	str	r3, [r4, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bf0c      	ite	eq
 800ab20:	2201      	moveq	r2, #1
 800ab22:	2202      	movne	r2, #2
 800ab24:	6122      	str	r2, [r4, #16]
 800ab26:	b1a5      	cbz	r5, 800ab52 <__d2b+0x92>
 800ab28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab2c:	4405      	add	r5, r0
 800ab2e:	603d      	str	r5, [r7, #0]
 800ab30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab34:	6030      	str	r0, [r6, #0]
 800ab36:	4620      	mov	r0, r4
 800ab38:	b003      	add	sp, #12
 800ab3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab3e:	6161      	str	r1, [r4, #20]
 800ab40:	e7ea      	b.n	800ab18 <__d2b+0x58>
 800ab42:	a801      	add	r0, sp, #4
 800ab44:	f7ff fcf1 	bl	800a52a <__lo0bits>
 800ab48:	9b01      	ldr	r3, [sp, #4]
 800ab4a:	6163      	str	r3, [r4, #20]
 800ab4c:	3020      	adds	r0, #32
 800ab4e:	2201      	movs	r2, #1
 800ab50:	e7e8      	b.n	800ab24 <__d2b+0x64>
 800ab52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab5a:	6038      	str	r0, [r7, #0]
 800ab5c:	6918      	ldr	r0, [r3, #16]
 800ab5e:	f7ff fcc5 	bl	800a4ec <__hi0bits>
 800ab62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab66:	e7e5      	b.n	800ab34 <__d2b+0x74>
 800ab68:	0800df6d 	.word	0x0800df6d
 800ab6c:	0800df7e 	.word	0x0800df7e

0800ab70 <__ratio>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	b085      	sub	sp, #20
 800ab76:	e9cd 1000 	strd	r1, r0, [sp]
 800ab7a:	a902      	add	r1, sp, #8
 800ab7c:	f7ff ff56 	bl	800aa2c <__b2d>
 800ab80:	9800      	ldr	r0, [sp, #0]
 800ab82:	a903      	add	r1, sp, #12
 800ab84:	ec55 4b10 	vmov	r4, r5, d0
 800ab88:	f7ff ff50 	bl	800aa2c <__b2d>
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	6919      	ldr	r1, [r3, #16]
 800ab90:	9b00      	ldr	r3, [sp, #0]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	1ac9      	subs	r1, r1, r3
 800ab96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab9a:	1a9b      	subs	r3, r3, r2
 800ab9c:	ec5b ab10 	vmov	sl, fp, d0
 800aba0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bfce      	itee	gt
 800aba8:	462a      	movgt	r2, r5
 800abaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abae:	465a      	movle	r2, fp
 800abb0:	462f      	mov	r7, r5
 800abb2:	46d9      	mov	r9, fp
 800abb4:	bfcc      	ite	gt
 800abb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800abbe:	464b      	mov	r3, r9
 800abc0:	4652      	mov	r2, sl
 800abc2:	4620      	mov	r0, r4
 800abc4:	4639      	mov	r1, r7
 800abc6:	f7f5 fe69 	bl	800089c <__aeabi_ddiv>
 800abca:	ec41 0b10 	vmov	d0, r0, r1
 800abce:	b005      	add	sp, #20
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd4 <__copybits>:
 800abd4:	3901      	subs	r1, #1
 800abd6:	b570      	push	{r4, r5, r6, lr}
 800abd8:	1149      	asrs	r1, r1, #5
 800abda:	6914      	ldr	r4, [r2, #16]
 800abdc:	3101      	adds	r1, #1
 800abde:	f102 0314 	add.w	r3, r2, #20
 800abe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abea:	1f05      	subs	r5, r0, #4
 800abec:	42a3      	cmp	r3, r4
 800abee:	d30c      	bcc.n	800ac0a <__copybits+0x36>
 800abf0:	1aa3      	subs	r3, r4, r2
 800abf2:	3b11      	subs	r3, #17
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	3211      	adds	r2, #17
 800abfa:	42a2      	cmp	r2, r4
 800abfc:	bf88      	it	hi
 800abfe:	2300      	movhi	r3, #0
 800ac00:	4418      	add	r0, r3
 800ac02:	2300      	movs	r3, #0
 800ac04:	4288      	cmp	r0, r1
 800ac06:	d305      	bcc.n	800ac14 <__copybits+0x40>
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
 800ac0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac12:	e7eb      	b.n	800abec <__copybits+0x18>
 800ac14:	f840 3b04 	str.w	r3, [r0], #4
 800ac18:	e7f4      	b.n	800ac04 <__copybits+0x30>

0800ac1a <__any_on>:
 800ac1a:	f100 0214 	add.w	r2, r0, #20
 800ac1e:	6900      	ldr	r0, [r0, #16]
 800ac20:	114b      	asrs	r3, r1, #5
 800ac22:	4298      	cmp	r0, r3
 800ac24:	b510      	push	{r4, lr}
 800ac26:	db11      	blt.n	800ac4c <__any_on+0x32>
 800ac28:	dd0a      	ble.n	800ac40 <__any_on+0x26>
 800ac2a:	f011 011f 	ands.w	r1, r1, #31
 800ac2e:	d007      	beq.n	800ac40 <__any_on+0x26>
 800ac30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac34:	fa24 f001 	lsr.w	r0, r4, r1
 800ac38:	fa00 f101 	lsl.w	r1, r0, r1
 800ac3c:	428c      	cmp	r4, r1
 800ac3e:	d10b      	bne.n	800ac58 <__any_on+0x3e>
 800ac40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d803      	bhi.n	800ac50 <__any_on+0x36>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	bd10      	pop	{r4, pc}
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	e7f7      	b.n	800ac40 <__any_on+0x26>
 800ac50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac54:	2900      	cmp	r1, #0
 800ac56:	d0f5      	beq.n	800ac44 <__any_on+0x2a>
 800ac58:	2001      	movs	r0, #1
 800ac5a:	e7f6      	b.n	800ac4a <__any_on+0x30>

0800ac5c <sulp>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	4604      	mov	r4, r0
 800ac60:	460d      	mov	r5, r1
 800ac62:	ec45 4b10 	vmov	d0, r4, r5
 800ac66:	4616      	mov	r6, r2
 800ac68:	f7ff feba 	bl	800a9e0 <__ulp>
 800ac6c:	ec51 0b10 	vmov	r0, r1, d0
 800ac70:	b17e      	cbz	r6, 800ac92 <sulp+0x36>
 800ac72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dd09      	ble.n	800ac92 <sulp+0x36>
 800ac7e:	051b      	lsls	r3, r3, #20
 800ac80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac84:	2400      	movs	r4, #0
 800ac86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	f7f5 fcdb 	bl	8000648 <__aeabi_dmul>
 800ac92:	ec41 0b10 	vmov	d0, r0, r1
 800ac96:	bd70      	pop	{r4, r5, r6, pc}

0800ac98 <_strtod_l>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	b09f      	sub	sp, #124	@ 0x7c
 800ac9e:	460c      	mov	r4, r1
 800aca0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aca2:	2200      	movs	r2, #0
 800aca4:	921a      	str	r2, [sp, #104]	@ 0x68
 800aca6:	9005      	str	r0, [sp, #20]
 800aca8:	f04f 0a00 	mov.w	sl, #0
 800acac:	f04f 0b00 	mov.w	fp, #0
 800acb0:	460a      	mov	r2, r1
 800acb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800acb4:	7811      	ldrb	r1, [r2, #0]
 800acb6:	292b      	cmp	r1, #43	@ 0x2b
 800acb8:	d04a      	beq.n	800ad50 <_strtod_l+0xb8>
 800acba:	d838      	bhi.n	800ad2e <_strtod_l+0x96>
 800acbc:	290d      	cmp	r1, #13
 800acbe:	d832      	bhi.n	800ad26 <_strtod_l+0x8e>
 800acc0:	2908      	cmp	r1, #8
 800acc2:	d832      	bhi.n	800ad2a <_strtod_l+0x92>
 800acc4:	2900      	cmp	r1, #0
 800acc6:	d03b      	beq.n	800ad40 <_strtod_l+0xa8>
 800acc8:	2200      	movs	r2, #0
 800acca:	920e      	str	r2, [sp, #56]	@ 0x38
 800accc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800acce:	782a      	ldrb	r2, [r5, #0]
 800acd0:	2a30      	cmp	r2, #48	@ 0x30
 800acd2:	f040 80b2 	bne.w	800ae3a <_strtod_l+0x1a2>
 800acd6:	786a      	ldrb	r2, [r5, #1]
 800acd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acdc:	2a58      	cmp	r2, #88	@ 0x58
 800acde:	d16e      	bne.n	800adbe <_strtod_l+0x126>
 800ace0:	9302      	str	r3, [sp, #8]
 800ace2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	ab1a      	add	r3, sp, #104	@ 0x68
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	4a8f      	ldr	r2, [pc, #572]	@ (800af28 <_strtod_l+0x290>)
 800acec:	9805      	ldr	r0, [sp, #20]
 800acee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800acf0:	a919      	add	r1, sp, #100	@ 0x64
 800acf2:	f001 f927 	bl	800bf44 <__gethex>
 800acf6:	f010 060f 	ands.w	r6, r0, #15
 800acfa:	4604      	mov	r4, r0
 800acfc:	d005      	beq.n	800ad0a <_strtod_l+0x72>
 800acfe:	2e06      	cmp	r6, #6
 800ad00:	d128      	bne.n	800ad54 <_strtod_l+0xbc>
 800ad02:	3501      	adds	r5, #1
 800ad04:	2300      	movs	r3, #0
 800ad06:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad08:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f040 858e 	bne.w	800b82e <_strtod_l+0xb96>
 800ad12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad14:	b1cb      	cbz	r3, 800ad4a <_strtod_l+0xb2>
 800ad16:	4652      	mov	r2, sl
 800ad18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad1c:	ec43 2b10 	vmov	d0, r2, r3
 800ad20:	b01f      	add	sp, #124	@ 0x7c
 800ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad26:	2920      	cmp	r1, #32
 800ad28:	d1ce      	bne.n	800acc8 <_strtod_l+0x30>
 800ad2a:	3201      	adds	r2, #1
 800ad2c:	e7c1      	b.n	800acb2 <_strtod_l+0x1a>
 800ad2e:	292d      	cmp	r1, #45	@ 0x2d
 800ad30:	d1ca      	bne.n	800acc8 <_strtod_l+0x30>
 800ad32:	2101      	movs	r1, #1
 800ad34:	910e      	str	r1, [sp, #56]	@ 0x38
 800ad36:	1c51      	adds	r1, r2, #1
 800ad38:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad3a:	7852      	ldrb	r2, [r2, #1]
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d1c5      	bne.n	800accc <_strtod_l+0x34>
 800ad40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad42:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f040 8570 	bne.w	800b82a <_strtod_l+0xb92>
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	465b      	mov	r3, fp
 800ad4e:	e7e5      	b.n	800ad1c <_strtod_l+0x84>
 800ad50:	2100      	movs	r1, #0
 800ad52:	e7ef      	b.n	800ad34 <_strtod_l+0x9c>
 800ad54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad56:	b13a      	cbz	r2, 800ad68 <_strtod_l+0xd0>
 800ad58:	2135      	movs	r1, #53	@ 0x35
 800ad5a:	a81c      	add	r0, sp, #112	@ 0x70
 800ad5c:	f7ff ff3a 	bl	800abd4 <__copybits>
 800ad60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad62:	9805      	ldr	r0, [sp, #20]
 800ad64:	f7ff fb10 	bl	800a388 <_Bfree>
 800ad68:	3e01      	subs	r6, #1
 800ad6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ad6c:	2e04      	cmp	r6, #4
 800ad6e:	d806      	bhi.n	800ad7e <_strtod_l+0xe6>
 800ad70:	e8df f006 	tbb	[pc, r6]
 800ad74:	201d0314 	.word	0x201d0314
 800ad78:	14          	.byte	0x14
 800ad79:	00          	.byte	0x00
 800ad7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ad7e:	05e1      	lsls	r1, r4, #23
 800ad80:	bf48      	it	mi
 800ad82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad8a:	0d1b      	lsrs	r3, r3, #20
 800ad8c:	051b      	lsls	r3, r3, #20
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1bb      	bne.n	800ad0a <_strtod_l+0x72>
 800ad92:	f7fe fb2d 	bl	80093f0 <__errno>
 800ad96:	2322      	movs	r3, #34	@ 0x22
 800ad98:	6003      	str	r3, [r0, #0]
 800ad9a:	e7b6      	b.n	800ad0a <_strtod_l+0x72>
 800ad9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ada0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ada4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ada8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adac:	e7e7      	b.n	800ad7e <_strtod_l+0xe6>
 800adae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800af30 <_strtod_l+0x298>
 800adb2:	e7e4      	b.n	800ad7e <_strtod_l+0xe6>
 800adb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800adb8:	f04f 3aff 	mov.w	sl, #4294967295
 800adbc:	e7df      	b.n	800ad7e <_strtod_l+0xe6>
 800adbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	2b30      	cmp	r3, #48	@ 0x30
 800adc8:	d0f9      	beq.n	800adbe <_strtod_l+0x126>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d09d      	beq.n	800ad0a <_strtod_l+0x72>
 800adce:	2301      	movs	r3, #1
 800add0:	2700      	movs	r7, #0
 800add2:	9308      	str	r3, [sp, #32]
 800add4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800add6:	930c      	str	r3, [sp, #48]	@ 0x30
 800add8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800adda:	46b9      	mov	r9, r7
 800addc:	220a      	movs	r2, #10
 800adde:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ade0:	7805      	ldrb	r5, [r0, #0]
 800ade2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ade6:	b2d9      	uxtb	r1, r3
 800ade8:	2909      	cmp	r1, #9
 800adea:	d928      	bls.n	800ae3e <_strtod_l+0x1a6>
 800adec:	494f      	ldr	r1, [pc, #316]	@ (800af2c <_strtod_l+0x294>)
 800adee:	2201      	movs	r2, #1
 800adf0:	f000 ffd6 	bl	800bda0 <strncmp>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d032      	beq.n	800ae5e <_strtod_l+0x1c6>
 800adf8:	2000      	movs	r0, #0
 800adfa:	462a      	mov	r2, r5
 800adfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800adfe:	464d      	mov	r5, r9
 800ae00:	4603      	mov	r3, r0
 800ae02:	2a65      	cmp	r2, #101	@ 0x65
 800ae04:	d001      	beq.n	800ae0a <_strtod_l+0x172>
 800ae06:	2a45      	cmp	r2, #69	@ 0x45
 800ae08:	d114      	bne.n	800ae34 <_strtod_l+0x19c>
 800ae0a:	b91d      	cbnz	r5, 800ae14 <_strtod_l+0x17c>
 800ae0c:	9a08      	ldr	r2, [sp, #32]
 800ae0e:	4302      	orrs	r2, r0
 800ae10:	d096      	beq.n	800ad40 <_strtod_l+0xa8>
 800ae12:	2500      	movs	r5, #0
 800ae14:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae16:	1c62      	adds	r2, r4, #1
 800ae18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae1a:	7862      	ldrb	r2, [r4, #1]
 800ae1c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae1e:	d07a      	beq.n	800af16 <_strtod_l+0x27e>
 800ae20:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae22:	d07e      	beq.n	800af22 <_strtod_l+0x28a>
 800ae24:	f04f 0c00 	mov.w	ip, #0
 800ae28:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae2c:	2909      	cmp	r1, #9
 800ae2e:	f240 8085 	bls.w	800af3c <_strtod_l+0x2a4>
 800ae32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae34:	f04f 0800 	mov.w	r8, #0
 800ae38:	e0a5      	b.n	800af86 <_strtod_l+0x2ee>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e7c8      	b.n	800add0 <_strtod_l+0x138>
 800ae3e:	f1b9 0f08 	cmp.w	r9, #8
 800ae42:	bfd8      	it	le
 800ae44:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ae46:	f100 0001 	add.w	r0, r0, #1
 800ae4a:	bfda      	itte	le
 800ae4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae50:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ae52:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ae56:	f109 0901 	add.w	r9, r9, #1
 800ae5a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae5c:	e7bf      	b.n	800adde <_strtod_l+0x146>
 800ae5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae64:	785a      	ldrb	r2, [r3, #1]
 800ae66:	f1b9 0f00 	cmp.w	r9, #0
 800ae6a:	d03b      	beq.n	800aee4 <_strtod_l+0x24c>
 800ae6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae6e:	464d      	mov	r5, r9
 800ae70:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	d912      	bls.n	800ae9e <_strtod_l+0x206>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e7c2      	b.n	800ae02 <_strtod_l+0x16a>
 800ae7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae82:	785a      	ldrb	r2, [r3, #1]
 800ae84:	3001      	adds	r0, #1
 800ae86:	2a30      	cmp	r2, #48	@ 0x30
 800ae88:	d0f8      	beq.n	800ae7c <_strtod_l+0x1e4>
 800ae8a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	f200 84d2 	bhi.w	800b838 <_strtod_l+0xba0>
 800ae94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae96:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae98:	2000      	movs	r0, #0
 800ae9a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	3a30      	subs	r2, #48	@ 0x30
 800aea0:	f100 0301 	add.w	r3, r0, #1
 800aea4:	d018      	beq.n	800aed8 <_strtod_l+0x240>
 800aea6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aea8:	4419      	add	r1, r3
 800aeaa:	910a      	str	r1, [sp, #40]	@ 0x28
 800aeac:	462e      	mov	r6, r5
 800aeae:	f04f 0e0a 	mov.w	lr, #10
 800aeb2:	1c71      	adds	r1, r6, #1
 800aeb4:	eba1 0c05 	sub.w	ip, r1, r5
 800aeb8:	4563      	cmp	r3, ip
 800aeba:	dc15      	bgt.n	800aee8 <_strtod_l+0x250>
 800aebc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aec0:	182b      	adds	r3, r5, r0
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	f105 0501 	add.w	r5, r5, #1
 800aec8:	4405      	add	r5, r0
 800aeca:	dc1a      	bgt.n	800af02 <_strtod_l+0x26a>
 800aecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aece:	230a      	movs	r3, #10
 800aed0:	fb03 2301 	mla	r3, r3, r1, r2
 800aed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aed6:	2300      	movs	r3, #0
 800aed8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aeda:	1c51      	adds	r1, r2, #1
 800aedc:	9119      	str	r1, [sp, #100]	@ 0x64
 800aede:	7852      	ldrb	r2, [r2, #1]
 800aee0:	4618      	mov	r0, r3
 800aee2:	e7c5      	b.n	800ae70 <_strtod_l+0x1d8>
 800aee4:	4648      	mov	r0, r9
 800aee6:	e7ce      	b.n	800ae86 <_strtod_l+0x1ee>
 800aee8:	2e08      	cmp	r6, #8
 800aeea:	dc05      	bgt.n	800aef8 <_strtod_l+0x260>
 800aeec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aeee:	fb0e f606 	mul.w	r6, lr, r6
 800aef2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800aef4:	460e      	mov	r6, r1
 800aef6:	e7dc      	b.n	800aeb2 <_strtod_l+0x21a>
 800aef8:	2910      	cmp	r1, #16
 800aefa:	bfd8      	it	le
 800aefc:	fb0e f707 	mulle.w	r7, lr, r7
 800af00:	e7f8      	b.n	800aef4 <_strtod_l+0x25c>
 800af02:	2b0f      	cmp	r3, #15
 800af04:	bfdc      	itt	le
 800af06:	230a      	movle	r3, #10
 800af08:	fb03 2707 	mlale	r7, r3, r7, r2
 800af0c:	e7e3      	b.n	800aed6 <_strtod_l+0x23e>
 800af0e:	2300      	movs	r3, #0
 800af10:	930a      	str	r3, [sp, #40]	@ 0x28
 800af12:	2301      	movs	r3, #1
 800af14:	e77a      	b.n	800ae0c <_strtod_l+0x174>
 800af16:	f04f 0c00 	mov.w	ip, #0
 800af1a:	1ca2      	adds	r2, r4, #2
 800af1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800af1e:	78a2      	ldrb	r2, [r4, #2]
 800af20:	e782      	b.n	800ae28 <_strtod_l+0x190>
 800af22:	f04f 0c01 	mov.w	ip, #1
 800af26:	e7f8      	b.n	800af1a <_strtod_l+0x282>
 800af28:	0800e1a4 	.word	0x0800e1a4
 800af2c:	0800dfd7 	.word	0x0800dfd7
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af36:	1c51      	adds	r1, r2, #1
 800af38:	9119      	str	r1, [sp, #100]	@ 0x64
 800af3a:	7852      	ldrb	r2, [r2, #1]
 800af3c:	2a30      	cmp	r2, #48	@ 0x30
 800af3e:	d0f9      	beq.n	800af34 <_strtod_l+0x29c>
 800af40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af44:	2908      	cmp	r1, #8
 800af46:	f63f af75 	bhi.w	800ae34 <_strtod_l+0x19c>
 800af4a:	3a30      	subs	r2, #48	@ 0x30
 800af4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af50:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af52:	f04f 080a 	mov.w	r8, #10
 800af56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af58:	1c56      	adds	r6, r2, #1
 800af5a:	9619      	str	r6, [sp, #100]	@ 0x64
 800af5c:	7852      	ldrb	r2, [r2, #1]
 800af5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800af62:	f1be 0f09 	cmp.w	lr, #9
 800af66:	d939      	bls.n	800afdc <_strtod_l+0x344>
 800af68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af6a:	1a76      	subs	r6, r6, r1
 800af6c:	2e08      	cmp	r6, #8
 800af6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800af72:	dc03      	bgt.n	800af7c <_strtod_l+0x2e4>
 800af74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af76:	4588      	cmp	r8, r1
 800af78:	bfa8      	it	ge
 800af7a:	4688      	movge	r8, r1
 800af7c:	f1bc 0f00 	cmp.w	ip, #0
 800af80:	d001      	beq.n	800af86 <_strtod_l+0x2ee>
 800af82:	f1c8 0800 	rsb	r8, r8, #0
 800af86:	2d00      	cmp	r5, #0
 800af88:	d14e      	bne.n	800b028 <_strtod_l+0x390>
 800af8a:	9908      	ldr	r1, [sp, #32]
 800af8c:	4308      	orrs	r0, r1
 800af8e:	f47f aebc 	bne.w	800ad0a <_strtod_l+0x72>
 800af92:	2b00      	cmp	r3, #0
 800af94:	f47f aed4 	bne.w	800ad40 <_strtod_l+0xa8>
 800af98:	2a69      	cmp	r2, #105	@ 0x69
 800af9a:	d028      	beq.n	800afee <_strtod_l+0x356>
 800af9c:	dc25      	bgt.n	800afea <_strtod_l+0x352>
 800af9e:	2a49      	cmp	r2, #73	@ 0x49
 800afa0:	d025      	beq.n	800afee <_strtod_l+0x356>
 800afa2:	2a4e      	cmp	r2, #78	@ 0x4e
 800afa4:	f47f aecc 	bne.w	800ad40 <_strtod_l+0xa8>
 800afa8:	499a      	ldr	r1, [pc, #616]	@ (800b214 <_strtod_l+0x57c>)
 800afaa:	a819      	add	r0, sp, #100	@ 0x64
 800afac:	f001 f9ec 	bl	800c388 <__match>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f43f aec5 	beq.w	800ad40 <_strtod_l+0xa8>
 800afb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b28      	cmp	r3, #40	@ 0x28
 800afbc:	d12e      	bne.n	800b01c <_strtod_l+0x384>
 800afbe:	4996      	ldr	r1, [pc, #600]	@ (800b218 <_strtod_l+0x580>)
 800afc0:	aa1c      	add	r2, sp, #112	@ 0x70
 800afc2:	a819      	add	r0, sp, #100	@ 0x64
 800afc4:	f001 f9f4 	bl	800c3b0 <__hexnan>
 800afc8:	2805      	cmp	r0, #5
 800afca:	d127      	bne.n	800b01c <_strtod_l+0x384>
 800afcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800afd2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800afd6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800afda:	e696      	b.n	800ad0a <_strtod_l+0x72>
 800afdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afde:	fb08 2101 	mla	r1, r8, r1, r2
 800afe2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800afe6:	9209      	str	r2, [sp, #36]	@ 0x24
 800afe8:	e7b5      	b.n	800af56 <_strtod_l+0x2be>
 800afea:	2a6e      	cmp	r2, #110	@ 0x6e
 800afec:	e7da      	b.n	800afa4 <_strtod_l+0x30c>
 800afee:	498b      	ldr	r1, [pc, #556]	@ (800b21c <_strtod_l+0x584>)
 800aff0:	a819      	add	r0, sp, #100	@ 0x64
 800aff2:	f001 f9c9 	bl	800c388 <__match>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	f43f aea2 	beq.w	800ad40 <_strtod_l+0xa8>
 800affc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800affe:	4988      	ldr	r1, [pc, #544]	@ (800b220 <_strtod_l+0x588>)
 800b000:	3b01      	subs	r3, #1
 800b002:	a819      	add	r0, sp, #100	@ 0x64
 800b004:	9319      	str	r3, [sp, #100]	@ 0x64
 800b006:	f001 f9bf 	bl	800c388 <__match>
 800b00a:	b910      	cbnz	r0, 800b012 <_strtod_l+0x37a>
 800b00c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b00e:	3301      	adds	r3, #1
 800b010:	9319      	str	r3, [sp, #100]	@ 0x64
 800b012:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b230 <_strtod_l+0x598>
 800b016:	f04f 0a00 	mov.w	sl, #0
 800b01a:	e676      	b.n	800ad0a <_strtod_l+0x72>
 800b01c:	4881      	ldr	r0, [pc, #516]	@ (800b224 <_strtod_l+0x58c>)
 800b01e:	f000 feef 	bl	800be00 <nan>
 800b022:	ec5b ab10 	vmov	sl, fp, d0
 800b026:	e670      	b.n	800ad0a <_strtod_l+0x72>
 800b028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b02a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b02c:	eba8 0303 	sub.w	r3, r8, r3
 800b030:	f1b9 0f00 	cmp.w	r9, #0
 800b034:	bf08      	it	eq
 800b036:	46a9      	moveq	r9, r5
 800b038:	2d10      	cmp	r5, #16
 800b03a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b03c:	462c      	mov	r4, r5
 800b03e:	bfa8      	it	ge
 800b040:	2410      	movge	r4, #16
 800b042:	f7f5 fa87 	bl	8000554 <__aeabi_ui2d>
 800b046:	2d09      	cmp	r5, #9
 800b048:	4682      	mov	sl, r0
 800b04a:	468b      	mov	fp, r1
 800b04c:	dc13      	bgt.n	800b076 <_strtod_l+0x3de>
 800b04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b050:	2b00      	cmp	r3, #0
 800b052:	f43f ae5a 	beq.w	800ad0a <_strtod_l+0x72>
 800b056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b058:	dd78      	ble.n	800b14c <_strtod_l+0x4b4>
 800b05a:	2b16      	cmp	r3, #22
 800b05c:	dc5f      	bgt.n	800b11e <_strtod_l+0x486>
 800b05e:	4972      	ldr	r1, [pc, #456]	@ (800b228 <_strtod_l+0x590>)
 800b060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b068:	4652      	mov	r2, sl
 800b06a:	465b      	mov	r3, fp
 800b06c:	f7f5 faec 	bl	8000648 <__aeabi_dmul>
 800b070:	4682      	mov	sl, r0
 800b072:	468b      	mov	fp, r1
 800b074:	e649      	b.n	800ad0a <_strtod_l+0x72>
 800b076:	4b6c      	ldr	r3, [pc, #432]	@ (800b228 <_strtod_l+0x590>)
 800b078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b07c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b080:	f7f5 fae2 	bl	8000648 <__aeabi_dmul>
 800b084:	4682      	mov	sl, r0
 800b086:	4638      	mov	r0, r7
 800b088:	468b      	mov	fp, r1
 800b08a:	f7f5 fa63 	bl	8000554 <__aeabi_ui2d>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4650      	mov	r0, sl
 800b094:	4659      	mov	r1, fp
 800b096:	f7f5 f921 	bl	80002dc <__adddf3>
 800b09a:	2d0f      	cmp	r5, #15
 800b09c:	4682      	mov	sl, r0
 800b09e:	468b      	mov	fp, r1
 800b0a0:	ddd5      	ble.n	800b04e <_strtod_l+0x3b6>
 800b0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a4:	1b2c      	subs	r4, r5, r4
 800b0a6:	441c      	add	r4, r3
 800b0a8:	2c00      	cmp	r4, #0
 800b0aa:	f340 8093 	ble.w	800b1d4 <_strtod_l+0x53c>
 800b0ae:	f014 030f 	ands.w	r3, r4, #15
 800b0b2:	d00a      	beq.n	800b0ca <_strtod_l+0x432>
 800b0b4:	495c      	ldr	r1, [pc, #368]	@ (800b228 <_strtod_l+0x590>)
 800b0b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0ba:	4652      	mov	r2, sl
 800b0bc:	465b      	mov	r3, fp
 800b0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c2:	f7f5 fac1 	bl	8000648 <__aeabi_dmul>
 800b0c6:	4682      	mov	sl, r0
 800b0c8:	468b      	mov	fp, r1
 800b0ca:	f034 040f 	bics.w	r4, r4, #15
 800b0ce:	d073      	beq.n	800b1b8 <_strtod_l+0x520>
 800b0d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b0d4:	dd49      	ble.n	800b16a <_strtod_l+0x4d2>
 800b0d6:	2400      	movs	r4, #0
 800b0d8:	46a0      	mov	r8, r4
 800b0da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0dc:	46a1      	mov	r9, r4
 800b0de:	9a05      	ldr	r2, [sp, #20]
 800b0e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b230 <_strtod_l+0x598>
 800b0e4:	2322      	movs	r3, #34	@ 0x22
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	f04f 0a00 	mov.w	sl, #0
 800b0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f43f ae0b 	beq.w	800ad0a <_strtod_l+0x72>
 800b0f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	f7ff f946 	bl	800a388 <_Bfree>
 800b0fc:	9805      	ldr	r0, [sp, #20]
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7ff f942 	bl	800a388 <_Bfree>
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	4641      	mov	r1, r8
 800b108:	f7ff f93e 	bl	800a388 <_Bfree>
 800b10c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b10e:	9805      	ldr	r0, [sp, #20]
 800b110:	f7ff f93a 	bl	800a388 <_Bfree>
 800b114:	9805      	ldr	r0, [sp, #20]
 800b116:	4621      	mov	r1, r4
 800b118:	f7ff f936 	bl	800a388 <_Bfree>
 800b11c:	e5f5      	b.n	800ad0a <_strtod_l+0x72>
 800b11e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b120:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b124:	4293      	cmp	r3, r2
 800b126:	dbbc      	blt.n	800b0a2 <_strtod_l+0x40a>
 800b128:	4c3f      	ldr	r4, [pc, #252]	@ (800b228 <_strtod_l+0x590>)
 800b12a:	f1c5 050f 	rsb	r5, r5, #15
 800b12e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b132:	4652      	mov	r2, sl
 800b134:	465b      	mov	r3, fp
 800b136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13a:	f7f5 fa85 	bl	8000648 <__aeabi_dmul>
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	1b5d      	subs	r5, r3, r5
 800b142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b14a:	e78f      	b.n	800b06c <_strtod_l+0x3d4>
 800b14c:	3316      	adds	r3, #22
 800b14e:	dba8      	blt.n	800b0a2 <_strtod_l+0x40a>
 800b150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b152:	eba3 0808 	sub.w	r8, r3, r8
 800b156:	4b34      	ldr	r3, [pc, #208]	@ (800b228 <_strtod_l+0x590>)
 800b158:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b15c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b160:	4650      	mov	r0, sl
 800b162:	4659      	mov	r1, fp
 800b164:	f7f5 fb9a 	bl	800089c <__aeabi_ddiv>
 800b168:	e782      	b.n	800b070 <_strtod_l+0x3d8>
 800b16a:	2300      	movs	r3, #0
 800b16c:	4f2f      	ldr	r7, [pc, #188]	@ (800b22c <_strtod_l+0x594>)
 800b16e:	1124      	asrs	r4, r4, #4
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	461e      	mov	r6, r3
 800b176:	2c01      	cmp	r4, #1
 800b178:	dc21      	bgt.n	800b1be <_strtod_l+0x526>
 800b17a:	b10b      	cbz	r3, 800b180 <_strtod_l+0x4e8>
 800b17c:	4682      	mov	sl, r0
 800b17e:	468b      	mov	fp, r1
 800b180:	492a      	ldr	r1, [pc, #168]	@ (800b22c <_strtod_l+0x594>)
 800b182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b186:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b18a:	4652      	mov	r2, sl
 800b18c:	465b      	mov	r3, fp
 800b18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b192:	f7f5 fa59 	bl	8000648 <__aeabi_dmul>
 800b196:	4b26      	ldr	r3, [pc, #152]	@ (800b230 <_strtod_l+0x598>)
 800b198:	460a      	mov	r2, r1
 800b19a:	400b      	ands	r3, r1
 800b19c:	4925      	ldr	r1, [pc, #148]	@ (800b234 <_strtod_l+0x59c>)
 800b19e:	428b      	cmp	r3, r1
 800b1a0:	4682      	mov	sl, r0
 800b1a2:	d898      	bhi.n	800b0d6 <_strtod_l+0x43e>
 800b1a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	bf86      	itte	hi
 800b1ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b238 <_strtod_l+0x5a0>
 800b1b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9308      	str	r3, [sp, #32]
 800b1bc:	e076      	b.n	800b2ac <_strtod_l+0x614>
 800b1be:	07e2      	lsls	r2, r4, #31
 800b1c0:	d504      	bpl.n	800b1cc <_strtod_l+0x534>
 800b1c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1c6:	f7f5 fa3f 	bl	8000648 <__aeabi_dmul>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	1064      	asrs	r4, r4, #1
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	e7d0      	b.n	800b176 <_strtod_l+0x4de>
 800b1d4:	d0f0      	beq.n	800b1b8 <_strtod_l+0x520>
 800b1d6:	4264      	negs	r4, r4
 800b1d8:	f014 020f 	ands.w	r2, r4, #15
 800b1dc:	d00a      	beq.n	800b1f4 <_strtod_l+0x55c>
 800b1de:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <_strtod_l+0x590>)
 800b1e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	4659      	mov	r1, fp
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 fb56 	bl	800089c <__aeabi_ddiv>
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	468b      	mov	fp, r1
 800b1f4:	1124      	asrs	r4, r4, #4
 800b1f6:	d0df      	beq.n	800b1b8 <_strtod_l+0x520>
 800b1f8:	2c1f      	cmp	r4, #31
 800b1fa:	dd1f      	ble.n	800b23c <_strtod_l+0x5a4>
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	46a0      	mov	r8, r4
 800b200:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b202:	46a1      	mov	r9, r4
 800b204:	9a05      	ldr	r2, [sp, #20]
 800b206:	2322      	movs	r3, #34	@ 0x22
 800b208:	f04f 0a00 	mov.w	sl, #0
 800b20c:	f04f 0b00 	mov.w	fp, #0
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	e76b      	b.n	800b0ec <_strtod_l+0x454>
 800b214:	0800dec5 	.word	0x0800dec5
 800b218:	0800e190 	.word	0x0800e190
 800b21c:	0800debd 	.word	0x0800debd
 800b220:	0800def4 	.word	0x0800def4
 800b224:	0800e02d 	.word	0x0800e02d
 800b228:	0800e0c8 	.word	0x0800e0c8
 800b22c:	0800e0a0 	.word	0x0800e0a0
 800b230:	7ff00000 	.word	0x7ff00000
 800b234:	7ca00000 	.word	0x7ca00000
 800b238:	7fefffff 	.word	0x7fefffff
 800b23c:	f014 0310 	ands.w	r3, r4, #16
 800b240:	bf18      	it	ne
 800b242:	236a      	movne	r3, #106	@ 0x6a
 800b244:	4ea9      	ldr	r6, [pc, #676]	@ (800b4ec <_strtod_l+0x854>)
 800b246:	9308      	str	r3, [sp, #32]
 800b248:	4650      	mov	r0, sl
 800b24a:	4659      	mov	r1, fp
 800b24c:	2300      	movs	r3, #0
 800b24e:	07e7      	lsls	r7, r4, #31
 800b250:	d504      	bpl.n	800b25c <_strtod_l+0x5c4>
 800b252:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b256:	f7f5 f9f7 	bl	8000648 <__aeabi_dmul>
 800b25a:	2301      	movs	r3, #1
 800b25c:	1064      	asrs	r4, r4, #1
 800b25e:	f106 0608 	add.w	r6, r6, #8
 800b262:	d1f4      	bne.n	800b24e <_strtod_l+0x5b6>
 800b264:	b10b      	cbz	r3, 800b26a <_strtod_l+0x5d2>
 800b266:	4682      	mov	sl, r0
 800b268:	468b      	mov	fp, r1
 800b26a:	9b08      	ldr	r3, [sp, #32]
 800b26c:	b1b3      	cbz	r3, 800b29c <_strtod_l+0x604>
 800b26e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b272:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b276:	2b00      	cmp	r3, #0
 800b278:	4659      	mov	r1, fp
 800b27a:	dd0f      	ble.n	800b29c <_strtod_l+0x604>
 800b27c:	2b1f      	cmp	r3, #31
 800b27e:	dd56      	ble.n	800b32e <_strtod_l+0x696>
 800b280:	2b34      	cmp	r3, #52	@ 0x34
 800b282:	bfde      	ittt	le
 800b284:	f04f 33ff 	movle.w	r3, #4294967295
 800b288:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b28c:	4093      	lslle	r3, r2
 800b28e:	f04f 0a00 	mov.w	sl, #0
 800b292:	bfcc      	ite	gt
 800b294:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b298:	ea03 0b01 	andle.w	fp, r3, r1
 800b29c:	2200      	movs	r2, #0
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4650      	mov	r0, sl
 800b2a2:	4659      	mov	r1, fp
 800b2a4:	f7f5 fc38 	bl	8000b18 <__aeabi_dcmpeq>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d1a7      	bne.n	800b1fc <_strtod_l+0x564>
 800b2ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b2b2:	9805      	ldr	r0, [sp, #20]
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	464a      	mov	r2, r9
 800b2b8:	f7ff f8ce 	bl	800a458 <__s2b>
 800b2bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f43f af09 	beq.w	800b0d6 <_strtod_l+0x43e>
 800b2c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	eba3 0308 	sub.w	r3, r3, r8
 800b2ce:	bfa8      	it	ge
 800b2d0:	2300      	movge	r3, #0
 800b2d2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2d4:	2400      	movs	r4, #0
 800b2d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2da:	9316      	str	r3, [sp, #88]	@ 0x58
 800b2dc:	46a0      	mov	r8, r4
 800b2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e0:	9805      	ldr	r0, [sp, #20]
 800b2e2:	6859      	ldr	r1, [r3, #4]
 800b2e4:	f7ff f810 	bl	800a308 <_Balloc>
 800b2e8:	4681      	mov	r9, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f43f aef7 	beq.w	800b0de <_strtod_l+0x446>
 800b2f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2f2:	691a      	ldr	r2, [r3, #16]
 800b2f4:	3202      	adds	r2, #2
 800b2f6:	f103 010c 	add.w	r1, r3, #12
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	300c      	adds	r0, #12
 800b2fe:	f000 fd71 	bl	800bde4 <memcpy>
 800b302:	ec4b ab10 	vmov	d0, sl, fp
 800b306:	9805      	ldr	r0, [sp, #20]
 800b308:	aa1c      	add	r2, sp, #112	@ 0x70
 800b30a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b30c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b310:	f7ff fbd6 	bl	800aac0 <__d2b>
 800b314:	901a      	str	r0, [sp, #104]	@ 0x68
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f aee1 	beq.w	800b0de <_strtod_l+0x446>
 800b31c:	9805      	ldr	r0, [sp, #20]
 800b31e:	2101      	movs	r1, #1
 800b320:	f7ff f930 	bl	800a584 <__i2b>
 800b324:	4680      	mov	r8, r0
 800b326:	b948      	cbnz	r0, 800b33c <_strtod_l+0x6a4>
 800b328:	f04f 0800 	mov.w	r8, #0
 800b32c:	e6d7      	b.n	800b0de <_strtod_l+0x446>
 800b32e:	f04f 32ff 	mov.w	r2, #4294967295
 800b332:	fa02 f303 	lsl.w	r3, r2, r3
 800b336:	ea03 0a0a 	and.w	sl, r3, sl
 800b33a:	e7af      	b.n	800b29c <_strtod_l+0x604>
 800b33c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b33e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b340:	2d00      	cmp	r5, #0
 800b342:	bfab      	itete	ge
 800b344:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b346:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b348:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b34a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b34c:	bfac      	ite	ge
 800b34e:	18ef      	addge	r7, r5, r3
 800b350:	1b5e      	sublt	r6, r3, r5
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	1aed      	subs	r5, r5, r3
 800b356:	4415      	add	r5, r2
 800b358:	4b65      	ldr	r3, [pc, #404]	@ (800b4f0 <_strtod_l+0x858>)
 800b35a:	3d01      	subs	r5, #1
 800b35c:	429d      	cmp	r5, r3
 800b35e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b362:	da50      	bge.n	800b406 <_strtod_l+0x76e>
 800b364:	1b5b      	subs	r3, r3, r5
 800b366:	2b1f      	cmp	r3, #31
 800b368:	eba2 0203 	sub.w	r2, r2, r3
 800b36c:	f04f 0101 	mov.w	r1, #1
 800b370:	dc3d      	bgt.n	800b3ee <_strtod_l+0x756>
 800b372:	fa01 f303 	lsl.w	r3, r1, r3
 800b376:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b378:	2300      	movs	r3, #0
 800b37a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b37c:	18bd      	adds	r5, r7, r2
 800b37e:	9b08      	ldr	r3, [sp, #32]
 800b380:	42af      	cmp	r7, r5
 800b382:	4416      	add	r6, r2
 800b384:	441e      	add	r6, r3
 800b386:	463b      	mov	r3, r7
 800b388:	bfa8      	it	ge
 800b38a:	462b      	movge	r3, r5
 800b38c:	42b3      	cmp	r3, r6
 800b38e:	bfa8      	it	ge
 800b390:	4633      	movge	r3, r6
 800b392:	2b00      	cmp	r3, #0
 800b394:	bfc2      	ittt	gt
 800b396:	1aed      	subgt	r5, r5, r3
 800b398:	1af6      	subgt	r6, r6, r3
 800b39a:	1aff      	subgt	r7, r7, r3
 800b39c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dd16      	ble.n	800b3d0 <_strtod_l+0x738>
 800b3a2:	4641      	mov	r1, r8
 800b3a4:	9805      	ldr	r0, [sp, #20]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f7ff f9a4 	bl	800a6f4 <__pow5mult>
 800b3ac:	4680      	mov	r8, r0
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d0ba      	beq.n	800b328 <_strtod_l+0x690>
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3b6:	9805      	ldr	r0, [sp, #20]
 800b3b8:	f7ff f8fa 	bl	800a5b0 <__multiply>
 800b3bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f43f ae8d 	beq.w	800b0de <_strtod_l+0x446>
 800b3c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3c6:	9805      	ldr	r0, [sp, #20]
 800b3c8:	f7fe ffde 	bl	800a388 <_Bfree>
 800b3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3d0:	2d00      	cmp	r5, #0
 800b3d2:	dc1d      	bgt.n	800b410 <_strtod_l+0x778>
 800b3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dd23      	ble.n	800b422 <_strtod_l+0x78a>
 800b3da:	4649      	mov	r1, r9
 800b3dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b3de:	9805      	ldr	r0, [sp, #20]
 800b3e0:	f7ff f988 	bl	800a6f4 <__pow5mult>
 800b3e4:	4681      	mov	r9, r0
 800b3e6:	b9e0      	cbnz	r0, 800b422 <_strtod_l+0x78a>
 800b3e8:	f04f 0900 	mov.w	r9, #0
 800b3ec:	e677      	b.n	800b0de <_strtod_l+0x446>
 800b3ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b3f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b3f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b3fa:	35e2      	adds	r5, #226	@ 0xe2
 800b3fc:	fa01 f305 	lsl.w	r3, r1, r5
 800b400:	9310      	str	r3, [sp, #64]	@ 0x40
 800b402:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b404:	e7ba      	b.n	800b37c <_strtod_l+0x6e4>
 800b406:	2300      	movs	r3, #0
 800b408:	9310      	str	r3, [sp, #64]	@ 0x40
 800b40a:	2301      	movs	r3, #1
 800b40c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b40e:	e7b5      	b.n	800b37c <_strtod_l+0x6e4>
 800b410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b412:	9805      	ldr	r0, [sp, #20]
 800b414:	462a      	mov	r2, r5
 800b416:	f7ff f9c7 	bl	800a7a8 <__lshift>
 800b41a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1d9      	bne.n	800b3d4 <_strtod_l+0x73c>
 800b420:	e65d      	b.n	800b0de <_strtod_l+0x446>
 800b422:	2e00      	cmp	r6, #0
 800b424:	dd07      	ble.n	800b436 <_strtod_l+0x79e>
 800b426:	4649      	mov	r1, r9
 800b428:	9805      	ldr	r0, [sp, #20]
 800b42a:	4632      	mov	r2, r6
 800b42c:	f7ff f9bc 	bl	800a7a8 <__lshift>
 800b430:	4681      	mov	r9, r0
 800b432:	2800      	cmp	r0, #0
 800b434:	d0d8      	beq.n	800b3e8 <_strtod_l+0x750>
 800b436:	2f00      	cmp	r7, #0
 800b438:	dd08      	ble.n	800b44c <_strtod_l+0x7b4>
 800b43a:	4641      	mov	r1, r8
 800b43c:	9805      	ldr	r0, [sp, #20]
 800b43e:	463a      	mov	r2, r7
 800b440:	f7ff f9b2 	bl	800a7a8 <__lshift>
 800b444:	4680      	mov	r8, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	f43f ae49 	beq.w	800b0de <_strtod_l+0x446>
 800b44c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b44e:	9805      	ldr	r0, [sp, #20]
 800b450:	464a      	mov	r2, r9
 800b452:	f7ff fa31 	bl	800a8b8 <__mdiff>
 800b456:	4604      	mov	r4, r0
 800b458:	2800      	cmp	r0, #0
 800b45a:	f43f ae40 	beq.w	800b0de <_strtod_l+0x446>
 800b45e:	68c3      	ldr	r3, [r0, #12]
 800b460:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b462:	2300      	movs	r3, #0
 800b464:	60c3      	str	r3, [r0, #12]
 800b466:	4641      	mov	r1, r8
 800b468:	f7ff fa0a 	bl	800a880 <__mcmp>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	da45      	bge.n	800b4fc <_strtod_l+0x864>
 800b470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b472:	ea53 030a 	orrs.w	r3, r3, sl
 800b476:	d16b      	bne.n	800b550 <_strtod_l+0x8b8>
 800b478:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d167      	bne.n	800b550 <_strtod_l+0x8b8>
 800b480:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b484:	0d1b      	lsrs	r3, r3, #20
 800b486:	051b      	lsls	r3, r3, #20
 800b488:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b48c:	d960      	bls.n	800b550 <_strtod_l+0x8b8>
 800b48e:	6963      	ldr	r3, [r4, #20]
 800b490:	b913      	cbnz	r3, 800b498 <_strtod_l+0x800>
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	2b01      	cmp	r3, #1
 800b496:	dd5b      	ble.n	800b550 <_strtod_l+0x8b8>
 800b498:	4621      	mov	r1, r4
 800b49a:	2201      	movs	r2, #1
 800b49c:	9805      	ldr	r0, [sp, #20]
 800b49e:	f7ff f983 	bl	800a7a8 <__lshift>
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	f7ff f9eb 	bl	800a880 <__mcmp>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	dd50      	ble.n	800b550 <_strtod_l+0x8b8>
 800b4ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4b2:	9a08      	ldr	r2, [sp, #32]
 800b4b4:	0d1b      	lsrs	r3, r3, #20
 800b4b6:	051b      	lsls	r3, r3, #20
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	d06a      	beq.n	800b592 <_strtod_l+0x8fa>
 800b4bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4c0:	d867      	bhi.n	800b592 <_strtod_l+0x8fa>
 800b4c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b4c6:	f67f ae9d 	bls.w	800b204 <_strtod_l+0x56c>
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f4 <_strtod_l+0x85c>)
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	4659      	mov	r1, fp
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f8b9 	bl	8000648 <__aeabi_dmul>
 800b4d6:	4b08      	ldr	r3, [pc, #32]	@ (800b4f8 <_strtod_l+0x860>)
 800b4d8:	400b      	ands	r3, r1
 800b4da:	4682      	mov	sl, r0
 800b4dc:	468b      	mov	fp, r1
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f47f ae08 	bne.w	800b0f4 <_strtod_l+0x45c>
 800b4e4:	9a05      	ldr	r2, [sp, #20]
 800b4e6:	2322      	movs	r3, #34	@ 0x22
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	e603      	b.n	800b0f4 <_strtod_l+0x45c>
 800b4ec:	0800e1b8 	.word	0x0800e1b8
 800b4f0:	fffffc02 	.word	0xfffffc02
 800b4f4:	39500000 	.word	0x39500000
 800b4f8:	7ff00000 	.word	0x7ff00000
 800b4fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b500:	d165      	bne.n	800b5ce <_strtod_l+0x936>
 800b502:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b508:	b35a      	cbz	r2, 800b562 <_strtod_l+0x8ca>
 800b50a:	4a9f      	ldr	r2, [pc, #636]	@ (800b788 <_strtod_l+0xaf0>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d12b      	bne.n	800b568 <_strtod_l+0x8d0>
 800b510:	9b08      	ldr	r3, [sp, #32]
 800b512:	4651      	mov	r1, sl
 800b514:	b303      	cbz	r3, 800b558 <_strtod_l+0x8c0>
 800b516:	4b9d      	ldr	r3, [pc, #628]	@ (800b78c <_strtod_l+0xaf4>)
 800b518:	465a      	mov	r2, fp
 800b51a:	4013      	ands	r3, r2
 800b51c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b520:	f04f 32ff 	mov.w	r2, #4294967295
 800b524:	d81b      	bhi.n	800b55e <_strtod_l+0x8c6>
 800b526:	0d1b      	lsrs	r3, r3, #20
 800b528:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b52c:	fa02 f303 	lsl.w	r3, r2, r3
 800b530:	4299      	cmp	r1, r3
 800b532:	d119      	bne.n	800b568 <_strtod_l+0x8d0>
 800b534:	4b96      	ldr	r3, [pc, #600]	@ (800b790 <_strtod_l+0xaf8>)
 800b536:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b538:	429a      	cmp	r2, r3
 800b53a:	d102      	bne.n	800b542 <_strtod_l+0x8aa>
 800b53c:	3101      	adds	r1, #1
 800b53e:	f43f adce 	beq.w	800b0de <_strtod_l+0x446>
 800b542:	4b92      	ldr	r3, [pc, #584]	@ (800b78c <_strtod_l+0xaf4>)
 800b544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b546:	401a      	ands	r2, r3
 800b548:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b54c:	f04f 0a00 	mov.w	sl, #0
 800b550:	9b08      	ldr	r3, [sp, #32]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1b9      	bne.n	800b4ca <_strtod_l+0x832>
 800b556:	e5cd      	b.n	800b0f4 <_strtod_l+0x45c>
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e7e8      	b.n	800b530 <_strtod_l+0x898>
 800b55e:	4613      	mov	r3, r2
 800b560:	e7e6      	b.n	800b530 <_strtod_l+0x898>
 800b562:	ea53 030a 	orrs.w	r3, r3, sl
 800b566:	d0a2      	beq.n	800b4ae <_strtod_l+0x816>
 800b568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b56a:	b1db      	cbz	r3, 800b5a4 <_strtod_l+0x90c>
 800b56c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b56e:	4213      	tst	r3, r2
 800b570:	d0ee      	beq.n	800b550 <_strtod_l+0x8b8>
 800b572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b574:	9a08      	ldr	r2, [sp, #32]
 800b576:	4650      	mov	r0, sl
 800b578:	4659      	mov	r1, fp
 800b57a:	b1bb      	cbz	r3, 800b5ac <_strtod_l+0x914>
 800b57c:	f7ff fb6e 	bl	800ac5c <sulp>
 800b580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b584:	ec53 2b10 	vmov	r2, r3, d0
 800b588:	f7f4 fea8 	bl	80002dc <__adddf3>
 800b58c:	4682      	mov	sl, r0
 800b58e:	468b      	mov	fp, r1
 800b590:	e7de      	b.n	800b550 <_strtod_l+0x8b8>
 800b592:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b596:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b59a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b59e:	f04f 3aff 	mov.w	sl, #4294967295
 800b5a2:	e7d5      	b.n	800b550 <_strtod_l+0x8b8>
 800b5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5a6:	ea13 0f0a 	tst.w	r3, sl
 800b5aa:	e7e1      	b.n	800b570 <_strtod_l+0x8d8>
 800b5ac:	f7ff fb56 	bl	800ac5c <sulp>
 800b5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5b4:	ec53 2b10 	vmov	r2, r3, d0
 800b5b8:	f7f4 fe8e 	bl	80002d8 <__aeabi_dsub>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	468b      	mov	fp, r1
 800b5c4:	f7f5 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d0c1      	beq.n	800b550 <_strtod_l+0x8b8>
 800b5cc:	e61a      	b.n	800b204 <_strtod_l+0x56c>
 800b5ce:	4641      	mov	r1, r8
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f7ff facd 	bl	800ab70 <__ratio>
 800b5d6:	ec57 6b10 	vmov	r6, r7, d0
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	f7f5 faac 	bl	8000b40 <__aeabi_dcmple>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d06f      	beq.n	800b6cc <_strtod_l+0xa34>
 800b5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d17a      	bne.n	800b6e8 <_strtod_l+0xa50>
 800b5f2:	f1ba 0f00 	cmp.w	sl, #0
 800b5f6:	d158      	bne.n	800b6aa <_strtod_l+0xa12>
 800b5f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d15a      	bne.n	800b6b8 <_strtod_l+0xa20>
 800b602:	4b64      	ldr	r3, [pc, #400]	@ (800b794 <_strtod_l+0xafc>)
 800b604:	2200      	movs	r2, #0
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	f7f5 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d159      	bne.n	800b6c6 <_strtod_l+0xa2e>
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	4b60      	ldr	r3, [pc, #384]	@ (800b798 <_strtod_l+0xb00>)
 800b618:	2200      	movs	r2, #0
 800b61a:	f7f5 f815 	bl	8000648 <__aeabi_dmul>
 800b61e:	4606      	mov	r6, r0
 800b620:	460f      	mov	r7, r1
 800b622:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b626:	9606      	str	r6, [sp, #24]
 800b628:	9307      	str	r3, [sp, #28]
 800b62a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b62e:	4d57      	ldr	r5, [pc, #348]	@ (800b78c <_strtod_l+0xaf4>)
 800b630:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b636:	401d      	ands	r5, r3
 800b638:	4b58      	ldr	r3, [pc, #352]	@ (800b79c <_strtod_l+0xb04>)
 800b63a:	429d      	cmp	r5, r3
 800b63c:	f040 80b2 	bne.w	800b7a4 <_strtod_l+0xb0c>
 800b640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b642:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b646:	ec4b ab10 	vmov	d0, sl, fp
 800b64a:	f7ff f9c9 	bl	800a9e0 <__ulp>
 800b64e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b652:	ec51 0b10 	vmov	r0, r1, d0
 800b656:	f7f4 fff7 	bl	8000648 <__aeabi_dmul>
 800b65a:	4652      	mov	r2, sl
 800b65c:	465b      	mov	r3, fp
 800b65e:	f7f4 fe3d 	bl	80002dc <__adddf3>
 800b662:	460b      	mov	r3, r1
 800b664:	4949      	ldr	r1, [pc, #292]	@ (800b78c <_strtod_l+0xaf4>)
 800b666:	4a4e      	ldr	r2, [pc, #312]	@ (800b7a0 <_strtod_l+0xb08>)
 800b668:	4019      	ands	r1, r3
 800b66a:	4291      	cmp	r1, r2
 800b66c:	4682      	mov	sl, r0
 800b66e:	d942      	bls.n	800b6f6 <_strtod_l+0xa5e>
 800b670:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b672:	4b47      	ldr	r3, [pc, #284]	@ (800b790 <_strtod_l+0xaf8>)
 800b674:	429a      	cmp	r2, r3
 800b676:	d103      	bne.n	800b680 <_strtod_l+0x9e8>
 800b678:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b67a:	3301      	adds	r3, #1
 800b67c:	f43f ad2f 	beq.w	800b0de <_strtod_l+0x446>
 800b680:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b790 <_strtod_l+0xaf8>
 800b684:	f04f 3aff 	mov.w	sl, #4294967295
 800b688:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b68a:	9805      	ldr	r0, [sp, #20]
 800b68c:	f7fe fe7c 	bl	800a388 <_Bfree>
 800b690:	9805      	ldr	r0, [sp, #20]
 800b692:	4649      	mov	r1, r9
 800b694:	f7fe fe78 	bl	800a388 <_Bfree>
 800b698:	9805      	ldr	r0, [sp, #20]
 800b69a:	4641      	mov	r1, r8
 800b69c:	f7fe fe74 	bl	800a388 <_Bfree>
 800b6a0:	9805      	ldr	r0, [sp, #20]
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	f7fe fe70 	bl	800a388 <_Bfree>
 800b6a8:	e619      	b.n	800b2de <_strtod_l+0x646>
 800b6aa:	f1ba 0f01 	cmp.w	sl, #1
 800b6ae:	d103      	bne.n	800b6b8 <_strtod_l+0xa20>
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f43f ada6 	beq.w	800b204 <_strtod_l+0x56c>
 800b6b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b768 <_strtod_l+0xad0>
 800b6bc:	4f35      	ldr	r7, [pc, #212]	@ (800b794 <_strtod_l+0xafc>)
 800b6be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	e7b1      	b.n	800b62a <_strtod_l+0x992>
 800b6c6:	4f34      	ldr	r7, [pc, #208]	@ (800b798 <_strtod_l+0xb00>)
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	e7aa      	b.n	800b622 <_strtod_l+0x98a>
 800b6cc:	4b32      	ldr	r3, [pc, #200]	@ (800b798 <_strtod_l+0xb00>)
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7f4 ffb8 	bl	8000648 <__aeabi_dmul>
 800b6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d09f      	beq.n	800b622 <_strtod_l+0x98a>
 800b6e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6e6:	e7a0      	b.n	800b62a <_strtod_l+0x992>
 800b6e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b770 <_strtod_l+0xad8>
 800b6ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6f0:	ec57 6b17 	vmov	r6, r7, d7
 800b6f4:	e799      	b.n	800b62a <_strtod_l+0x992>
 800b6f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1c1      	bne.n	800b688 <_strtod_l+0x9f0>
 800b704:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b708:	0d1b      	lsrs	r3, r3, #20
 800b70a:	051b      	lsls	r3, r3, #20
 800b70c:	429d      	cmp	r5, r3
 800b70e:	d1bb      	bne.n	800b688 <_strtod_l+0x9f0>
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f5 faf8 	bl	8000d08 <__aeabi_d2lz>
 800b718:	f7f4 ff68 	bl	80005ec <__aeabi_l2d>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4630      	mov	r0, r6
 800b722:	4639      	mov	r1, r7
 800b724:	f7f4 fdd8 	bl	80002d8 <__aeabi_dsub>
 800b728:	460b      	mov	r3, r1
 800b72a:	4602      	mov	r2, r0
 800b72c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b730:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b736:	ea46 060a 	orr.w	r6, r6, sl
 800b73a:	431e      	orrs	r6, r3
 800b73c:	d06f      	beq.n	800b81e <_strtod_l+0xb86>
 800b73e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b778 <_strtod_l+0xae0>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	f7f5 f9f2 	bl	8000b2c <__aeabi_dcmplt>
 800b748:	2800      	cmp	r0, #0
 800b74a:	f47f acd3 	bne.w	800b0f4 <_strtod_l+0x45c>
 800b74e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b780 <_strtod_l+0xae8>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b758:	f7f5 fa06 	bl	8000b68 <__aeabi_dcmpgt>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d093      	beq.n	800b688 <_strtod_l+0x9f0>
 800b760:	e4c8      	b.n	800b0f4 <_strtod_l+0x45c>
 800b762:	bf00      	nop
 800b764:	f3af 8000 	nop.w
 800b768:	00000000 	.word	0x00000000
 800b76c:	bff00000 	.word	0xbff00000
 800b770:	00000000 	.word	0x00000000
 800b774:	3ff00000 	.word	0x3ff00000
 800b778:	94a03595 	.word	0x94a03595
 800b77c:	3fdfffff 	.word	0x3fdfffff
 800b780:	35afe535 	.word	0x35afe535
 800b784:	3fe00000 	.word	0x3fe00000
 800b788:	000fffff 	.word	0x000fffff
 800b78c:	7ff00000 	.word	0x7ff00000
 800b790:	7fefffff 	.word	0x7fefffff
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	3fe00000 	.word	0x3fe00000
 800b79c:	7fe00000 	.word	0x7fe00000
 800b7a0:	7c9fffff 	.word	0x7c9fffff
 800b7a4:	9b08      	ldr	r3, [sp, #32]
 800b7a6:	b323      	cbz	r3, 800b7f2 <_strtod_l+0xb5a>
 800b7a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b7ac:	d821      	bhi.n	800b7f2 <_strtod_l+0xb5a>
 800b7ae:	a328      	add	r3, pc, #160	@ (adr r3, 800b850 <_strtod_l+0xbb8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f5 f9c2 	bl	8000b40 <__aeabi_dcmple>
 800b7bc:	b1a0      	cbz	r0, 800b7e8 <_strtod_l+0xb50>
 800b7be:	4639      	mov	r1, r7
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7f5 fa19 	bl	8000bf8 <__aeabi_d2uiz>
 800b7c6:	2801      	cmp	r0, #1
 800b7c8:	bf38      	it	cc
 800b7ca:	2001      	movcc	r0, #1
 800b7cc:	f7f4 fec2 	bl	8000554 <__aeabi_ui2d>
 800b7d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	b9fb      	cbnz	r3, 800b818 <_strtod_l+0xb80>
 800b7d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b7de:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b7e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b7ee:	1b5b      	subs	r3, r3, r5
 800b7f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b7fa:	f7ff f8f1 	bl	800a9e0 <__ulp>
 800b7fe:	4650      	mov	r0, sl
 800b800:	ec53 2b10 	vmov	r2, r3, d0
 800b804:	4659      	mov	r1, fp
 800b806:	f7f4 ff1f 	bl	8000648 <__aeabi_dmul>
 800b80a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b80e:	f7f4 fd65 	bl	80002dc <__adddf3>
 800b812:	4682      	mov	sl, r0
 800b814:	468b      	mov	fp, r1
 800b816:	e770      	b.n	800b6fa <_strtod_l+0xa62>
 800b818:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b81c:	e7e0      	b.n	800b7e0 <_strtod_l+0xb48>
 800b81e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b858 <_strtod_l+0xbc0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f5 f982 	bl	8000b2c <__aeabi_dcmplt>
 800b828:	e798      	b.n	800b75c <_strtod_l+0xac4>
 800b82a:	2300      	movs	r3, #0
 800b82c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b82e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	f7ff ba6d 	b.w	800ad12 <_strtod_l+0x7a>
 800b838:	2a65      	cmp	r2, #101	@ 0x65
 800b83a:	f43f ab68 	beq.w	800af0e <_strtod_l+0x276>
 800b83e:	2a45      	cmp	r2, #69	@ 0x45
 800b840:	f43f ab65 	beq.w	800af0e <_strtod_l+0x276>
 800b844:	2301      	movs	r3, #1
 800b846:	f7ff bba0 	b.w	800af8a <_strtod_l+0x2f2>
 800b84a:	bf00      	nop
 800b84c:	f3af 8000 	nop.w
 800b850:	ffc00000 	.word	0xffc00000
 800b854:	41dfffff 	.word	0x41dfffff
 800b858:	94a03595 	.word	0x94a03595
 800b85c:	3fcfffff 	.word	0x3fcfffff

0800b860 <_strtod_r>:
 800b860:	4b01      	ldr	r3, [pc, #4]	@ (800b868 <_strtod_r+0x8>)
 800b862:	f7ff ba19 	b.w	800ac98 <_strtod_l>
 800b866:	bf00      	nop
 800b868:	20000090 	.word	0x20000090

0800b86c <_strtol_l.isra.0>:
 800b86c:	2b24      	cmp	r3, #36	@ 0x24
 800b86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b872:	4686      	mov	lr, r0
 800b874:	4690      	mov	r8, r2
 800b876:	d801      	bhi.n	800b87c <_strtol_l.isra.0+0x10>
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d106      	bne.n	800b88a <_strtol_l.isra.0+0x1e>
 800b87c:	f7fd fdb8 	bl	80093f0 <__errno>
 800b880:	2316      	movs	r3, #22
 800b882:	6003      	str	r3, [r0, #0]
 800b884:	2000      	movs	r0, #0
 800b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88a:	4834      	ldr	r0, [pc, #208]	@ (800b95c <_strtol_l.isra.0+0xf0>)
 800b88c:	460d      	mov	r5, r1
 800b88e:	462a      	mov	r2, r5
 800b890:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b894:	5d06      	ldrb	r6, [r0, r4]
 800b896:	f016 0608 	ands.w	r6, r6, #8
 800b89a:	d1f8      	bne.n	800b88e <_strtol_l.isra.0+0x22>
 800b89c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b89e:	d110      	bne.n	800b8c2 <_strtol_l.isra.0+0x56>
 800b8a0:	782c      	ldrb	r4, [r5, #0]
 800b8a2:	2601      	movs	r6, #1
 800b8a4:	1c95      	adds	r5, r2, #2
 800b8a6:	f033 0210 	bics.w	r2, r3, #16
 800b8aa:	d115      	bne.n	800b8d8 <_strtol_l.isra.0+0x6c>
 800b8ac:	2c30      	cmp	r4, #48	@ 0x30
 800b8ae:	d10d      	bne.n	800b8cc <_strtol_l.isra.0+0x60>
 800b8b0:	782a      	ldrb	r2, [r5, #0]
 800b8b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8b6:	2a58      	cmp	r2, #88	@ 0x58
 800b8b8:	d108      	bne.n	800b8cc <_strtol_l.isra.0+0x60>
 800b8ba:	786c      	ldrb	r4, [r5, #1]
 800b8bc:	3502      	adds	r5, #2
 800b8be:	2310      	movs	r3, #16
 800b8c0:	e00a      	b.n	800b8d8 <_strtol_l.isra.0+0x6c>
 800b8c2:	2c2b      	cmp	r4, #43	@ 0x2b
 800b8c4:	bf04      	itt	eq
 800b8c6:	782c      	ldrbeq	r4, [r5, #0]
 800b8c8:	1c95      	addeq	r5, r2, #2
 800b8ca:	e7ec      	b.n	800b8a6 <_strtol_l.isra.0+0x3a>
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1f6      	bne.n	800b8be <_strtol_l.isra.0+0x52>
 800b8d0:	2c30      	cmp	r4, #48	@ 0x30
 800b8d2:	bf14      	ite	ne
 800b8d4:	230a      	movne	r3, #10
 800b8d6:	2308      	moveq	r3, #8
 800b8d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b8dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	fbbc f9f3 	udiv	r9, ip, r3
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b8f0:	2f09      	cmp	r7, #9
 800b8f2:	d80f      	bhi.n	800b914 <_strtol_l.isra.0+0xa8>
 800b8f4:	463c      	mov	r4, r7
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	dd1b      	ble.n	800b932 <_strtol_l.isra.0+0xc6>
 800b8fa:	1c57      	adds	r7, r2, #1
 800b8fc:	d007      	beq.n	800b90e <_strtol_l.isra.0+0xa2>
 800b8fe:	4581      	cmp	r9, r0
 800b900:	d314      	bcc.n	800b92c <_strtol_l.isra.0+0xc0>
 800b902:	d101      	bne.n	800b908 <_strtol_l.isra.0+0x9c>
 800b904:	45a2      	cmp	sl, r4
 800b906:	db11      	blt.n	800b92c <_strtol_l.isra.0+0xc0>
 800b908:	fb00 4003 	mla	r0, r0, r3, r4
 800b90c:	2201      	movs	r2, #1
 800b90e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b912:	e7eb      	b.n	800b8ec <_strtol_l.isra.0+0x80>
 800b914:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b918:	2f19      	cmp	r7, #25
 800b91a:	d801      	bhi.n	800b920 <_strtol_l.isra.0+0xb4>
 800b91c:	3c37      	subs	r4, #55	@ 0x37
 800b91e:	e7ea      	b.n	800b8f6 <_strtol_l.isra.0+0x8a>
 800b920:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b924:	2f19      	cmp	r7, #25
 800b926:	d804      	bhi.n	800b932 <_strtol_l.isra.0+0xc6>
 800b928:	3c57      	subs	r4, #87	@ 0x57
 800b92a:	e7e4      	b.n	800b8f6 <_strtol_l.isra.0+0x8a>
 800b92c:	f04f 32ff 	mov.w	r2, #4294967295
 800b930:	e7ed      	b.n	800b90e <_strtol_l.isra.0+0xa2>
 800b932:	1c53      	adds	r3, r2, #1
 800b934:	d108      	bne.n	800b948 <_strtol_l.isra.0+0xdc>
 800b936:	2322      	movs	r3, #34	@ 0x22
 800b938:	f8ce 3000 	str.w	r3, [lr]
 800b93c:	4660      	mov	r0, ip
 800b93e:	f1b8 0f00 	cmp.w	r8, #0
 800b942:	d0a0      	beq.n	800b886 <_strtol_l.isra.0+0x1a>
 800b944:	1e69      	subs	r1, r5, #1
 800b946:	e006      	b.n	800b956 <_strtol_l.isra.0+0xea>
 800b948:	b106      	cbz	r6, 800b94c <_strtol_l.isra.0+0xe0>
 800b94a:	4240      	negs	r0, r0
 800b94c:	f1b8 0f00 	cmp.w	r8, #0
 800b950:	d099      	beq.n	800b886 <_strtol_l.isra.0+0x1a>
 800b952:	2a00      	cmp	r2, #0
 800b954:	d1f6      	bne.n	800b944 <_strtol_l.isra.0+0xd8>
 800b956:	f8c8 1000 	str.w	r1, [r8]
 800b95a:	e794      	b.n	800b886 <_strtol_l.isra.0+0x1a>
 800b95c:	0800e1e1 	.word	0x0800e1e1

0800b960 <_strtol_r>:
 800b960:	f7ff bf84 	b.w	800b86c <_strtol_l.isra.0>

0800b964 <__ssputs_r>:
 800b964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b968:	688e      	ldr	r6, [r1, #8]
 800b96a:	461f      	mov	r7, r3
 800b96c:	42be      	cmp	r6, r7
 800b96e:	680b      	ldr	r3, [r1, #0]
 800b970:	4682      	mov	sl, r0
 800b972:	460c      	mov	r4, r1
 800b974:	4690      	mov	r8, r2
 800b976:	d82d      	bhi.n	800b9d4 <__ssputs_r+0x70>
 800b978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b97c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b980:	d026      	beq.n	800b9d0 <__ssputs_r+0x6c>
 800b982:	6965      	ldr	r5, [r4, #20]
 800b984:	6909      	ldr	r1, [r1, #16]
 800b986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b98a:	eba3 0901 	sub.w	r9, r3, r1
 800b98e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b992:	1c7b      	adds	r3, r7, #1
 800b994:	444b      	add	r3, r9
 800b996:	106d      	asrs	r5, r5, #1
 800b998:	429d      	cmp	r5, r3
 800b99a:	bf38      	it	cc
 800b99c:	461d      	movcc	r5, r3
 800b99e:	0553      	lsls	r3, r2, #21
 800b9a0:	d527      	bpl.n	800b9f2 <__ssputs_r+0x8e>
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f7fe fc24 	bl	800a1f0 <_malloc_r>
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	b360      	cbz	r0, 800ba06 <__ssputs_r+0xa2>
 800b9ac:	6921      	ldr	r1, [r4, #16]
 800b9ae:	464a      	mov	r2, r9
 800b9b0:	f000 fa18 	bl	800bde4 <memcpy>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	6126      	str	r6, [r4, #16]
 800b9c2:	6165      	str	r5, [r4, #20]
 800b9c4:	444e      	add	r6, r9
 800b9c6:	eba5 0509 	sub.w	r5, r5, r9
 800b9ca:	6026      	str	r6, [r4, #0]
 800b9cc:	60a5      	str	r5, [r4, #8]
 800b9ce:	463e      	mov	r6, r7
 800b9d0:	42be      	cmp	r6, r7
 800b9d2:	d900      	bls.n	800b9d6 <__ssputs_r+0x72>
 800b9d4:	463e      	mov	r6, r7
 800b9d6:	6820      	ldr	r0, [r4, #0]
 800b9d8:	4632      	mov	r2, r6
 800b9da:	4641      	mov	r1, r8
 800b9dc:	f000 f9c6 	bl	800bd6c <memmove>
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	1b9b      	subs	r3, r3, r6
 800b9e4:	60a3      	str	r3, [r4, #8]
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	4433      	add	r3, r6
 800b9ea:	6023      	str	r3, [r4, #0]
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f2:	462a      	mov	r2, r5
 800b9f4:	f000 fd89 	bl	800c50a <_realloc_r>
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d1e0      	bne.n	800b9c0 <__ssputs_r+0x5c>
 800b9fe:	6921      	ldr	r1, [r4, #16]
 800ba00:	4650      	mov	r0, sl
 800ba02:	f7fe fb81 	bl	800a108 <_free_r>
 800ba06:	230c      	movs	r3, #12
 800ba08:	f8ca 3000 	str.w	r3, [sl]
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba12:	81a3      	strh	r3, [r4, #12]
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	e7e9      	b.n	800b9ee <__ssputs_r+0x8a>
	...

0800ba1c <_svfiprintf_r>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	4698      	mov	r8, r3
 800ba22:	898b      	ldrh	r3, [r1, #12]
 800ba24:	061b      	lsls	r3, r3, #24
 800ba26:	b09d      	sub	sp, #116	@ 0x74
 800ba28:	4607      	mov	r7, r0
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	4614      	mov	r4, r2
 800ba2e:	d510      	bpl.n	800ba52 <_svfiprintf_r+0x36>
 800ba30:	690b      	ldr	r3, [r1, #16]
 800ba32:	b973      	cbnz	r3, 800ba52 <_svfiprintf_r+0x36>
 800ba34:	2140      	movs	r1, #64	@ 0x40
 800ba36:	f7fe fbdb 	bl	800a1f0 <_malloc_r>
 800ba3a:	6028      	str	r0, [r5, #0]
 800ba3c:	6128      	str	r0, [r5, #16]
 800ba3e:	b930      	cbnz	r0, 800ba4e <_svfiprintf_r+0x32>
 800ba40:	230c      	movs	r3, #12
 800ba42:	603b      	str	r3, [r7, #0]
 800ba44:	f04f 30ff 	mov.w	r0, #4294967295
 800ba48:	b01d      	add	sp, #116	@ 0x74
 800ba4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4e:	2340      	movs	r3, #64	@ 0x40
 800ba50:	616b      	str	r3, [r5, #20]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba56:	2320      	movs	r3, #32
 800ba58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba60:	2330      	movs	r3, #48	@ 0x30
 800ba62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc00 <_svfiprintf_r+0x1e4>
 800ba66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba6a:	f04f 0901 	mov.w	r9, #1
 800ba6e:	4623      	mov	r3, r4
 800ba70:	469a      	mov	sl, r3
 800ba72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba76:	b10a      	cbz	r2, 800ba7c <_svfiprintf_r+0x60>
 800ba78:	2a25      	cmp	r2, #37	@ 0x25
 800ba7a:	d1f9      	bne.n	800ba70 <_svfiprintf_r+0x54>
 800ba7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba80:	d00b      	beq.n	800ba9a <_svfiprintf_r+0x7e>
 800ba82:	465b      	mov	r3, fp
 800ba84:	4622      	mov	r2, r4
 800ba86:	4629      	mov	r1, r5
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7ff ff6b 	bl	800b964 <__ssputs_r>
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f000 80a7 	beq.w	800bbe2 <_svfiprintf_r+0x1c6>
 800ba94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba96:	445a      	add	r2, fp
 800ba98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 809f 	beq.w	800bbe2 <_svfiprintf_r+0x1c6>
 800baa4:	2300      	movs	r3, #0
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baae:	f10a 0a01 	add.w	sl, sl, #1
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	9307      	str	r3, [sp, #28]
 800bab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800baba:	931a      	str	r3, [sp, #104]	@ 0x68
 800babc:	4654      	mov	r4, sl
 800babe:	2205      	movs	r2, #5
 800bac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac4:	484e      	ldr	r0, [pc, #312]	@ (800bc00 <_svfiprintf_r+0x1e4>)
 800bac6:	f7f4 fbab 	bl	8000220 <memchr>
 800baca:	9a04      	ldr	r2, [sp, #16]
 800bacc:	b9d8      	cbnz	r0, 800bb06 <_svfiprintf_r+0xea>
 800bace:	06d0      	lsls	r0, r2, #27
 800bad0:	bf44      	itt	mi
 800bad2:	2320      	movmi	r3, #32
 800bad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bad8:	0711      	lsls	r1, r2, #28
 800bada:	bf44      	itt	mi
 800badc:	232b      	movmi	r3, #43	@ 0x2b
 800bade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bae2:	f89a 3000 	ldrb.w	r3, [sl]
 800bae6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bae8:	d015      	beq.n	800bb16 <_svfiprintf_r+0xfa>
 800baea:	9a07      	ldr	r2, [sp, #28]
 800baec:	4654      	mov	r4, sl
 800baee:	2000      	movs	r0, #0
 800baf0:	f04f 0c0a 	mov.w	ip, #10
 800baf4:	4621      	mov	r1, r4
 800baf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bafa:	3b30      	subs	r3, #48	@ 0x30
 800bafc:	2b09      	cmp	r3, #9
 800bafe:	d94b      	bls.n	800bb98 <_svfiprintf_r+0x17c>
 800bb00:	b1b0      	cbz	r0, 800bb30 <_svfiprintf_r+0x114>
 800bb02:	9207      	str	r2, [sp, #28]
 800bb04:	e014      	b.n	800bb30 <_svfiprintf_r+0x114>
 800bb06:	eba0 0308 	sub.w	r3, r0, r8
 800bb0a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	46a2      	mov	sl, r4
 800bb14:	e7d2      	b.n	800babc <_svfiprintf_r+0xa0>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	1d19      	adds	r1, r3, #4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	9103      	str	r1, [sp, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bfbb      	ittet	lt
 800bb22:	425b      	neglt	r3, r3
 800bb24:	f042 0202 	orrlt.w	r2, r2, #2
 800bb28:	9307      	strge	r3, [sp, #28]
 800bb2a:	9307      	strlt	r3, [sp, #28]
 800bb2c:	bfb8      	it	lt
 800bb2e:	9204      	strlt	r2, [sp, #16]
 800bb30:	7823      	ldrb	r3, [r4, #0]
 800bb32:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb34:	d10a      	bne.n	800bb4c <_svfiprintf_r+0x130>
 800bb36:	7863      	ldrb	r3, [r4, #1]
 800bb38:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb3a:	d132      	bne.n	800bba2 <_svfiprintf_r+0x186>
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	9203      	str	r2, [sp, #12]
 800bb44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb48:	3402      	adds	r4, #2
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc10 <_svfiprintf_r+0x1f4>
 800bb50:	7821      	ldrb	r1, [r4, #0]
 800bb52:	2203      	movs	r2, #3
 800bb54:	4650      	mov	r0, sl
 800bb56:	f7f4 fb63 	bl	8000220 <memchr>
 800bb5a:	b138      	cbz	r0, 800bb6c <_svfiprintf_r+0x150>
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	eba0 000a 	sub.w	r0, r0, sl
 800bb62:	2240      	movs	r2, #64	@ 0x40
 800bb64:	4082      	lsls	r2, r0
 800bb66:	4313      	orrs	r3, r2
 800bb68:	3401      	adds	r4, #1
 800bb6a:	9304      	str	r3, [sp, #16]
 800bb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb70:	4824      	ldr	r0, [pc, #144]	@ (800bc04 <_svfiprintf_r+0x1e8>)
 800bb72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb76:	2206      	movs	r2, #6
 800bb78:	f7f4 fb52 	bl	8000220 <memchr>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d036      	beq.n	800bbee <_svfiprintf_r+0x1d2>
 800bb80:	4b21      	ldr	r3, [pc, #132]	@ (800bc08 <_svfiprintf_r+0x1ec>)
 800bb82:	bb1b      	cbnz	r3, 800bbcc <_svfiprintf_r+0x1b0>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	3307      	adds	r3, #7
 800bb88:	f023 0307 	bic.w	r3, r3, #7
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	9303      	str	r3, [sp, #12]
 800bb90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb92:	4433      	add	r3, r6
 800bb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb96:	e76a      	b.n	800ba6e <_svfiprintf_r+0x52>
 800bb98:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	2001      	movs	r0, #1
 800bba0:	e7a8      	b.n	800baf4 <_svfiprintf_r+0xd8>
 800bba2:	2300      	movs	r3, #0
 800bba4:	3401      	adds	r4, #1
 800bba6:	9305      	str	r3, [sp, #20]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f04f 0c0a 	mov.w	ip, #10
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb4:	3a30      	subs	r2, #48	@ 0x30
 800bbb6:	2a09      	cmp	r2, #9
 800bbb8:	d903      	bls.n	800bbc2 <_svfiprintf_r+0x1a6>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0c6      	beq.n	800bb4c <_svfiprintf_r+0x130>
 800bbbe:	9105      	str	r1, [sp, #20]
 800bbc0:	e7c4      	b.n	800bb4c <_svfiprintf_r+0x130>
 800bbc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e7f0      	b.n	800bbae <_svfiprintf_r+0x192>
 800bbcc:	ab03      	add	r3, sp, #12
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc0c <_svfiprintf_r+0x1f0>)
 800bbd4:	a904      	add	r1, sp, #16
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f7fc fccc 	bl	8008574 <_printf_float>
 800bbdc:	1c42      	adds	r2, r0, #1
 800bbde:	4606      	mov	r6, r0
 800bbe0:	d1d6      	bne.n	800bb90 <_svfiprintf_r+0x174>
 800bbe2:	89ab      	ldrh	r3, [r5, #12]
 800bbe4:	065b      	lsls	r3, r3, #25
 800bbe6:	f53f af2d 	bmi.w	800ba44 <_svfiprintf_r+0x28>
 800bbea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbec:	e72c      	b.n	800ba48 <_svfiprintf_r+0x2c>
 800bbee:	ab03      	add	r3, sp, #12
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	462a      	mov	r2, r5
 800bbf4:	4b05      	ldr	r3, [pc, #20]	@ (800bc0c <_svfiprintf_r+0x1f0>)
 800bbf6:	a904      	add	r1, sp, #16
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f7fc ff53 	bl	8008aa4 <_printf_i>
 800bbfe:	e7ed      	b.n	800bbdc <_svfiprintf_r+0x1c0>
 800bc00:	0800dfd9 	.word	0x0800dfd9
 800bc04:	0800dfe3 	.word	0x0800dfe3
 800bc08:	08008575 	.word	0x08008575
 800bc0c:	0800b965 	.word	0x0800b965
 800bc10:	0800dfdf 	.word	0x0800dfdf

0800bc14 <__sflush_r>:
 800bc14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1c:	0716      	lsls	r6, r2, #28
 800bc1e:	4605      	mov	r5, r0
 800bc20:	460c      	mov	r4, r1
 800bc22:	d454      	bmi.n	800bcce <__sflush_r+0xba>
 800bc24:	684b      	ldr	r3, [r1, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dc02      	bgt.n	800bc30 <__sflush_r+0x1c>
 800bc2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dd48      	ble.n	800bcc2 <__sflush_r+0xae>
 800bc30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d045      	beq.n	800bcc2 <__sflush_r+0xae>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc3c:	682f      	ldr	r7, [r5, #0]
 800bc3e:	6a21      	ldr	r1, [r4, #32]
 800bc40:	602b      	str	r3, [r5, #0]
 800bc42:	d030      	beq.n	800bca6 <__sflush_r+0x92>
 800bc44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	0759      	lsls	r1, r3, #29
 800bc4a:	d505      	bpl.n	800bc58 <__sflush_r+0x44>
 800bc4c:	6863      	ldr	r3, [r4, #4]
 800bc4e:	1ad2      	subs	r2, r2, r3
 800bc50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc52:	b10b      	cbz	r3, 800bc58 <__sflush_r+0x44>
 800bc54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc56:	1ad2      	subs	r2, r2, r3
 800bc58:	2300      	movs	r3, #0
 800bc5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc5c:	6a21      	ldr	r1, [r4, #32]
 800bc5e:	4628      	mov	r0, r5
 800bc60:	47b0      	blx	r6
 800bc62:	1c43      	adds	r3, r0, #1
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	d106      	bne.n	800bc76 <__sflush_r+0x62>
 800bc68:	6829      	ldr	r1, [r5, #0]
 800bc6a:	291d      	cmp	r1, #29
 800bc6c:	d82b      	bhi.n	800bcc6 <__sflush_r+0xb2>
 800bc6e:	4a2a      	ldr	r2, [pc, #168]	@ (800bd18 <__sflush_r+0x104>)
 800bc70:	40ca      	lsrs	r2, r1
 800bc72:	07d6      	lsls	r6, r2, #31
 800bc74:	d527      	bpl.n	800bcc6 <__sflush_r+0xb2>
 800bc76:	2200      	movs	r2, #0
 800bc78:	6062      	str	r2, [r4, #4]
 800bc7a:	04d9      	lsls	r1, r3, #19
 800bc7c:	6922      	ldr	r2, [r4, #16]
 800bc7e:	6022      	str	r2, [r4, #0]
 800bc80:	d504      	bpl.n	800bc8c <__sflush_r+0x78>
 800bc82:	1c42      	adds	r2, r0, #1
 800bc84:	d101      	bne.n	800bc8a <__sflush_r+0x76>
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	b903      	cbnz	r3, 800bc8c <__sflush_r+0x78>
 800bc8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc8e:	602f      	str	r7, [r5, #0]
 800bc90:	b1b9      	cbz	r1, 800bcc2 <__sflush_r+0xae>
 800bc92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc96:	4299      	cmp	r1, r3
 800bc98:	d002      	beq.n	800bca0 <__sflush_r+0x8c>
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f7fe fa34 	bl	800a108 <_free_r>
 800bca0:	2300      	movs	r3, #0
 800bca2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bca4:	e00d      	b.n	800bcc2 <__sflush_r+0xae>
 800bca6:	2301      	movs	r3, #1
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b0      	blx	r6
 800bcac:	4602      	mov	r2, r0
 800bcae:	1c50      	adds	r0, r2, #1
 800bcb0:	d1c9      	bne.n	800bc46 <__sflush_r+0x32>
 800bcb2:	682b      	ldr	r3, [r5, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d0c6      	beq.n	800bc46 <__sflush_r+0x32>
 800bcb8:	2b1d      	cmp	r3, #29
 800bcba:	d001      	beq.n	800bcc0 <__sflush_r+0xac>
 800bcbc:	2b16      	cmp	r3, #22
 800bcbe:	d11e      	bne.n	800bcfe <__sflush_r+0xea>
 800bcc0:	602f      	str	r7, [r5, #0]
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	e022      	b.n	800bd0c <__sflush_r+0xf8>
 800bcc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcca:	b21b      	sxth	r3, r3
 800bccc:	e01b      	b.n	800bd06 <__sflush_r+0xf2>
 800bcce:	690f      	ldr	r7, [r1, #16]
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	d0f6      	beq.n	800bcc2 <__sflush_r+0xae>
 800bcd4:	0793      	lsls	r3, r2, #30
 800bcd6:	680e      	ldr	r6, [r1, #0]
 800bcd8:	bf08      	it	eq
 800bcda:	694b      	ldreq	r3, [r1, #20]
 800bcdc:	600f      	str	r7, [r1, #0]
 800bcde:	bf18      	it	ne
 800bce0:	2300      	movne	r3, #0
 800bce2:	eba6 0807 	sub.w	r8, r6, r7
 800bce6:	608b      	str	r3, [r1, #8]
 800bce8:	f1b8 0f00 	cmp.w	r8, #0
 800bcec:	dde9      	ble.n	800bcc2 <__sflush_r+0xae>
 800bcee:	6a21      	ldr	r1, [r4, #32]
 800bcf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bcf2:	4643      	mov	r3, r8
 800bcf4:	463a      	mov	r2, r7
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	47b0      	blx	r6
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	dc08      	bgt.n	800bd10 <__sflush_r+0xfc>
 800bcfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd10:	4407      	add	r7, r0
 800bd12:	eba8 0800 	sub.w	r8, r8, r0
 800bd16:	e7e7      	b.n	800bce8 <__sflush_r+0xd4>
 800bd18:	20400001 	.word	0x20400001

0800bd1c <_fflush_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	690b      	ldr	r3, [r1, #16]
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	b913      	cbnz	r3, 800bd2c <_fflush_r+0x10>
 800bd26:	2500      	movs	r5, #0
 800bd28:	4628      	mov	r0, r5
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	b118      	cbz	r0, 800bd36 <_fflush_r+0x1a>
 800bd2e:	6a03      	ldr	r3, [r0, #32]
 800bd30:	b90b      	cbnz	r3, 800bd36 <_fflush_r+0x1a>
 800bd32:	f7fd fa6f 	bl	8009214 <__sinit>
 800bd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0f3      	beq.n	800bd26 <_fflush_r+0xa>
 800bd3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd40:	07d0      	lsls	r0, r2, #31
 800bd42:	d404      	bmi.n	800bd4e <_fflush_r+0x32>
 800bd44:	0599      	lsls	r1, r3, #22
 800bd46:	d402      	bmi.n	800bd4e <_fflush_r+0x32>
 800bd48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd4a:	f7fd fb7c 	bl	8009446 <__retarget_lock_acquire_recursive>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	4621      	mov	r1, r4
 800bd52:	f7ff ff5f 	bl	800bc14 <__sflush_r>
 800bd56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd58:	07da      	lsls	r2, r3, #31
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	d4e4      	bmi.n	800bd28 <_fflush_r+0xc>
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	059b      	lsls	r3, r3, #22
 800bd62:	d4e1      	bmi.n	800bd28 <_fflush_r+0xc>
 800bd64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd66:	f7fd fb6f 	bl	8009448 <__retarget_lock_release_recursive>
 800bd6a:	e7dd      	b.n	800bd28 <_fflush_r+0xc>

0800bd6c <memmove>:
 800bd6c:	4288      	cmp	r0, r1
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	eb01 0402 	add.w	r4, r1, r2
 800bd74:	d902      	bls.n	800bd7c <memmove+0x10>
 800bd76:	4284      	cmp	r4, r0
 800bd78:	4623      	mov	r3, r4
 800bd7a:	d807      	bhi.n	800bd8c <memmove+0x20>
 800bd7c:	1e43      	subs	r3, r0, #1
 800bd7e:	42a1      	cmp	r1, r4
 800bd80:	d008      	beq.n	800bd94 <memmove+0x28>
 800bd82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd8a:	e7f8      	b.n	800bd7e <memmove+0x12>
 800bd8c:	4402      	add	r2, r0
 800bd8e:	4601      	mov	r1, r0
 800bd90:	428a      	cmp	r2, r1
 800bd92:	d100      	bne.n	800bd96 <memmove+0x2a>
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd9e:	e7f7      	b.n	800bd90 <memmove+0x24>

0800bda0 <strncmp>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	b16a      	cbz	r2, 800bdc0 <strncmp+0x20>
 800bda4:	3901      	subs	r1, #1
 800bda6:	1884      	adds	r4, r0, r2
 800bda8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d103      	bne.n	800bdbc <strncmp+0x1c>
 800bdb4:	42a0      	cmp	r0, r4
 800bdb6:	d001      	beq.n	800bdbc <strncmp+0x1c>
 800bdb8:	2a00      	cmp	r2, #0
 800bdba:	d1f5      	bne.n	800bda8 <strncmp+0x8>
 800bdbc:	1ad0      	subs	r0, r2, r3
 800bdbe:	bd10      	pop	{r4, pc}
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	e7fc      	b.n	800bdbe <strncmp+0x1e>

0800bdc4 <_sbrk_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d06      	ldr	r5, [pc, #24]	@ (800bde0 <_sbrk_r+0x1c>)
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4604      	mov	r4, r0
 800bdcc:	4608      	mov	r0, r1
 800bdce:	602b      	str	r3, [r5, #0]
 800bdd0:	f7f7 fa26 	bl	8003220 <_sbrk>
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	d102      	bne.n	800bdde <_sbrk_r+0x1a>
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	b103      	cbz	r3, 800bdde <_sbrk_r+0x1a>
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	20000728 	.word	0x20000728

0800bde4 <memcpy>:
 800bde4:	440a      	add	r2, r1
 800bde6:	4291      	cmp	r1, r2
 800bde8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdec:	d100      	bne.n	800bdf0 <memcpy+0xc>
 800bdee:	4770      	bx	lr
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdfa:	4291      	cmp	r1, r2
 800bdfc:	d1f9      	bne.n	800bdf2 <memcpy+0xe>
 800bdfe:	bd10      	pop	{r4, pc}

0800be00 <nan>:
 800be00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be08 <nan+0x8>
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	00000000 	.word	0x00000000
 800be0c:	7ff80000 	.word	0x7ff80000

0800be10 <__assert_func>:
 800be10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be12:	4614      	mov	r4, r2
 800be14:	461a      	mov	r2, r3
 800be16:	4b09      	ldr	r3, [pc, #36]	@ (800be3c <__assert_func+0x2c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4605      	mov	r5, r0
 800be1c:	68d8      	ldr	r0, [r3, #12]
 800be1e:	b14c      	cbz	r4, 800be34 <__assert_func+0x24>
 800be20:	4b07      	ldr	r3, [pc, #28]	@ (800be40 <__assert_func+0x30>)
 800be22:	9100      	str	r1, [sp, #0]
 800be24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be28:	4906      	ldr	r1, [pc, #24]	@ (800be44 <__assert_func+0x34>)
 800be2a:	462b      	mov	r3, r5
 800be2c:	f000 fba8 	bl	800c580 <fiprintf>
 800be30:	f000 fbb8 	bl	800c5a4 <abort>
 800be34:	4b04      	ldr	r3, [pc, #16]	@ (800be48 <__assert_func+0x38>)
 800be36:	461c      	mov	r4, r3
 800be38:	e7f3      	b.n	800be22 <__assert_func+0x12>
 800be3a:	bf00      	nop
 800be3c:	20000040 	.word	0x20000040
 800be40:	0800dff2 	.word	0x0800dff2
 800be44:	0800dfff 	.word	0x0800dfff
 800be48:	0800e02d 	.word	0x0800e02d

0800be4c <_calloc_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	fba1 5402 	umull	r5, r4, r1, r2
 800be52:	b934      	cbnz	r4, 800be62 <_calloc_r+0x16>
 800be54:	4629      	mov	r1, r5
 800be56:	f7fe f9cb 	bl	800a1f0 <_malloc_r>
 800be5a:	4606      	mov	r6, r0
 800be5c:	b928      	cbnz	r0, 800be6a <_calloc_r+0x1e>
 800be5e:	4630      	mov	r0, r6
 800be60:	bd70      	pop	{r4, r5, r6, pc}
 800be62:	220c      	movs	r2, #12
 800be64:	6002      	str	r2, [r0, #0]
 800be66:	2600      	movs	r6, #0
 800be68:	e7f9      	b.n	800be5e <_calloc_r+0x12>
 800be6a:	462a      	mov	r2, r5
 800be6c:	4621      	mov	r1, r4
 800be6e:	f7fd fa6c 	bl	800934a <memset>
 800be72:	e7f4      	b.n	800be5e <_calloc_r+0x12>

0800be74 <rshift>:
 800be74:	6903      	ldr	r3, [r0, #16]
 800be76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be82:	f100 0414 	add.w	r4, r0, #20
 800be86:	dd45      	ble.n	800bf14 <rshift+0xa0>
 800be88:	f011 011f 	ands.w	r1, r1, #31
 800be8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be94:	d10c      	bne.n	800beb0 <rshift+0x3c>
 800be96:	f100 0710 	add.w	r7, r0, #16
 800be9a:	4629      	mov	r1, r5
 800be9c:	42b1      	cmp	r1, r6
 800be9e:	d334      	bcc.n	800bf0a <rshift+0x96>
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	1eea      	subs	r2, r5, #3
 800bea6:	4296      	cmp	r6, r2
 800bea8:	bf38      	it	cc
 800beaa:	2300      	movcc	r3, #0
 800beac:	4423      	add	r3, r4
 800beae:	e015      	b.n	800bedc <rshift+0x68>
 800beb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800beb4:	f1c1 0820 	rsb	r8, r1, #32
 800beb8:	40cf      	lsrs	r7, r1
 800beba:	f105 0e04 	add.w	lr, r5, #4
 800bebe:	46a1      	mov	r9, r4
 800bec0:	4576      	cmp	r6, lr
 800bec2:	46f4      	mov	ip, lr
 800bec4:	d815      	bhi.n	800bef2 <rshift+0x7e>
 800bec6:	1a9a      	subs	r2, r3, r2
 800bec8:	0092      	lsls	r2, r2, #2
 800beca:	3a04      	subs	r2, #4
 800becc:	3501      	adds	r5, #1
 800bece:	42ae      	cmp	r6, r5
 800bed0:	bf38      	it	cc
 800bed2:	2200      	movcc	r2, #0
 800bed4:	18a3      	adds	r3, r4, r2
 800bed6:	50a7      	str	r7, [r4, r2]
 800bed8:	b107      	cbz	r7, 800bedc <rshift+0x68>
 800beda:	3304      	adds	r3, #4
 800bedc:	1b1a      	subs	r2, r3, r4
 800bede:	42a3      	cmp	r3, r4
 800bee0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bee4:	bf08      	it	eq
 800bee6:	2300      	moveq	r3, #0
 800bee8:	6102      	str	r2, [r0, #16]
 800beea:	bf08      	it	eq
 800beec:	6143      	streq	r3, [r0, #20]
 800beee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bef2:	f8dc c000 	ldr.w	ip, [ip]
 800bef6:	fa0c fc08 	lsl.w	ip, ip, r8
 800befa:	ea4c 0707 	orr.w	r7, ip, r7
 800befe:	f849 7b04 	str.w	r7, [r9], #4
 800bf02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf06:	40cf      	lsrs	r7, r1
 800bf08:	e7da      	b.n	800bec0 <rshift+0x4c>
 800bf0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf12:	e7c3      	b.n	800be9c <rshift+0x28>
 800bf14:	4623      	mov	r3, r4
 800bf16:	e7e1      	b.n	800bedc <rshift+0x68>

0800bf18 <__hexdig_fun>:
 800bf18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d802      	bhi.n	800bf26 <__hexdig_fun+0xe>
 800bf20:	3820      	subs	r0, #32
 800bf22:	b2c0      	uxtb	r0, r0
 800bf24:	4770      	bx	lr
 800bf26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bf2a:	2b05      	cmp	r3, #5
 800bf2c:	d801      	bhi.n	800bf32 <__hexdig_fun+0x1a>
 800bf2e:	3847      	subs	r0, #71	@ 0x47
 800bf30:	e7f7      	b.n	800bf22 <__hexdig_fun+0xa>
 800bf32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bf36:	2b05      	cmp	r3, #5
 800bf38:	d801      	bhi.n	800bf3e <__hexdig_fun+0x26>
 800bf3a:	3827      	subs	r0, #39	@ 0x27
 800bf3c:	e7f1      	b.n	800bf22 <__hexdig_fun+0xa>
 800bf3e:	2000      	movs	r0, #0
 800bf40:	4770      	bx	lr
	...

0800bf44 <__gethex>:
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	468a      	mov	sl, r1
 800bf4c:	9302      	str	r3, [sp, #8]
 800bf4e:	680b      	ldr	r3, [r1, #0]
 800bf50:	9001      	str	r0, [sp, #4]
 800bf52:	4690      	mov	r8, r2
 800bf54:	1c9c      	adds	r4, r3, #2
 800bf56:	46a1      	mov	r9, r4
 800bf58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bf5c:	2830      	cmp	r0, #48	@ 0x30
 800bf5e:	d0fa      	beq.n	800bf56 <__gethex+0x12>
 800bf60:	eba9 0303 	sub.w	r3, r9, r3
 800bf64:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf68:	f7ff ffd6 	bl	800bf18 <__hexdig_fun>
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d168      	bne.n	800c044 <__gethex+0x100>
 800bf72:	49a0      	ldr	r1, [pc, #640]	@ (800c1f4 <__gethex+0x2b0>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	4648      	mov	r0, r9
 800bf78:	f7ff ff12 	bl	800bda0 <strncmp>
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d167      	bne.n	800c052 <__gethex+0x10e>
 800bf82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf86:	4626      	mov	r6, r4
 800bf88:	f7ff ffc6 	bl	800bf18 <__hexdig_fun>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d062      	beq.n	800c056 <__gethex+0x112>
 800bf90:	4623      	mov	r3, r4
 800bf92:	7818      	ldrb	r0, [r3, #0]
 800bf94:	2830      	cmp	r0, #48	@ 0x30
 800bf96:	4699      	mov	r9, r3
 800bf98:	f103 0301 	add.w	r3, r3, #1
 800bf9c:	d0f9      	beq.n	800bf92 <__gethex+0x4e>
 800bf9e:	f7ff ffbb 	bl	800bf18 <__hexdig_fun>
 800bfa2:	fab0 f580 	clz	r5, r0
 800bfa6:	096d      	lsrs	r5, r5, #5
 800bfa8:	f04f 0b01 	mov.w	fp, #1
 800bfac:	464a      	mov	r2, r9
 800bfae:	4616      	mov	r6, r2
 800bfb0:	3201      	adds	r2, #1
 800bfb2:	7830      	ldrb	r0, [r6, #0]
 800bfb4:	f7ff ffb0 	bl	800bf18 <__hexdig_fun>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d1f8      	bne.n	800bfae <__gethex+0x6a>
 800bfbc:	498d      	ldr	r1, [pc, #564]	@ (800c1f4 <__gethex+0x2b0>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7ff feed 	bl	800bda0 <strncmp>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d13f      	bne.n	800c04a <__gethex+0x106>
 800bfca:	b944      	cbnz	r4, 800bfde <__gethex+0x9a>
 800bfcc:	1c74      	adds	r4, r6, #1
 800bfce:	4622      	mov	r2, r4
 800bfd0:	4616      	mov	r6, r2
 800bfd2:	3201      	adds	r2, #1
 800bfd4:	7830      	ldrb	r0, [r6, #0]
 800bfd6:	f7ff ff9f 	bl	800bf18 <__hexdig_fun>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d1f8      	bne.n	800bfd0 <__gethex+0x8c>
 800bfde:	1ba4      	subs	r4, r4, r6
 800bfe0:	00a7      	lsls	r7, r4, #2
 800bfe2:	7833      	ldrb	r3, [r6, #0]
 800bfe4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bfe8:	2b50      	cmp	r3, #80	@ 0x50
 800bfea:	d13e      	bne.n	800c06a <__gethex+0x126>
 800bfec:	7873      	ldrb	r3, [r6, #1]
 800bfee:	2b2b      	cmp	r3, #43	@ 0x2b
 800bff0:	d033      	beq.n	800c05a <__gethex+0x116>
 800bff2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bff4:	d034      	beq.n	800c060 <__gethex+0x11c>
 800bff6:	1c71      	adds	r1, r6, #1
 800bff8:	2400      	movs	r4, #0
 800bffa:	7808      	ldrb	r0, [r1, #0]
 800bffc:	f7ff ff8c 	bl	800bf18 <__hexdig_fun>
 800c000:	1e43      	subs	r3, r0, #1
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b18      	cmp	r3, #24
 800c006:	d830      	bhi.n	800c06a <__gethex+0x126>
 800c008:	f1a0 0210 	sub.w	r2, r0, #16
 800c00c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c010:	f7ff ff82 	bl	800bf18 <__hexdig_fun>
 800c014:	f100 3cff 	add.w	ip, r0, #4294967295
 800c018:	fa5f fc8c 	uxtb.w	ip, ip
 800c01c:	f1bc 0f18 	cmp.w	ip, #24
 800c020:	f04f 030a 	mov.w	r3, #10
 800c024:	d91e      	bls.n	800c064 <__gethex+0x120>
 800c026:	b104      	cbz	r4, 800c02a <__gethex+0xe6>
 800c028:	4252      	negs	r2, r2
 800c02a:	4417      	add	r7, r2
 800c02c:	f8ca 1000 	str.w	r1, [sl]
 800c030:	b1ed      	cbz	r5, 800c06e <__gethex+0x12a>
 800c032:	f1bb 0f00 	cmp.w	fp, #0
 800c036:	bf0c      	ite	eq
 800c038:	2506      	moveq	r5, #6
 800c03a:	2500      	movne	r5, #0
 800c03c:	4628      	mov	r0, r5
 800c03e:	b005      	add	sp, #20
 800c040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c044:	2500      	movs	r5, #0
 800c046:	462c      	mov	r4, r5
 800c048:	e7b0      	b.n	800bfac <__gethex+0x68>
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	d1c7      	bne.n	800bfde <__gethex+0x9a>
 800c04e:	4627      	mov	r7, r4
 800c050:	e7c7      	b.n	800bfe2 <__gethex+0x9e>
 800c052:	464e      	mov	r6, r9
 800c054:	462f      	mov	r7, r5
 800c056:	2501      	movs	r5, #1
 800c058:	e7c3      	b.n	800bfe2 <__gethex+0x9e>
 800c05a:	2400      	movs	r4, #0
 800c05c:	1cb1      	adds	r1, r6, #2
 800c05e:	e7cc      	b.n	800bffa <__gethex+0xb6>
 800c060:	2401      	movs	r4, #1
 800c062:	e7fb      	b.n	800c05c <__gethex+0x118>
 800c064:	fb03 0002 	mla	r0, r3, r2, r0
 800c068:	e7ce      	b.n	800c008 <__gethex+0xc4>
 800c06a:	4631      	mov	r1, r6
 800c06c:	e7de      	b.n	800c02c <__gethex+0xe8>
 800c06e:	eba6 0309 	sub.w	r3, r6, r9
 800c072:	3b01      	subs	r3, #1
 800c074:	4629      	mov	r1, r5
 800c076:	2b07      	cmp	r3, #7
 800c078:	dc0a      	bgt.n	800c090 <__gethex+0x14c>
 800c07a:	9801      	ldr	r0, [sp, #4]
 800c07c:	f7fe f944 	bl	800a308 <_Balloc>
 800c080:	4604      	mov	r4, r0
 800c082:	b940      	cbnz	r0, 800c096 <__gethex+0x152>
 800c084:	4b5c      	ldr	r3, [pc, #368]	@ (800c1f8 <__gethex+0x2b4>)
 800c086:	4602      	mov	r2, r0
 800c088:	21e4      	movs	r1, #228	@ 0xe4
 800c08a:	485c      	ldr	r0, [pc, #368]	@ (800c1fc <__gethex+0x2b8>)
 800c08c:	f7ff fec0 	bl	800be10 <__assert_func>
 800c090:	3101      	adds	r1, #1
 800c092:	105b      	asrs	r3, r3, #1
 800c094:	e7ef      	b.n	800c076 <__gethex+0x132>
 800c096:	f100 0a14 	add.w	sl, r0, #20
 800c09a:	2300      	movs	r3, #0
 800c09c:	4655      	mov	r5, sl
 800c09e:	469b      	mov	fp, r3
 800c0a0:	45b1      	cmp	r9, r6
 800c0a2:	d337      	bcc.n	800c114 <__gethex+0x1d0>
 800c0a4:	f845 bb04 	str.w	fp, [r5], #4
 800c0a8:	eba5 050a 	sub.w	r5, r5, sl
 800c0ac:	10ad      	asrs	r5, r5, #2
 800c0ae:	6125      	str	r5, [r4, #16]
 800c0b0:	4658      	mov	r0, fp
 800c0b2:	f7fe fa1b 	bl	800a4ec <__hi0bits>
 800c0b6:	016d      	lsls	r5, r5, #5
 800c0b8:	f8d8 6000 	ldr.w	r6, [r8]
 800c0bc:	1a2d      	subs	r5, r5, r0
 800c0be:	42b5      	cmp	r5, r6
 800c0c0:	dd54      	ble.n	800c16c <__gethex+0x228>
 800c0c2:	1bad      	subs	r5, r5, r6
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f7fe fda7 	bl	800ac1a <__any_on>
 800c0cc:	4681      	mov	r9, r0
 800c0ce:	b178      	cbz	r0, 800c0f0 <__gethex+0x1ac>
 800c0d0:	1e6b      	subs	r3, r5, #1
 800c0d2:	1159      	asrs	r1, r3, #5
 800c0d4:	f003 021f 	and.w	r2, r3, #31
 800c0d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c0dc:	f04f 0901 	mov.w	r9, #1
 800c0e0:	fa09 f202 	lsl.w	r2, r9, r2
 800c0e4:	420a      	tst	r2, r1
 800c0e6:	d003      	beq.n	800c0f0 <__gethex+0x1ac>
 800c0e8:	454b      	cmp	r3, r9
 800c0ea:	dc36      	bgt.n	800c15a <__gethex+0x216>
 800c0ec:	f04f 0902 	mov.w	r9, #2
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7ff febe 	bl	800be74 <rshift>
 800c0f8:	442f      	add	r7, r5
 800c0fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0fe:	42bb      	cmp	r3, r7
 800c100:	da42      	bge.n	800c188 <__gethex+0x244>
 800c102:	9801      	ldr	r0, [sp, #4]
 800c104:	4621      	mov	r1, r4
 800c106:	f7fe f93f 	bl	800a388 <_Bfree>
 800c10a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c10c:	2300      	movs	r3, #0
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	25a3      	movs	r5, #163	@ 0xa3
 800c112:	e793      	b.n	800c03c <__gethex+0xf8>
 800c114:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c118:	2a2e      	cmp	r2, #46	@ 0x2e
 800c11a:	d012      	beq.n	800c142 <__gethex+0x1fe>
 800c11c:	2b20      	cmp	r3, #32
 800c11e:	d104      	bne.n	800c12a <__gethex+0x1e6>
 800c120:	f845 bb04 	str.w	fp, [r5], #4
 800c124:	f04f 0b00 	mov.w	fp, #0
 800c128:	465b      	mov	r3, fp
 800c12a:	7830      	ldrb	r0, [r6, #0]
 800c12c:	9303      	str	r3, [sp, #12]
 800c12e:	f7ff fef3 	bl	800bf18 <__hexdig_fun>
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	f000 000f 	and.w	r0, r0, #15
 800c138:	4098      	lsls	r0, r3
 800c13a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c13e:	3304      	adds	r3, #4
 800c140:	e7ae      	b.n	800c0a0 <__gethex+0x15c>
 800c142:	45b1      	cmp	r9, r6
 800c144:	d8ea      	bhi.n	800c11c <__gethex+0x1d8>
 800c146:	492b      	ldr	r1, [pc, #172]	@ (800c1f4 <__gethex+0x2b0>)
 800c148:	9303      	str	r3, [sp, #12]
 800c14a:	2201      	movs	r2, #1
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7ff fe27 	bl	800bda0 <strncmp>
 800c152:	9b03      	ldr	r3, [sp, #12]
 800c154:	2800      	cmp	r0, #0
 800c156:	d1e1      	bne.n	800c11c <__gethex+0x1d8>
 800c158:	e7a2      	b.n	800c0a0 <__gethex+0x15c>
 800c15a:	1ea9      	subs	r1, r5, #2
 800c15c:	4620      	mov	r0, r4
 800c15e:	f7fe fd5c 	bl	800ac1a <__any_on>
 800c162:	2800      	cmp	r0, #0
 800c164:	d0c2      	beq.n	800c0ec <__gethex+0x1a8>
 800c166:	f04f 0903 	mov.w	r9, #3
 800c16a:	e7c1      	b.n	800c0f0 <__gethex+0x1ac>
 800c16c:	da09      	bge.n	800c182 <__gethex+0x23e>
 800c16e:	1b75      	subs	r5, r6, r5
 800c170:	4621      	mov	r1, r4
 800c172:	9801      	ldr	r0, [sp, #4]
 800c174:	462a      	mov	r2, r5
 800c176:	f7fe fb17 	bl	800a7a8 <__lshift>
 800c17a:	1b7f      	subs	r7, r7, r5
 800c17c:	4604      	mov	r4, r0
 800c17e:	f100 0a14 	add.w	sl, r0, #20
 800c182:	f04f 0900 	mov.w	r9, #0
 800c186:	e7b8      	b.n	800c0fa <__gethex+0x1b6>
 800c188:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c18c:	42bd      	cmp	r5, r7
 800c18e:	dd6f      	ble.n	800c270 <__gethex+0x32c>
 800c190:	1bed      	subs	r5, r5, r7
 800c192:	42ae      	cmp	r6, r5
 800c194:	dc34      	bgt.n	800c200 <__gethex+0x2bc>
 800c196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d022      	beq.n	800c1e4 <__gethex+0x2a0>
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d024      	beq.n	800c1ec <__gethex+0x2a8>
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d115      	bne.n	800c1d2 <__gethex+0x28e>
 800c1a6:	42ae      	cmp	r6, r5
 800c1a8:	d113      	bne.n	800c1d2 <__gethex+0x28e>
 800c1aa:	2e01      	cmp	r6, #1
 800c1ac:	d10b      	bne.n	800c1c6 <__gethex+0x282>
 800c1ae:	9a02      	ldr	r2, [sp, #8]
 800c1b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	f8ca 3000 	str.w	r3, [sl]
 800c1be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c0:	2562      	movs	r5, #98	@ 0x62
 800c1c2:	601c      	str	r4, [r3, #0]
 800c1c4:	e73a      	b.n	800c03c <__gethex+0xf8>
 800c1c6:	1e71      	subs	r1, r6, #1
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f7fe fd26 	bl	800ac1a <__any_on>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d1ed      	bne.n	800c1ae <__gethex+0x26a>
 800c1d2:	9801      	ldr	r0, [sp, #4]
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	f7fe f8d7 	bl	800a388 <_Bfree>
 800c1da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1dc:	2300      	movs	r3, #0
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	2550      	movs	r5, #80	@ 0x50
 800c1e2:	e72b      	b.n	800c03c <__gethex+0xf8>
 800c1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1f3      	bne.n	800c1d2 <__gethex+0x28e>
 800c1ea:	e7e0      	b.n	800c1ae <__gethex+0x26a>
 800c1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1dd      	bne.n	800c1ae <__gethex+0x26a>
 800c1f2:	e7ee      	b.n	800c1d2 <__gethex+0x28e>
 800c1f4:	0800dfd7 	.word	0x0800dfd7
 800c1f8:	0800df6d 	.word	0x0800df6d
 800c1fc:	0800e02e 	.word	0x0800e02e
 800c200:	1e6f      	subs	r7, r5, #1
 800c202:	f1b9 0f00 	cmp.w	r9, #0
 800c206:	d130      	bne.n	800c26a <__gethex+0x326>
 800c208:	b127      	cbz	r7, 800c214 <__gethex+0x2d0>
 800c20a:	4639      	mov	r1, r7
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7fe fd04 	bl	800ac1a <__any_on>
 800c212:	4681      	mov	r9, r0
 800c214:	117a      	asrs	r2, r7, #5
 800c216:	2301      	movs	r3, #1
 800c218:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c21c:	f007 071f 	and.w	r7, r7, #31
 800c220:	40bb      	lsls	r3, r7
 800c222:	4213      	tst	r3, r2
 800c224:	4629      	mov	r1, r5
 800c226:	4620      	mov	r0, r4
 800c228:	bf18      	it	ne
 800c22a:	f049 0902 	orrne.w	r9, r9, #2
 800c22e:	f7ff fe21 	bl	800be74 <rshift>
 800c232:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c236:	1b76      	subs	r6, r6, r5
 800c238:	2502      	movs	r5, #2
 800c23a:	f1b9 0f00 	cmp.w	r9, #0
 800c23e:	d047      	beq.n	800c2d0 <__gethex+0x38c>
 800c240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c244:	2b02      	cmp	r3, #2
 800c246:	d015      	beq.n	800c274 <__gethex+0x330>
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d017      	beq.n	800c27c <__gethex+0x338>
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d109      	bne.n	800c264 <__gethex+0x320>
 800c250:	f019 0f02 	tst.w	r9, #2
 800c254:	d006      	beq.n	800c264 <__gethex+0x320>
 800c256:	f8da 3000 	ldr.w	r3, [sl]
 800c25a:	ea49 0903 	orr.w	r9, r9, r3
 800c25e:	f019 0f01 	tst.w	r9, #1
 800c262:	d10e      	bne.n	800c282 <__gethex+0x33e>
 800c264:	f045 0510 	orr.w	r5, r5, #16
 800c268:	e032      	b.n	800c2d0 <__gethex+0x38c>
 800c26a:	f04f 0901 	mov.w	r9, #1
 800c26e:	e7d1      	b.n	800c214 <__gethex+0x2d0>
 800c270:	2501      	movs	r5, #1
 800c272:	e7e2      	b.n	800c23a <__gethex+0x2f6>
 800c274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c276:	f1c3 0301 	rsb	r3, r3, #1
 800c27a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d0f0      	beq.n	800c264 <__gethex+0x320>
 800c282:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c286:	f104 0314 	add.w	r3, r4, #20
 800c28a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c28e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c292:	f04f 0c00 	mov.w	ip, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f853 2b04 	ldr.w	r2, [r3], #4
 800c29c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c2a0:	d01b      	beq.n	800c2da <__gethex+0x396>
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	6002      	str	r2, [r0, #0]
 800c2a6:	2d02      	cmp	r5, #2
 800c2a8:	f104 0314 	add.w	r3, r4, #20
 800c2ac:	d13c      	bne.n	800c328 <__gethex+0x3e4>
 800c2ae:	f8d8 2000 	ldr.w	r2, [r8]
 800c2b2:	3a01      	subs	r2, #1
 800c2b4:	42b2      	cmp	r2, r6
 800c2b6:	d109      	bne.n	800c2cc <__gethex+0x388>
 800c2b8:	1171      	asrs	r1, r6, #5
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2c0:	f006 061f 	and.w	r6, r6, #31
 800c2c4:	fa02 f606 	lsl.w	r6, r2, r6
 800c2c8:	421e      	tst	r6, r3
 800c2ca:	d13a      	bne.n	800c342 <__gethex+0x3fe>
 800c2cc:	f045 0520 	orr.w	r5, r5, #32
 800c2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2d2:	601c      	str	r4, [r3, #0]
 800c2d4:	9b02      	ldr	r3, [sp, #8]
 800c2d6:	601f      	str	r7, [r3, #0]
 800c2d8:	e6b0      	b.n	800c03c <__gethex+0xf8>
 800c2da:	4299      	cmp	r1, r3
 800c2dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c2e0:	d8d9      	bhi.n	800c296 <__gethex+0x352>
 800c2e2:	68a3      	ldr	r3, [r4, #8]
 800c2e4:	459b      	cmp	fp, r3
 800c2e6:	db17      	blt.n	800c318 <__gethex+0x3d4>
 800c2e8:	6861      	ldr	r1, [r4, #4]
 800c2ea:	9801      	ldr	r0, [sp, #4]
 800c2ec:	3101      	adds	r1, #1
 800c2ee:	f7fe f80b 	bl	800a308 <_Balloc>
 800c2f2:	4681      	mov	r9, r0
 800c2f4:	b918      	cbnz	r0, 800c2fe <__gethex+0x3ba>
 800c2f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c360 <__gethex+0x41c>)
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	2184      	movs	r1, #132	@ 0x84
 800c2fc:	e6c5      	b.n	800c08a <__gethex+0x146>
 800c2fe:	6922      	ldr	r2, [r4, #16]
 800c300:	3202      	adds	r2, #2
 800c302:	f104 010c 	add.w	r1, r4, #12
 800c306:	0092      	lsls	r2, r2, #2
 800c308:	300c      	adds	r0, #12
 800c30a:	f7ff fd6b 	bl	800bde4 <memcpy>
 800c30e:	4621      	mov	r1, r4
 800c310:	9801      	ldr	r0, [sp, #4]
 800c312:	f7fe f839 	bl	800a388 <_Bfree>
 800c316:	464c      	mov	r4, r9
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c320:	6122      	str	r2, [r4, #16]
 800c322:	2201      	movs	r2, #1
 800c324:	615a      	str	r2, [r3, #20]
 800c326:	e7be      	b.n	800c2a6 <__gethex+0x362>
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	455a      	cmp	r2, fp
 800c32c:	dd0b      	ble.n	800c346 <__gethex+0x402>
 800c32e:	2101      	movs	r1, #1
 800c330:	4620      	mov	r0, r4
 800c332:	f7ff fd9f 	bl	800be74 <rshift>
 800c336:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c33a:	3701      	adds	r7, #1
 800c33c:	42bb      	cmp	r3, r7
 800c33e:	f6ff aee0 	blt.w	800c102 <__gethex+0x1be>
 800c342:	2501      	movs	r5, #1
 800c344:	e7c2      	b.n	800c2cc <__gethex+0x388>
 800c346:	f016 061f 	ands.w	r6, r6, #31
 800c34a:	d0fa      	beq.n	800c342 <__gethex+0x3fe>
 800c34c:	4453      	add	r3, sl
 800c34e:	f1c6 0620 	rsb	r6, r6, #32
 800c352:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c356:	f7fe f8c9 	bl	800a4ec <__hi0bits>
 800c35a:	42b0      	cmp	r0, r6
 800c35c:	dbe7      	blt.n	800c32e <__gethex+0x3ea>
 800c35e:	e7f0      	b.n	800c342 <__gethex+0x3fe>
 800c360:	0800df6d 	.word	0x0800df6d

0800c364 <L_shift>:
 800c364:	f1c2 0208 	rsb	r2, r2, #8
 800c368:	0092      	lsls	r2, r2, #2
 800c36a:	b570      	push	{r4, r5, r6, lr}
 800c36c:	f1c2 0620 	rsb	r6, r2, #32
 800c370:	6843      	ldr	r3, [r0, #4]
 800c372:	6804      	ldr	r4, [r0, #0]
 800c374:	fa03 f506 	lsl.w	r5, r3, r6
 800c378:	432c      	orrs	r4, r5
 800c37a:	40d3      	lsrs	r3, r2
 800c37c:	6004      	str	r4, [r0, #0]
 800c37e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c382:	4288      	cmp	r0, r1
 800c384:	d3f4      	bcc.n	800c370 <L_shift+0xc>
 800c386:	bd70      	pop	{r4, r5, r6, pc}

0800c388 <__match>:
 800c388:	b530      	push	{r4, r5, lr}
 800c38a:	6803      	ldr	r3, [r0, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c392:	b914      	cbnz	r4, 800c39a <__match+0x12>
 800c394:	6003      	str	r3, [r0, #0]
 800c396:	2001      	movs	r0, #1
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c39e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c3a2:	2d19      	cmp	r5, #25
 800c3a4:	bf98      	it	ls
 800c3a6:	3220      	addls	r2, #32
 800c3a8:	42a2      	cmp	r2, r4
 800c3aa:	d0f0      	beq.n	800c38e <__match+0x6>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	e7f3      	b.n	800c398 <__match+0x10>

0800c3b0 <__hexnan>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	680b      	ldr	r3, [r1, #0]
 800c3b6:	6801      	ldr	r1, [r0, #0]
 800c3b8:	115e      	asrs	r6, r3, #5
 800c3ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3be:	f013 031f 	ands.w	r3, r3, #31
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	bf18      	it	ne
 800c3c6:	3604      	addne	r6, #4
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	1f37      	subs	r7, r6, #4
 800c3cc:	4682      	mov	sl, r0
 800c3ce:	4690      	mov	r8, r2
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3d6:	46b9      	mov	r9, r7
 800c3d8:	463c      	mov	r4, r7
 800c3da:	9502      	str	r5, [sp, #8]
 800c3dc:	46ab      	mov	fp, r5
 800c3de:	784a      	ldrb	r2, [r1, #1]
 800c3e0:	1c4b      	adds	r3, r1, #1
 800c3e2:	9303      	str	r3, [sp, #12]
 800c3e4:	b342      	cbz	r2, 800c438 <__hexnan+0x88>
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	9105      	str	r1, [sp, #20]
 800c3ea:	9204      	str	r2, [sp, #16]
 800c3ec:	f7ff fd94 	bl	800bf18 <__hexdig_fun>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d151      	bne.n	800c498 <__hexnan+0xe8>
 800c3f4:	9a04      	ldr	r2, [sp, #16]
 800c3f6:	9905      	ldr	r1, [sp, #20]
 800c3f8:	2a20      	cmp	r2, #32
 800c3fa:	d818      	bhi.n	800c42e <__hexnan+0x7e>
 800c3fc:	9b02      	ldr	r3, [sp, #8]
 800c3fe:	459b      	cmp	fp, r3
 800c400:	dd13      	ble.n	800c42a <__hexnan+0x7a>
 800c402:	454c      	cmp	r4, r9
 800c404:	d206      	bcs.n	800c414 <__hexnan+0x64>
 800c406:	2d07      	cmp	r5, #7
 800c408:	dc04      	bgt.n	800c414 <__hexnan+0x64>
 800c40a:	462a      	mov	r2, r5
 800c40c:	4649      	mov	r1, r9
 800c40e:	4620      	mov	r0, r4
 800c410:	f7ff ffa8 	bl	800c364 <L_shift>
 800c414:	4544      	cmp	r4, r8
 800c416:	d952      	bls.n	800c4be <__hexnan+0x10e>
 800c418:	2300      	movs	r3, #0
 800c41a:	f1a4 0904 	sub.w	r9, r4, #4
 800c41e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c422:	f8cd b008 	str.w	fp, [sp, #8]
 800c426:	464c      	mov	r4, r9
 800c428:	461d      	mov	r5, r3
 800c42a:	9903      	ldr	r1, [sp, #12]
 800c42c:	e7d7      	b.n	800c3de <__hexnan+0x2e>
 800c42e:	2a29      	cmp	r2, #41	@ 0x29
 800c430:	d157      	bne.n	800c4e2 <__hexnan+0x132>
 800c432:	3102      	adds	r1, #2
 800c434:	f8ca 1000 	str.w	r1, [sl]
 800c438:	f1bb 0f00 	cmp.w	fp, #0
 800c43c:	d051      	beq.n	800c4e2 <__hexnan+0x132>
 800c43e:	454c      	cmp	r4, r9
 800c440:	d206      	bcs.n	800c450 <__hexnan+0xa0>
 800c442:	2d07      	cmp	r5, #7
 800c444:	dc04      	bgt.n	800c450 <__hexnan+0xa0>
 800c446:	462a      	mov	r2, r5
 800c448:	4649      	mov	r1, r9
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7ff ff8a 	bl	800c364 <L_shift>
 800c450:	4544      	cmp	r4, r8
 800c452:	d936      	bls.n	800c4c2 <__hexnan+0x112>
 800c454:	f1a8 0204 	sub.w	r2, r8, #4
 800c458:	4623      	mov	r3, r4
 800c45a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c45e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c462:	429f      	cmp	r7, r3
 800c464:	d2f9      	bcs.n	800c45a <__hexnan+0xaa>
 800c466:	1b3b      	subs	r3, r7, r4
 800c468:	f023 0303 	bic.w	r3, r3, #3
 800c46c:	3304      	adds	r3, #4
 800c46e:	3401      	adds	r4, #1
 800c470:	3e03      	subs	r6, #3
 800c472:	42b4      	cmp	r4, r6
 800c474:	bf88      	it	hi
 800c476:	2304      	movhi	r3, #4
 800c478:	4443      	add	r3, r8
 800c47a:	2200      	movs	r2, #0
 800c47c:	f843 2b04 	str.w	r2, [r3], #4
 800c480:	429f      	cmp	r7, r3
 800c482:	d2fb      	bcs.n	800c47c <__hexnan+0xcc>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	b91b      	cbnz	r3, 800c490 <__hexnan+0xe0>
 800c488:	4547      	cmp	r7, r8
 800c48a:	d128      	bne.n	800c4de <__hexnan+0x12e>
 800c48c:	2301      	movs	r3, #1
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	2005      	movs	r0, #5
 800c492:	b007      	add	sp, #28
 800c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c498:	3501      	adds	r5, #1
 800c49a:	2d08      	cmp	r5, #8
 800c49c:	f10b 0b01 	add.w	fp, fp, #1
 800c4a0:	dd06      	ble.n	800c4b0 <__hexnan+0x100>
 800c4a2:	4544      	cmp	r4, r8
 800c4a4:	d9c1      	bls.n	800c42a <__hexnan+0x7a>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4ac:	2501      	movs	r5, #1
 800c4ae:	3c04      	subs	r4, #4
 800c4b0:	6822      	ldr	r2, [r4, #0]
 800c4b2:	f000 000f 	and.w	r0, r0, #15
 800c4b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c4ba:	6020      	str	r0, [r4, #0]
 800c4bc:	e7b5      	b.n	800c42a <__hexnan+0x7a>
 800c4be:	2508      	movs	r5, #8
 800c4c0:	e7b3      	b.n	800c42a <__hexnan+0x7a>
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0dd      	beq.n	800c484 <__hexnan+0xd4>
 800c4c8:	f1c3 0320 	rsb	r3, r3, #32
 800c4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d0:	40da      	lsrs	r2, r3
 800c4d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c4dc:	e7d2      	b.n	800c484 <__hexnan+0xd4>
 800c4de:	3f04      	subs	r7, #4
 800c4e0:	e7d0      	b.n	800c484 <__hexnan+0xd4>
 800c4e2:	2004      	movs	r0, #4
 800c4e4:	e7d5      	b.n	800c492 <__hexnan+0xe2>

0800c4e6 <__ascii_mbtowc>:
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	b901      	cbnz	r1, 800c4ec <__ascii_mbtowc+0x6>
 800c4ea:	a901      	add	r1, sp, #4
 800c4ec:	b142      	cbz	r2, 800c500 <__ascii_mbtowc+0x1a>
 800c4ee:	b14b      	cbz	r3, 800c504 <__ascii_mbtowc+0x1e>
 800c4f0:	7813      	ldrb	r3, [r2, #0]
 800c4f2:	600b      	str	r3, [r1, #0]
 800c4f4:	7812      	ldrb	r2, [r2, #0]
 800c4f6:	1e10      	subs	r0, r2, #0
 800c4f8:	bf18      	it	ne
 800c4fa:	2001      	movne	r0, #1
 800c4fc:	b002      	add	sp, #8
 800c4fe:	4770      	bx	lr
 800c500:	4610      	mov	r0, r2
 800c502:	e7fb      	b.n	800c4fc <__ascii_mbtowc+0x16>
 800c504:	f06f 0001 	mvn.w	r0, #1
 800c508:	e7f8      	b.n	800c4fc <__ascii_mbtowc+0x16>

0800c50a <_realloc_r>:
 800c50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c50e:	4607      	mov	r7, r0
 800c510:	4614      	mov	r4, r2
 800c512:	460d      	mov	r5, r1
 800c514:	b921      	cbnz	r1, 800c520 <_realloc_r+0x16>
 800c516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c51a:	4611      	mov	r1, r2
 800c51c:	f7fd be68 	b.w	800a1f0 <_malloc_r>
 800c520:	b92a      	cbnz	r2, 800c52e <_realloc_r+0x24>
 800c522:	f7fd fdf1 	bl	800a108 <_free_r>
 800c526:	4625      	mov	r5, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c52e:	f000 f840 	bl	800c5b2 <_malloc_usable_size_r>
 800c532:	4284      	cmp	r4, r0
 800c534:	4606      	mov	r6, r0
 800c536:	d802      	bhi.n	800c53e <_realloc_r+0x34>
 800c538:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c53c:	d8f4      	bhi.n	800c528 <_realloc_r+0x1e>
 800c53e:	4621      	mov	r1, r4
 800c540:	4638      	mov	r0, r7
 800c542:	f7fd fe55 	bl	800a1f0 <_malloc_r>
 800c546:	4680      	mov	r8, r0
 800c548:	b908      	cbnz	r0, 800c54e <_realloc_r+0x44>
 800c54a:	4645      	mov	r5, r8
 800c54c:	e7ec      	b.n	800c528 <_realloc_r+0x1e>
 800c54e:	42b4      	cmp	r4, r6
 800c550:	4622      	mov	r2, r4
 800c552:	4629      	mov	r1, r5
 800c554:	bf28      	it	cs
 800c556:	4632      	movcs	r2, r6
 800c558:	f7ff fc44 	bl	800bde4 <memcpy>
 800c55c:	4629      	mov	r1, r5
 800c55e:	4638      	mov	r0, r7
 800c560:	f7fd fdd2 	bl	800a108 <_free_r>
 800c564:	e7f1      	b.n	800c54a <_realloc_r+0x40>

0800c566 <__ascii_wctomb>:
 800c566:	4603      	mov	r3, r0
 800c568:	4608      	mov	r0, r1
 800c56a:	b141      	cbz	r1, 800c57e <__ascii_wctomb+0x18>
 800c56c:	2aff      	cmp	r2, #255	@ 0xff
 800c56e:	d904      	bls.n	800c57a <__ascii_wctomb+0x14>
 800c570:	228a      	movs	r2, #138	@ 0x8a
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	4770      	bx	lr
 800c57a:	700a      	strb	r2, [r1, #0]
 800c57c:	2001      	movs	r0, #1
 800c57e:	4770      	bx	lr

0800c580 <fiprintf>:
 800c580:	b40e      	push	{r1, r2, r3}
 800c582:	b503      	push	{r0, r1, lr}
 800c584:	4601      	mov	r1, r0
 800c586:	ab03      	add	r3, sp, #12
 800c588:	4805      	ldr	r0, [pc, #20]	@ (800c5a0 <fiprintf+0x20>)
 800c58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c58e:	6800      	ldr	r0, [r0, #0]
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	f000 f83f 	bl	800c614 <_vfiprintf_r>
 800c596:	b002      	add	sp, #8
 800c598:	f85d eb04 	ldr.w	lr, [sp], #4
 800c59c:	b003      	add	sp, #12
 800c59e:	4770      	bx	lr
 800c5a0:	20000040 	.word	0x20000040

0800c5a4 <abort>:
 800c5a4:	b508      	push	{r3, lr}
 800c5a6:	2006      	movs	r0, #6
 800c5a8:	f000 fa08 	bl	800c9bc <raise>
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	f7f6 fdbf 	bl	8003130 <_exit>

0800c5b2 <_malloc_usable_size_r>:
 800c5b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5b6:	1f18      	subs	r0, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bfbc      	itt	lt
 800c5bc:	580b      	ldrlt	r3, [r1, r0]
 800c5be:	18c0      	addlt	r0, r0, r3
 800c5c0:	4770      	bx	lr

0800c5c2 <__sfputc_r>:
 800c5c2:	6893      	ldr	r3, [r2, #8]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	b410      	push	{r4}
 800c5ca:	6093      	str	r3, [r2, #8]
 800c5cc:	da08      	bge.n	800c5e0 <__sfputc_r+0x1e>
 800c5ce:	6994      	ldr	r4, [r2, #24]
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	db01      	blt.n	800c5d8 <__sfputc_r+0x16>
 800c5d4:	290a      	cmp	r1, #10
 800c5d6:	d103      	bne.n	800c5e0 <__sfputc_r+0x1e>
 800c5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5dc:	f000 b932 	b.w	800c844 <__swbuf_r>
 800c5e0:	6813      	ldr	r3, [r2, #0]
 800c5e2:	1c58      	adds	r0, r3, #1
 800c5e4:	6010      	str	r0, [r2, #0]
 800c5e6:	7019      	strb	r1, [r3, #0]
 800c5e8:	4608      	mov	r0, r1
 800c5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <__sfputs_r>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	18d5      	adds	r5, r2, r3
 800c5fa:	42ac      	cmp	r4, r5
 800c5fc:	d101      	bne.n	800c602 <__sfputs_r+0x12>
 800c5fe:	2000      	movs	r0, #0
 800c600:	e007      	b.n	800c612 <__sfputs_r+0x22>
 800c602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c606:	463a      	mov	r2, r7
 800c608:	4630      	mov	r0, r6
 800c60a:	f7ff ffda 	bl	800c5c2 <__sfputc_r>
 800c60e:	1c43      	adds	r3, r0, #1
 800c610:	d1f3      	bne.n	800c5fa <__sfputs_r+0xa>
 800c612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c614 <_vfiprintf_r>:
 800c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c618:	460d      	mov	r5, r1
 800c61a:	b09d      	sub	sp, #116	@ 0x74
 800c61c:	4614      	mov	r4, r2
 800c61e:	4698      	mov	r8, r3
 800c620:	4606      	mov	r6, r0
 800c622:	b118      	cbz	r0, 800c62c <_vfiprintf_r+0x18>
 800c624:	6a03      	ldr	r3, [r0, #32]
 800c626:	b90b      	cbnz	r3, 800c62c <_vfiprintf_r+0x18>
 800c628:	f7fc fdf4 	bl	8009214 <__sinit>
 800c62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c62e:	07d9      	lsls	r1, r3, #31
 800c630:	d405      	bmi.n	800c63e <_vfiprintf_r+0x2a>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	059a      	lsls	r2, r3, #22
 800c636:	d402      	bmi.n	800c63e <_vfiprintf_r+0x2a>
 800c638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c63a:	f7fc ff04 	bl	8009446 <__retarget_lock_acquire_recursive>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	071b      	lsls	r3, r3, #28
 800c642:	d501      	bpl.n	800c648 <_vfiprintf_r+0x34>
 800c644:	692b      	ldr	r3, [r5, #16]
 800c646:	b99b      	cbnz	r3, 800c670 <_vfiprintf_r+0x5c>
 800c648:	4629      	mov	r1, r5
 800c64a:	4630      	mov	r0, r6
 800c64c:	f000 f938 	bl	800c8c0 <__swsetup_r>
 800c650:	b170      	cbz	r0, 800c670 <_vfiprintf_r+0x5c>
 800c652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c654:	07dc      	lsls	r4, r3, #31
 800c656:	d504      	bpl.n	800c662 <_vfiprintf_r+0x4e>
 800c658:	f04f 30ff 	mov.w	r0, #4294967295
 800c65c:	b01d      	add	sp, #116	@ 0x74
 800c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c662:	89ab      	ldrh	r3, [r5, #12]
 800c664:	0598      	lsls	r0, r3, #22
 800c666:	d4f7      	bmi.n	800c658 <_vfiprintf_r+0x44>
 800c668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c66a:	f7fc feed 	bl	8009448 <__retarget_lock_release_recursive>
 800c66e:	e7f3      	b.n	800c658 <_vfiprintf_r+0x44>
 800c670:	2300      	movs	r3, #0
 800c672:	9309      	str	r3, [sp, #36]	@ 0x24
 800c674:	2320      	movs	r3, #32
 800c676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c67e:	2330      	movs	r3, #48	@ 0x30
 800c680:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c830 <_vfiprintf_r+0x21c>
 800c684:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c688:	f04f 0901 	mov.w	r9, #1
 800c68c:	4623      	mov	r3, r4
 800c68e:	469a      	mov	sl, r3
 800c690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c694:	b10a      	cbz	r2, 800c69a <_vfiprintf_r+0x86>
 800c696:	2a25      	cmp	r2, #37	@ 0x25
 800c698:	d1f9      	bne.n	800c68e <_vfiprintf_r+0x7a>
 800c69a:	ebba 0b04 	subs.w	fp, sl, r4
 800c69e:	d00b      	beq.n	800c6b8 <_vfiprintf_r+0xa4>
 800c6a0:	465b      	mov	r3, fp
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f7ff ffa2 	bl	800c5f0 <__sfputs_r>
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f000 80a7 	beq.w	800c800 <_vfiprintf_r+0x1ec>
 800c6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6b4:	445a      	add	r2, fp
 800c6b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 809f 	beq.w	800c800 <_vfiprintf_r+0x1ec>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6cc:	f10a 0a01 	add.w	sl, sl, #1
 800c6d0:	9304      	str	r3, [sp, #16]
 800c6d2:	9307      	str	r3, [sp, #28]
 800c6d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6da:	4654      	mov	r4, sl
 800c6dc:	2205      	movs	r2, #5
 800c6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e2:	4853      	ldr	r0, [pc, #332]	@ (800c830 <_vfiprintf_r+0x21c>)
 800c6e4:	f7f3 fd9c 	bl	8000220 <memchr>
 800c6e8:	9a04      	ldr	r2, [sp, #16]
 800c6ea:	b9d8      	cbnz	r0, 800c724 <_vfiprintf_r+0x110>
 800c6ec:	06d1      	lsls	r1, r2, #27
 800c6ee:	bf44      	itt	mi
 800c6f0:	2320      	movmi	r3, #32
 800c6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6f6:	0713      	lsls	r3, r2, #28
 800c6f8:	bf44      	itt	mi
 800c6fa:	232b      	movmi	r3, #43	@ 0x2b
 800c6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c700:	f89a 3000 	ldrb.w	r3, [sl]
 800c704:	2b2a      	cmp	r3, #42	@ 0x2a
 800c706:	d015      	beq.n	800c734 <_vfiprintf_r+0x120>
 800c708:	9a07      	ldr	r2, [sp, #28]
 800c70a:	4654      	mov	r4, sl
 800c70c:	2000      	movs	r0, #0
 800c70e:	f04f 0c0a 	mov.w	ip, #10
 800c712:	4621      	mov	r1, r4
 800c714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c718:	3b30      	subs	r3, #48	@ 0x30
 800c71a:	2b09      	cmp	r3, #9
 800c71c:	d94b      	bls.n	800c7b6 <_vfiprintf_r+0x1a2>
 800c71e:	b1b0      	cbz	r0, 800c74e <_vfiprintf_r+0x13a>
 800c720:	9207      	str	r2, [sp, #28]
 800c722:	e014      	b.n	800c74e <_vfiprintf_r+0x13a>
 800c724:	eba0 0308 	sub.w	r3, r0, r8
 800c728:	fa09 f303 	lsl.w	r3, r9, r3
 800c72c:	4313      	orrs	r3, r2
 800c72e:	9304      	str	r3, [sp, #16]
 800c730:	46a2      	mov	sl, r4
 800c732:	e7d2      	b.n	800c6da <_vfiprintf_r+0xc6>
 800c734:	9b03      	ldr	r3, [sp, #12]
 800c736:	1d19      	adds	r1, r3, #4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	9103      	str	r1, [sp, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	bfbb      	ittet	lt
 800c740:	425b      	neglt	r3, r3
 800c742:	f042 0202 	orrlt.w	r2, r2, #2
 800c746:	9307      	strge	r3, [sp, #28]
 800c748:	9307      	strlt	r3, [sp, #28]
 800c74a:	bfb8      	it	lt
 800c74c:	9204      	strlt	r2, [sp, #16]
 800c74e:	7823      	ldrb	r3, [r4, #0]
 800c750:	2b2e      	cmp	r3, #46	@ 0x2e
 800c752:	d10a      	bne.n	800c76a <_vfiprintf_r+0x156>
 800c754:	7863      	ldrb	r3, [r4, #1]
 800c756:	2b2a      	cmp	r3, #42	@ 0x2a
 800c758:	d132      	bne.n	800c7c0 <_vfiprintf_r+0x1ac>
 800c75a:	9b03      	ldr	r3, [sp, #12]
 800c75c:	1d1a      	adds	r2, r3, #4
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	9203      	str	r2, [sp, #12]
 800c762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c766:	3402      	adds	r4, #2
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c840 <_vfiprintf_r+0x22c>
 800c76e:	7821      	ldrb	r1, [r4, #0]
 800c770:	2203      	movs	r2, #3
 800c772:	4650      	mov	r0, sl
 800c774:	f7f3 fd54 	bl	8000220 <memchr>
 800c778:	b138      	cbz	r0, 800c78a <_vfiprintf_r+0x176>
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	eba0 000a 	sub.w	r0, r0, sl
 800c780:	2240      	movs	r2, #64	@ 0x40
 800c782:	4082      	lsls	r2, r0
 800c784:	4313      	orrs	r3, r2
 800c786:	3401      	adds	r4, #1
 800c788:	9304      	str	r3, [sp, #16]
 800c78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78e:	4829      	ldr	r0, [pc, #164]	@ (800c834 <_vfiprintf_r+0x220>)
 800c790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c794:	2206      	movs	r2, #6
 800c796:	f7f3 fd43 	bl	8000220 <memchr>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d03f      	beq.n	800c81e <_vfiprintf_r+0x20a>
 800c79e:	4b26      	ldr	r3, [pc, #152]	@ (800c838 <_vfiprintf_r+0x224>)
 800c7a0:	bb1b      	cbnz	r3, 800c7ea <_vfiprintf_r+0x1d6>
 800c7a2:	9b03      	ldr	r3, [sp, #12]
 800c7a4:	3307      	adds	r3, #7
 800c7a6:	f023 0307 	bic.w	r3, r3, #7
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	9303      	str	r3, [sp, #12]
 800c7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b0:	443b      	add	r3, r7
 800c7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7b4:	e76a      	b.n	800c68c <_vfiprintf_r+0x78>
 800c7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	2001      	movs	r0, #1
 800c7be:	e7a8      	b.n	800c712 <_vfiprintf_r+0xfe>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	3401      	adds	r4, #1
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	f04f 0c0a 	mov.w	ip, #10
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7d2:	3a30      	subs	r2, #48	@ 0x30
 800c7d4:	2a09      	cmp	r2, #9
 800c7d6:	d903      	bls.n	800c7e0 <_vfiprintf_r+0x1cc>
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0c6      	beq.n	800c76a <_vfiprintf_r+0x156>
 800c7dc:	9105      	str	r1, [sp, #20]
 800c7de:	e7c4      	b.n	800c76a <_vfiprintf_r+0x156>
 800c7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e7f0      	b.n	800c7cc <_vfiprintf_r+0x1b8>
 800c7ea:	ab03      	add	r3, sp, #12
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	462a      	mov	r2, r5
 800c7f0:	4b12      	ldr	r3, [pc, #72]	@ (800c83c <_vfiprintf_r+0x228>)
 800c7f2:	a904      	add	r1, sp, #16
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7fb febd 	bl	8008574 <_printf_float>
 800c7fa:	4607      	mov	r7, r0
 800c7fc:	1c78      	adds	r0, r7, #1
 800c7fe:	d1d6      	bne.n	800c7ae <_vfiprintf_r+0x19a>
 800c800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c802:	07d9      	lsls	r1, r3, #31
 800c804:	d405      	bmi.n	800c812 <_vfiprintf_r+0x1fe>
 800c806:	89ab      	ldrh	r3, [r5, #12]
 800c808:	059a      	lsls	r2, r3, #22
 800c80a:	d402      	bmi.n	800c812 <_vfiprintf_r+0x1fe>
 800c80c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c80e:	f7fc fe1b 	bl	8009448 <__retarget_lock_release_recursive>
 800c812:	89ab      	ldrh	r3, [r5, #12]
 800c814:	065b      	lsls	r3, r3, #25
 800c816:	f53f af1f 	bmi.w	800c658 <_vfiprintf_r+0x44>
 800c81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c81c:	e71e      	b.n	800c65c <_vfiprintf_r+0x48>
 800c81e:	ab03      	add	r3, sp, #12
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	462a      	mov	r2, r5
 800c824:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <_vfiprintf_r+0x228>)
 800c826:	a904      	add	r1, sp, #16
 800c828:	4630      	mov	r0, r6
 800c82a:	f7fc f93b 	bl	8008aa4 <_printf_i>
 800c82e:	e7e4      	b.n	800c7fa <_vfiprintf_r+0x1e6>
 800c830:	0800dfd9 	.word	0x0800dfd9
 800c834:	0800dfe3 	.word	0x0800dfe3
 800c838:	08008575 	.word	0x08008575
 800c83c:	0800c5f1 	.word	0x0800c5f1
 800c840:	0800dfdf 	.word	0x0800dfdf

0800c844 <__swbuf_r>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	460e      	mov	r6, r1
 800c848:	4614      	mov	r4, r2
 800c84a:	4605      	mov	r5, r0
 800c84c:	b118      	cbz	r0, 800c856 <__swbuf_r+0x12>
 800c84e:	6a03      	ldr	r3, [r0, #32]
 800c850:	b90b      	cbnz	r3, 800c856 <__swbuf_r+0x12>
 800c852:	f7fc fcdf 	bl	8009214 <__sinit>
 800c856:	69a3      	ldr	r3, [r4, #24]
 800c858:	60a3      	str	r3, [r4, #8]
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	071a      	lsls	r2, r3, #28
 800c85e:	d501      	bpl.n	800c864 <__swbuf_r+0x20>
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	b943      	cbnz	r3, 800c876 <__swbuf_r+0x32>
 800c864:	4621      	mov	r1, r4
 800c866:	4628      	mov	r0, r5
 800c868:	f000 f82a 	bl	800c8c0 <__swsetup_r>
 800c86c:	b118      	cbz	r0, 800c876 <__swbuf_r+0x32>
 800c86e:	f04f 37ff 	mov.w	r7, #4294967295
 800c872:	4638      	mov	r0, r7
 800c874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	6922      	ldr	r2, [r4, #16]
 800c87a:	1a98      	subs	r0, r3, r2
 800c87c:	6963      	ldr	r3, [r4, #20]
 800c87e:	b2f6      	uxtb	r6, r6
 800c880:	4283      	cmp	r3, r0
 800c882:	4637      	mov	r7, r6
 800c884:	dc05      	bgt.n	800c892 <__swbuf_r+0x4e>
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f7ff fa47 	bl	800bd1c <_fflush_r>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d1ed      	bne.n	800c86e <__swbuf_r+0x2a>
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	3b01      	subs	r3, #1
 800c896:	60a3      	str	r3, [r4, #8]
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	6022      	str	r2, [r4, #0]
 800c89e:	701e      	strb	r6, [r3, #0]
 800c8a0:	6962      	ldr	r2, [r4, #20]
 800c8a2:	1c43      	adds	r3, r0, #1
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d004      	beq.n	800c8b2 <__swbuf_r+0x6e>
 800c8a8:	89a3      	ldrh	r3, [r4, #12]
 800c8aa:	07db      	lsls	r3, r3, #31
 800c8ac:	d5e1      	bpl.n	800c872 <__swbuf_r+0x2e>
 800c8ae:	2e0a      	cmp	r6, #10
 800c8b0:	d1df      	bne.n	800c872 <__swbuf_r+0x2e>
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f7ff fa31 	bl	800bd1c <_fflush_r>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d0d9      	beq.n	800c872 <__swbuf_r+0x2e>
 800c8be:	e7d6      	b.n	800c86e <__swbuf_r+0x2a>

0800c8c0 <__swsetup_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4b29      	ldr	r3, [pc, #164]	@ (800c968 <__swsetup_r+0xa8>)
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	b118      	cbz	r0, 800c8d4 <__swsetup_r+0x14>
 800c8cc:	6a03      	ldr	r3, [r0, #32]
 800c8ce:	b90b      	cbnz	r3, 800c8d4 <__swsetup_r+0x14>
 800c8d0:	f7fc fca0 	bl	8009214 <__sinit>
 800c8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8d8:	0719      	lsls	r1, r3, #28
 800c8da:	d422      	bmi.n	800c922 <__swsetup_r+0x62>
 800c8dc:	06da      	lsls	r2, r3, #27
 800c8de:	d407      	bmi.n	800c8f0 <__swsetup_r+0x30>
 800c8e0:	2209      	movs	r2, #9
 800c8e2:	602a      	str	r2, [r5, #0]
 800c8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8e8:	81a3      	strh	r3, [r4, #12]
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ee:	e033      	b.n	800c958 <__swsetup_r+0x98>
 800c8f0:	0758      	lsls	r0, r3, #29
 800c8f2:	d512      	bpl.n	800c91a <__swsetup_r+0x5a>
 800c8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f6:	b141      	cbz	r1, 800c90a <__swsetup_r+0x4a>
 800c8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8fc:	4299      	cmp	r1, r3
 800c8fe:	d002      	beq.n	800c906 <__swsetup_r+0x46>
 800c900:	4628      	mov	r0, r5
 800c902:	f7fd fc01 	bl	800a108 <_free_r>
 800c906:	2300      	movs	r3, #0
 800c908:	6363      	str	r3, [r4, #52]	@ 0x34
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	2300      	movs	r3, #0
 800c914:	6063      	str	r3, [r4, #4]
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f043 0308 	orr.w	r3, r3, #8
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	b94b      	cbnz	r3, 800c93a <__swsetup_r+0x7a>
 800c926:	89a3      	ldrh	r3, [r4, #12]
 800c928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c930:	d003      	beq.n	800c93a <__swsetup_r+0x7a>
 800c932:	4621      	mov	r1, r4
 800c934:	4628      	mov	r0, r5
 800c936:	f000 f883 	bl	800ca40 <__smakebuf_r>
 800c93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c93e:	f013 0201 	ands.w	r2, r3, #1
 800c942:	d00a      	beq.n	800c95a <__swsetup_r+0x9a>
 800c944:	2200      	movs	r2, #0
 800c946:	60a2      	str	r2, [r4, #8]
 800c948:	6962      	ldr	r2, [r4, #20]
 800c94a:	4252      	negs	r2, r2
 800c94c:	61a2      	str	r2, [r4, #24]
 800c94e:	6922      	ldr	r2, [r4, #16]
 800c950:	b942      	cbnz	r2, 800c964 <__swsetup_r+0xa4>
 800c952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c956:	d1c5      	bne.n	800c8e4 <__swsetup_r+0x24>
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	0799      	lsls	r1, r3, #30
 800c95c:	bf58      	it	pl
 800c95e:	6962      	ldrpl	r2, [r4, #20]
 800c960:	60a2      	str	r2, [r4, #8]
 800c962:	e7f4      	b.n	800c94e <__swsetup_r+0x8e>
 800c964:	2000      	movs	r0, #0
 800c966:	e7f7      	b.n	800c958 <__swsetup_r+0x98>
 800c968:	20000040 	.word	0x20000040

0800c96c <_raise_r>:
 800c96c:	291f      	cmp	r1, #31
 800c96e:	b538      	push	{r3, r4, r5, lr}
 800c970:	4605      	mov	r5, r0
 800c972:	460c      	mov	r4, r1
 800c974:	d904      	bls.n	800c980 <_raise_r+0x14>
 800c976:	2316      	movs	r3, #22
 800c978:	6003      	str	r3, [r0, #0]
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c982:	b112      	cbz	r2, 800c98a <_raise_r+0x1e>
 800c984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c988:	b94b      	cbnz	r3, 800c99e <_raise_r+0x32>
 800c98a:	4628      	mov	r0, r5
 800c98c:	f000 f830 	bl	800c9f0 <_getpid_r>
 800c990:	4622      	mov	r2, r4
 800c992:	4601      	mov	r1, r0
 800c994:	4628      	mov	r0, r5
 800c996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c99a:	f000 b817 	b.w	800c9cc <_kill_r>
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d00a      	beq.n	800c9b8 <_raise_r+0x4c>
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	d103      	bne.n	800c9ae <_raise_r+0x42>
 800c9a6:	2316      	movs	r3, #22
 800c9a8:	6003      	str	r3, [r0, #0]
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	e7e7      	b.n	800c97e <_raise_r+0x12>
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	4798      	blx	r3
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e7e0      	b.n	800c97e <_raise_r+0x12>

0800c9bc <raise>:
 800c9bc:	4b02      	ldr	r3, [pc, #8]	@ (800c9c8 <raise+0xc>)
 800c9be:	4601      	mov	r1, r0
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	f7ff bfd3 	b.w	800c96c <_raise_r>
 800c9c6:	bf00      	nop
 800c9c8:	20000040 	.word	0x20000040

0800c9cc <_kill_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	4d07      	ldr	r5, [pc, #28]	@ (800c9ec <_kill_r+0x20>)
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	4608      	mov	r0, r1
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	f7f6 fb99 	bl	8003110 <_kill>
 800c9de:	1c43      	adds	r3, r0, #1
 800c9e0:	d102      	bne.n	800c9e8 <_kill_r+0x1c>
 800c9e2:	682b      	ldr	r3, [r5, #0]
 800c9e4:	b103      	cbz	r3, 800c9e8 <_kill_r+0x1c>
 800c9e6:	6023      	str	r3, [r4, #0]
 800c9e8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ea:	bf00      	nop
 800c9ec:	20000728 	.word	0x20000728

0800c9f0 <_getpid_r>:
 800c9f0:	f7f6 bb86 	b.w	8003100 <_getpid>

0800c9f4 <__swhatbuf_r>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	b096      	sub	sp, #88	@ 0x58
 800ca00:	4615      	mov	r5, r2
 800ca02:	461e      	mov	r6, r3
 800ca04:	da0d      	bge.n	800ca22 <__swhatbuf_r+0x2e>
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca0c:	f04f 0100 	mov.w	r1, #0
 800ca10:	bf14      	ite	ne
 800ca12:	2340      	movne	r3, #64	@ 0x40
 800ca14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca18:	2000      	movs	r0, #0
 800ca1a:	6031      	str	r1, [r6, #0]
 800ca1c:	602b      	str	r3, [r5, #0]
 800ca1e:	b016      	add	sp, #88	@ 0x58
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	466a      	mov	r2, sp
 800ca24:	f000 f848 	bl	800cab8 <_fstat_r>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	dbec      	blt.n	800ca06 <__swhatbuf_r+0x12>
 800ca2c:	9901      	ldr	r1, [sp, #4]
 800ca2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca36:	4259      	negs	r1, r3
 800ca38:	4159      	adcs	r1, r3
 800ca3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca3e:	e7eb      	b.n	800ca18 <__swhatbuf_r+0x24>

0800ca40 <__smakebuf_r>:
 800ca40:	898b      	ldrh	r3, [r1, #12]
 800ca42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca44:	079d      	lsls	r5, r3, #30
 800ca46:	4606      	mov	r6, r0
 800ca48:	460c      	mov	r4, r1
 800ca4a:	d507      	bpl.n	800ca5c <__smakebuf_r+0x1c>
 800ca4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	6123      	str	r3, [r4, #16]
 800ca54:	2301      	movs	r3, #1
 800ca56:	6163      	str	r3, [r4, #20]
 800ca58:	b003      	add	sp, #12
 800ca5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca5c:	ab01      	add	r3, sp, #4
 800ca5e:	466a      	mov	r2, sp
 800ca60:	f7ff ffc8 	bl	800c9f4 <__swhatbuf_r>
 800ca64:	9f00      	ldr	r7, [sp, #0]
 800ca66:	4605      	mov	r5, r0
 800ca68:	4639      	mov	r1, r7
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7fd fbc0 	bl	800a1f0 <_malloc_r>
 800ca70:	b948      	cbnz	r0, 800ca86 <__smakebuf_r+0x46>
 800ca72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca76:	059a      	lsls	r2, r3, #22
 800ca78:	d4ee      	bmi.n	800ca58 <__smakebuf_r+0x18>
 800ca7a:	f023 0303 	bic.w	r3, r3, #3
 800ca7e:	f043 0302 	orr.w	r3, r3, #2
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	e7e2      	b.n	800ca4c <__smakebuf_r+0xc>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	6020      	str	r0, [r4, #0]
 800ca8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca8e:	81a3      	strh	r3, [r4, #12]
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca96:	b15b      	cbz	r3, 800cab0 <__smakebuf_r+0x70>
 800ca98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f000 f81d 	bl	800cadc <_isatty_r>
 800caa2:	b128      	cbz	r0, 800cab0 <__smakebuf_r+0x70>
 800caa4:	89a3      	ldrh	r3, [r4, #12]
 800caa6:	f023 0303 	bic.w	r3, r3, #3
 800caaa:	f043 0301 	orr.w	r3, r3, #1
 800caae:	81a3      	strh	r3, [r4, #12]
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	431d      	orrs	r5, r3
 800cab4:	81a5      	strh	r5, [r4, #12]
 800cab6:	e7cf      	b.n	800ca58 <__smakebuf_r+0x18>

0800cab8 <_fstat_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d07      	ldr	r5, [pc, #28]	@ (800cad8 <_fstat_r+0x20>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	4611      	mov	r1, r2
 800cac4:	602b      	str	r3, [r5, #0]
 800cac6:	f7f6 fb83 	bl	80031d0 <_fstat>
 800caca:	1c43      	adds	r3, r0, #1
 800cacc:	d102      	bne.n	800cad4 <_fstat_r+0x1c>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	b103      	cbz	r3, 800cad4 <_fstat_r+0x1c>
 800cad2:	6023      	str	r3, [r4, #0]
 800cad4:	bd38      	pop	{r3, r4, r5, pc}
 800cad6:	bf00      	nop
 800cad8:	20000728 	.word	0x20000728

0800cadc <_isatty_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4d06      	ldr	r5, [pc, #24]	@ (800caf8 <_isatty_r+0x1c>)
 800cae0:	2300      	movs	r3, #0
 800cae2:	4604      	mov	r4, r0
 800cae4:	4608      	mov	r0, r1
 800cae6:	602b      	str	r3, [r5, #0]
 800cae8:	f7f6 fb82 	bl	80031f0 <_isatty>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_isatty_r+0x1a>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_isatty_r+0x1a>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	20000728 	.word	0x20000728

0800cafc <sqrt>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	ed2d 8b02 	vpush	{d8}
 800cb02:	ec55 4b10 	vmov	r4, r5, d0
 800cb06:	f000 f8fd 	bl	800cd04 <__ieee754_sqrt>
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	462b      	mov	r3, r5
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	eeb0 8a40 	vmov.f32	s16, s0
 800cb16:	eef0 8a60 	vmov.f32	s17, s1
 800cb1a:	f7f4 f82f 	bl	8000b7c <__aeabi_dcmpun>
 800cb1e:	b990      	cbnz	r0, 800cb46 <sqrt+0x4a>
 800cb20:	2200      	movs	r2, #0
 800cb22:	2300      	movs	r3, #0
 800cb24:	4620      	mov	r0, r4
 800cb26:	4629      	mov	r1, r5
 800cb28:	f7f4 f800 	bl	8000b2c <__aeabi_dcmplt>
 800cb2c:	b158      	cbz	r0, 800cb46 <sqrt+0x4a>
 800cb2e:	f7fc fc5f 	bl	80093f0 <__errno>
 800cb32:	2321      	movs	r3, #33	@ 0x21
 800cb34:	6003      	str	r3, [r0, #0]
 800cb36:	2200      	movs	r2, #0
 800cb38:	2300      	movs	r3, #0
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	f7f3 fead 	bl	800089c <__aeabi_ddiv>
 800cb42:	ec41 0b18 	vmov	d8, r0, r1
 800cb46:	eeb0 0a48 	vmov.f32	s0, s16
 800cb4a:	eef0 0a68 	vmov.f32	s1, s17
 800cb4e:	ecbd 8b02 	vpop	{d8}
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	0000      	movs	r0, r0
	...

0800cb58 <cos>:
 800cb58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb5a:	ec53 2b10 	vmov	r2, r3, d0
 800cb5e:	4826      	ldr	r0, [pc, #152]	@ (800cbf8 <cos+0xa0>)
 800cb60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cb64:	4281      	cmp	r1, r0
 800cb66:	d806      	bhi.n	800cb76 <cos+0x1e>
 800cb68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cbf0 <cos+0x98>
 800cb6c:	b005      	add	sp, #20
 800cb6e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb72:	f000 b99d 	b.w	800ceb0 <__kernel_cos>
 800cb76:	4821      	ldr	r0, [pc, #132]	@ (800cbfc <cos+0xa4>)
 800cb78:	4281      	cmp	r1, r0
 800cb7a:	d908      	bls.n	800cb8e <cos+0x36>
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f7f3 fbaa 	bl	80002d8 <__aeabi_dsub>
 800cb84:	ec41 0b10 	vmov	d0, r0, r1
 800cb88:	b005      	add	sp, #20
 800cb8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb8e:	4668      	mov	r0, sp
 800cb90:	f000 fb12 	bl	800d1b8 <__ieee754_rem_pio2>
 800cb94:	f000 0003 	and.w	r0, r0, #3
 800cb98:	2801      	cmp	r0, #1
 800cb9a:	d00b      	beq.n	800cbb4 <cos+0x5c>
 800cb9c:	2802      	cmp	r0, #2
 800cb9e:	d015      	beq.n	800cbcc <cos+0x74>
 800cba0:	b9d8      	cbnz	r0, 800cbda <cos+0x82>
 800cba2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cba6:	ed9d 0b00 	vldr	d0, [sp]
 800cbaa:	f000 f981 	bl	800ceb0 <__kernel_cos>
 800cbae:	ec51 0b10 	vmov	r0, r1, d0
 800cbb2:	e7e7      	b.n	800cb84 <cos+0x2c>
 800cbb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbb8:	ed9d 0b00 	vldr	d0, [sp]
 800cbbc:	f000 fa40 	bl	800d040 <__kernel_sin>
 800cbc0:	ec53 2b10 	vmov	r2, r3, d0
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cbca:	e7db      	b.n	800cb84 <cos+0x2c>
 800cbcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbd0:	ed9d 0b00 	vldr	d0, [sp]
 800cbd4:	f000 f96c 	bl	800ceb0 <__kernel_cos>
 800cbd8:	e7f2      	b.n	800cbc0 <cos+0x68>
 800cbda:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbde:	ed9d 0b00 	vldr	d0, [sp]
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	f000 fa2c 	bl	800d040 <__kernel_sin>
 800cbe8:	e7e1      	b.n	800cbae <cos+0x56>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
	...
 800cbf8:	3fe921fb 	.word	0x3fe921fb
 800cbfc:	7fefffff 	.word	0x7fefffff

0800cc00 <sin>:
 800cc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc02:	ec53 2b10 	vmov	r2, r3, d0
 800cc06:	4826      	ldr	r0, [pc, #152]	@ (800cca0 <sin+0xa0>)
 800cc08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc0c:	4281      	cmp	r1, r0
 800cc0e:	d807      	bhi.n	800cc20 <sin+0x20>
 800cc10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cc98 <sin+0x98>
 800cc14:	2000      	movs	r0, #0
 800cc16:	b005      	add	sp, #20
 800cc18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc1c:	f000 ba10 	b.w	800d040 <__kernel_sin>
 800cc20:	4820      	ldr	r0, [pc, #128]	@ (800cca4 <sin+0xa4>)
 800cc22:	4281      	cmp	r1, r0
 800cc24:	d908      	bls.n	800cc38 <sin+0x38>
 800cc26:	4610      	mov	r0, r2
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f7f3 fb55 	bl	80002d8 <__aeabi_dsub>
 800cc2e:	ec41 0b10 	vmov	d0, r0, r1
 800cc32:	b005      	add	sp, #20
 800cc34:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc38:	4668      	mov	r0, sp
 800cc3a:	f000 fabd 	bl	800d1b8 <__ieee754_rem_pio2>
 800cc3e:	f000 0003 	and.w	r0, r0, #3
 800cc42:	2801      	cmp	r0, #1
 800cc44:	d00c      	beq.n	800cc60 <sin+0x60>
 800cc46:	2802      	cmp	r0, #2
 800cc48:	d011      	beq.n	800cc6e <sin+0x6e>
 800cc4a:	b9e8      	cbnz	r0, 800cc88 <sin+0x88>
 800cc4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc50:	ed9d 0b00 	vldr	d0, [sp]
 800cc54:	2001      	movs	r0, #1
 800cc56:	f000 f9f3 	bl	800d040 <__kernel_sin>
 800cc5a:	ec51 0b10 	vmov	r0, r1, d0
 800cc5e:	e7e6      	b.n	800cc2e <sin+0x2e>
 800cc60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc64:	ed9d 0b00 	vldr	d0, [sp]
 800cc68:	f000 f922 	bl	800ceb0 <__kernel_cos>
 800cc6c:	e7f5      	b.n	800cc5a <sin+0x5a>
 800cc6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc72:	ed9d 0b00 	vldr	d0, [sp]
 800cc76:	2001      	movs	r0, #1
 800cc78:	f000 f9e2 	bl	800d040 <__kernel_sin>
 800cc7c:	ec53 2b10 	vmov	r2, r3, d0
 800cc80:	4610      	mov	r0, r2
 800cc82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc86:	e7d2      	b.n	800cc2e <sin+0x2e>
 800cc88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc8c:	ed9d 0b00 	vldr	d0, [sp]
 800cc90:	f000 f90e 	bl	800ceb0 <__kernel_cos>
 800cc94:	e7f2      	b.n	800cc7c <sin+0x7c>
 800cc96:	bf00      	nop
	...
 800cca0:	3fe921fb 	.word	0x3fe921fb
 800cca4:	7fefffff 	.word	0x7fefffff

0800cca8 <lroundf>:
 800cca8:	ee10 1a10 	vmov	r1, s0
 800ccac:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800ccb6:	bfac      	ite	ge
 800ccb8:	2001      	movge	r0, #1
 800ccba:	f04f 30ff 	movlt.w	r0, #4294967295
 800ccbe:	2a1e      	cmp	r2, #30
 800ccc0:	dc1a      	bgt.n	800ccf8 <lroundf+0x50>
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	da03      	bge.n	800ccce <lroundf+0x26>
 800ccc6:	3201      	adds	r2, #1
 800ccc8:	bf18      	it	ne
 800ccca:	2000      	movne	r0, #0
 800cccc:	4770      	bx	lr
 800ccce:	2a16      	cmp	r2, #22
 800ccd0:	bfd8      	it	le
 800ccd2:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800ccd6:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800ccda:	bfd8      	it	le
 800ccdc:	4113      	asrle	r3, r2
 800ccde:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800cce2:	bfcd      	iteet	gt
 800cce4:	3b96      	subgt	r3, #150	@ 0x96
 800cce6:	185b      	addle	r3, r3, r1
 800cce8:	f1c2 0217 	rsble	r2, r2, #23
 800ccec:	fa01 f303 	lslgt.w	r3, r1, r3
 800ccf0:	bfd8      	it	le
 800ccf2:	40d3      	lsrle	r3, r2
 800ccf4:	4358      	muls	r0, r3
 800ccf6:	4770      	bx	lr
 800ccf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ccfc:	ee17 0a90 	vmov	r0, s15
 800cd00:	4770      	bx	lr
	...

0800cd04 <__ieee754_sqrt>:
 800cd04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd08:	4a66      	ldr	r2, [pc, #408]	@ (800cea4 <__ieee754_sqrt+0x1a0>)
 800cd0a:	ec55 4b10 	vmov	r4, r5, d0
 800cd0e:	43aa      	bics	r2, r5
 800cd10:	462b      	mov	r3, r5
 800cd12:	4621      	mov	r1, r4
 800cd14:	d110      	bne.n	800cd38 <__ieee754_sqrt+0x34>
 800cd16:	4622      	mov	r2, r4
 800cd18:	4620      	mov	r0, r4
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7f3 fc94 	bl	8000648 <__aeabi_dmul>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4620      	mov	r0, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	f7f3 fad8 	bl	80002dc <__adddf3>
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	460d      	mov	r5, r1
 800cd30:	ec45 4b10 	vmov	d0, r4, r5
 800cd34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	dc0e      	bgt.n	800cd5a <__ieee754_sqrt+0x56>
 800cd3c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cd40:	4322      	orrs	r2, r4
 800cd42:	d0f5      	beq.n	800cd30 <__ieee754_sqrt+0x2c>
 800cd44:	b19d      	cbz	r5, 800cd6e <__ieee754_sqrt+0x6a>
 800cd46:	4622      	mov	r2, r4
 800cd48:	4620      	mov	r0, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	f7f3 fac4 	bl	80002d8 <__aeabi_dsub>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	f7f3 fda2 	bl	800089c <__aeabi_ddiv>
 800cd58:	e7e8      	b.n	800cd2c <__ieee754_sqrt+0x28>
 800cd5a:	152a      	asrs	r2, r5, #20
 800cd5c:	d115      	bne.n	800cd8a <__ieee754_sqrt+0x86>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	e009      	b.n	800cd76 <__ieee754_sqrt+0x72>
 800cd62:	0acb      	lsrs	r3, r1, #11
 800cd64:	3a15      	subs	r2, #21
 800cd66:	0549      	lsls	r1, r1, #21
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d0fa      	beq.n	800cd62 <__ieee754_sqrt+0x5e>
 800cd6c:	e7f7      	b.n	800cd5e <__ieee754_sqrt+0x5a>
 800cd6e:	462a      	mov	r2, r5
 800cd70:	e7fa      	b.n	800cd68 <__ieee754_sqrt+0x64>
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	3001      	adds	r0, #1
 800cd76:	02dc      	lsls	r4, r3, #11
 800cd78:	d5fb      	bpl.n	800cd72 <__ieee754_sqrt+0x6e>
 800cd7a:	1e44      	subs	r4, r0, #1
 800cd7c:	1b12      	subs	r2, r2, r4
 800cd7e:	f1c0 0420 	rsb	r4, r0, #32
 800cd82:	fa21 f404 	lsr.w	r4, r1, r4
 800cd86:	4323      	orrs	r3, r4
 800cd88:	4081      	lsls	r1, r0
 800cd8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd8e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800cd92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd96:	07d2      	lsls	r2, r2, #31
 800cd98:	bf5c      	itt	pl
 800cd9a:	005b      	lslpl	r3, r3, #1
 800cd9c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cda0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cda4:	bf58      	it	pl
 800cda6:	0049      	lslpl	r1, r1, #1
 800cda8:	2600      	movs	r6, #0
 800cdaa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cdae:	107f      	asrs	r7, r7, #1
 800cdb0:	0049      	lsls	r1, r1, #1
 800cdb2:	2016      	movs	r0, #22
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cdba:	1915      	adds	r5, r2, r4
 800cdbc:	429d      	cmp	r5, r3
 800cdbe:	bfde      	ittt	le
 800cdc0:	192a      	addle	r2, r5, r4
 800cdc2:	1b5b      	suble	r3, r3, r5
 800cdc4:	1936      	addle	r6, r6, r4
 800cdc6:	0fcd      	lsrs	r5, r1, #31
 800cdc8:	3801      	subs	r0, #1
 800cdca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800cdce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cdd2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cdd6:	d1f0      	bne.n	800cdba <__ieee754_sqrt+0xb6>
 800cdd8:	4605      	mov	r5, r0
 800cdda:	2420      	movs	r4, #32
 800cddc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cde0:	4293      	cmp	r3, r2
 800cde2:	eb0c 0e00 	add.w	lr, ip, r0
 800cde6:	dc02      	bgt.n	800cdee <__ieee754_sqrt+0xea>
 800cde8:	d113      	bne.n	800ce12 <__ieee754_sqrt+0x10e>
 800cdea:	458e      	cmp	lr, r1
 800cdec:	d811      	bhi.n	800ce12 <__ieee754_sqrt+0x10e>
 800cdee:	f1be 0f00 	cmp.w	lr, #0
 800cdf2:	eb0e 000c 	add.w	r0, lr, ip
 800cdf6:	da3f      	bge.n	800ce78 <__ieee754_sqrt+0x174>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	db3d      	blt.n	800ce78 <__ieee754_sqrt+0x174>
 800cdfc:	f102 0801 	add.w	r8, r2, #1
 800ce00:	1a9b      	subs	r3, r3, r2
 800ce02:	458e      	cmp	lr, r1
 800ce04:	bf88      	it	hi
 800ce06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ce0a:	eba1 010e 	sub.w	r1, r1, lr
 800ce0e:	4465      	add	r5, ip
 800ce10:	4642      	mov	r2, r8
 800ce12:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ce16:	3c01      	subs	r4, #1
 800ce18:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ce1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce20:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ce24:	d1dc      	bne.n	800cde0 <__ieee754_sqrt+0xdc>
 800ce26:	4319      	orrs	r1, r3
 800ce28:	d01b      	beq.n	800ce62 <__ieee754_sqrt+0x15e>
 800ce2a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800cea8 <__ieee754_sqrt+0x1a4>
 800ce2e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ceac <__ieee754_sqrt+0x1a8>
 800ce32:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce36:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce3a:	f7f3 fa4d 	bl	80002d8 <__aeabi_dsub>
 800ce3e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4640      	mov	r0, r8
 800ce48:	4649      	mov	r1, r9
 800ce4a:	f7f3 fe79 	bl	8000b40 <__aeabi_dcmple>
 800ce4e:	b140      	cbz	r0, 800ce62 <__ieee754_sqrt+0x15e>
 800ce50:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ce54:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce58:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce5c:	d10e      	bne.n	800ce7c <__ieee754_sqrt+0x178>
 800ce5e:	3601      	adds	r6, #1
 800ce60:	4625      	mov	r5, r4
 800ce62:	1073      	asrs	r3, r6, #1
 800ce64:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ce68:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ce6c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800ce70:	086b      	lsrs	r3, r5, #1
 800ce72:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800ce76:	e759      	b.n	800cd2c <__ieee754_sqrt+0x28>
 800ce78:	4690      	mov	r8, r2
 800ce7a:	e7c1      	b.n	800ce00 <__ieee754_sqrt+0xfc>
 800ce7c:	f7f3 fa2e 	bl	80002dc <__adddf3>
 800ce80:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4640      	mov	r0, r8
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	f7f3 fe4e 	bl	8000b2c <__aeabi_dcmplt>
 800ce90:	b120      	cbz	r0, 800ce9c <__ieee754_sqrt+0x198>
 800ce92:	1cab      	adds	r3, r5, #2
 800ce94:	bf08      	it	eq
 800ce96:	3601      	addeq	r6, #1
 800ce98:	3502      	adds	r5, #2
 800ce9a:	e7e2      	b.n	800ce62 <__ieee754_sqrt+0x15e>
 800ce9c:	1c6b      	adds	r3, r5, #1
 800ce9e:	f023 0501 	bic.w	r5, r3, #1
 800cea2:	e7de      	b.n	800ce62 <__ieee754_sqrt+0x15e>
 800cea4:	7ff00000 	.word	0x7ff00000
 800cea8:	0800e2f0 	.word	0x0800e2f0
 800ceac:	0800e2e8 	.word	0x0800e2e8

0800ceb0 <__kernel_cos>:
 800ceb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	ec57 6b10 	vmov	r6, r7, d0
 800ceb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cebc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800cec0:	ed8d 1b00 	vstr	d1, [sp]
 800cec4:	d206      	bcs.n	800ced4 <__kernel_cos+0x24>
 800cec6:	4630      	mov	r0, r6
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 fe6d 	bl	8000ba8 <__aeabi_d2iz>
 800cece:	2800      	cmp	r0, #0
 800ced0:	f000 8088 	beq.w	800cfe4 <__kernel_cos+0x134>
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	4630      	mov	r0, r6
 800ceda:	4639      	mov	r1, r7
 800cedc:	f7f3 fbb4 	bl	8000648 <__aeabi_dmul>
 800cee0:	4b51      	ldr	r3, [pc, #324]	@ (800d028 <__kernel_cos+0x178>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	4604      	mov	r4, r0
 800cee6:	460d      	mov	r5, r1
 800cee8:	f7f3 fbae 	bl	8000648 <__aeabi_dmul>
 800ceec:	a340      	add	r3, pc, #256	@ (adr r3, 800cff0 <__kernel_cos+0x140>)
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	4682      	mov	sl, r0
 800cef4:	468b      	mov	fp, r1
 800cef6:	4620      	mov	r0, r4
 800cef8:	4629      	mov	r1, r5
 800cefa:	f7f3 fba5 	bl	8000648 <__aeabi_dmul>
 800cefe:	a33e      	add	r3, pc, #248	@ (adr r3, 800cff8 <__kernel_cos+0x148>)
 800cf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf04:	f7f3 f9ea 	bl	80002dc <__adddf3>
 800cf08:	4622      	mov	r2, r4
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	f7f3 fb9c 	bl	8000648 <__aeabi_dmul>
 800cf10:	a33b      	add	r3, pc, #236	@ (adr r3, 800d000 <__kernel_cos+0x150>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	f7f3 f9df 	bl	80002d8 <__aeabi_dsub>
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	f7f3 fb93 	bl	8000648 <__aeabi_dmul>
 800cf22:	a339      	add	r3, pc, #228	@ (adr r3, 800d008 <__kernel_cos+0x158>)
 800cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf28:	f7f3 f9d8 	bl	80002dc <__adddf3>
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	462b      	mov	r3, r5
 800cf30:	f7f3 fb8a 	bl	8000648 <__aeabi_dmul>
 800cf34:	a336      	add	r3, pc, #216	@ (adr r3, 800d010 <__kernel_cos+0x160>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	f7f3 f9cd 	bl	80002d8 <__aeabi_dsub>
 800cf3e:	4622      	mov	r2, r4
 800cf40:	462b      	mov	r3, r5
 800cf42:	f7f3 fb81 	bl	8000648 <__aeabi_dmul>
 800cf46:	a334      	add	r3, pc, #208	@ (adr r3, 800d018 <__kernel_cos+0x168>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	f7f3 f9c6 	bl	80002dc <__adddf3>
 800cf50:	4622      	mov	r2, r4
 800cf52:	462b      	mov	r3, r5
 800cf54:	f7f3 fb78 	bl	8000648 <__aeabi_dmul>
 800cf58:	4622      	mov	r2, r4
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	f7f3 fb74 	bl	8000648 <__aeabi_dmul>
 800cf60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf64:	4604      	mov	r4, r0
 800cf66:	460d      	mov	r5, r1
 800cf68:	4630      	mov	r0, r6
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	f7f3 fb6c 	bl	8000648 <__aeabi_dmul>
 800cf70:	460b      	mov	r3, r1
 800cf72:	4602      	mov	r2, r0
 800cf74:	4629      	mov	r1, r5
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7f3 f9ae 	bl	80002d8 <__aeabi_dsub>
 800cf7c:	4b2b      	ldr	r3, [pc, #172]	@ (800d02c <__kernel_cos+0x17c>)
 800cf7e:	4598      	cmp	r8, r3
 800cf80:	4606      	mov	r6, r0
 800cf82:	460f      	mov	r7, r1
 800cf84:	d810      	bhi.n	800cfa8 <__kernel_cos+0xf8>
 800cf86:	4602      	mov	r2, r0
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4650      	mov	r0, sl
 800cf8c:	4659      	mov	r1, fp
 800cf8e:	f7f3 f9a3 	bl	80002d8 <__aeabi_dsub>
 800cf92:	460b      	mov	r3, r1
 800cf94:	4926      	ldr	r1, [pc, #152]	@ (800d030 <__kernel_cos+0x180>)
 800cf96:	4602      	mov	r2, r0
 800cf98:	2000      	movs	r0, #0
 800cf9a:	f7f3 f99d 	bl	80002d8 <__aeabi_dsub>
 800cf9e:	ec41 0b10 	vmov	d0, r0, r1
 800cfa2:	b003      	add	sp, #12
 800cfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa8:	4b22      	ldr	r3, [pc, #136]	@ (800d034 <__kernel_cos+0x184>)
 800cfaa:	4921      	ldr	r1, [pc, #132]	@ (800d030 <__kernel_cos+0x180>)
 800cfac:	4598      	cmp	r8, r3
 800cfae:	bf8c      	ite	hi
 800cfb0:	4d21      	ldrhi	r5, [pc, #132]	@ (800d038 <__kernel_cos+0x188>)
 800cfb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800cfb6:	2400      	movs	r4, #0
 800cfb8:	4622      	mov	r2, r4
 800cfba:	462b      	mov	r3, r5
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	f7f3 f98b 	bl	80002d8 <__aeabi_dsub>
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	4680      	mov	r8, r0
 800cfc6:	4689      	mov	r9, r1
 800cfc8:	462b      	mov	r3, r5
 800cfca:	4650      	mov	r0, sl
 800cfcc:	4659      	mov	r1, fp
 800cfce:	f7f3 f983 	bl	80002d8 <__aeabi_dsub>
 800cfd2:	4632      	mov	r2, r6
 800cfd4:	463b      	mov	r3, r7
 800cfd6:	f7f3 f97f 	bl	80002d8 <__aeabi_dsub>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	e7da      	b.n	800cf9a <__kernel_cos+0xea>
 800cfe4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d020 <__kernel_cos+0x170>
 800cfe8:	e7db      	b.n	800cfa2 <__kernel_cos+0xf2>
 800cfea:	bf00      	nop
 800cfec:	f3af 8000 	nop.w
 800cff0:	be8838d4 	.word	0xbe8838d4
 800cff4:	bda8fae9 	.word	0xbda8fae9
 800cff8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cffc:	3e21ee9e 	.word	0x3e21ee9e
 800d000:	809c52ad 	.word	0x809c52ad
 800d004:	3e927e4f 	.word	0x3e927e4f
 800d008:	19cb1590 	.word	0x19cb1590
 800d00c:	3efa01a0 	.word	0x3efa01a0
 800d010:	16c15177 	.word	0x16c15177
 800d014:	3f56c16c 	.word	0x3f56c16c
 800d018:	5555554c 	.word	0x5555554c
 800d01c:	3fa55555 	.word	0x3fa55555
 800d020:	00000000 	.word	0x00000000
 800d024:	3ff00000 	.word	0x3ff00000
 800d028:	3fe00000 	.word	0x3fe00000
 800d02c:	3fd33332 	.word	0x3fd33332
 800d030:	3ff00000 	.word	0x3ff00000
 800d034:	3fe90000 	.word	0x3fe90000
 800d038:	3fd20000 	.word	0x3fd20000
 800d03c:	00000000 	.word	0x00000000

0800d040 <__kernel_sin>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	ec55 4b10 	vmov	r4, r5, d0
 800d048:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d04c:	b085      	sub	sp, #20
 800d04e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d052:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d056:	4680      	mov	r8, r0
 800d058:	d205      	bcs.n	800d066 <__kernel_sin+0x26>
 800d05a:	4620      	mov	r0, r4
 800d05c:	4629      	mov	r1, r5
 800d05e:	f7f3 fda3 	bl	8000ba8 <__aeabi_d2iz>
 800d062:	2800      	cmp	r0, #0
 800d064:	d052      	beq.n	800d10c <__kernel_sin+0xcc>
 800d066:	4622      	mov	r2, r4
 800d068:	462b      	mov	r3, r5
 800d06a:	4620      	mov	r0, r4
 800d06c:	4629      	mov	r1, r5
 800d06e:	f7f3 faeb 	bl	8000648 <__aeabi_dmul>
 800d072:	4682      	mov	sl, r0
 800d074:	468b      	mov	fp, r1
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	4620      	mov	r0, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	f7f3 fae3 	bl	8000648 <__aeabi_dmul>
 800d082:	a342      	add	r3, pc, #264	@ (adr r3, 800d18c <__kernel_sin+0x14c>)
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	e9cd 0100 	strd	r0, r1, [sp]
 800d08c:	4650      	mov	r0, sl
 800d08e:	4659      	mov	r1, fp
 800d090:	f7f3 fada 	bl	8000648 <__aeabi_dmul>
 800d094:	a33f      	add	r3, pc, #252	@ (adr r3, 800d194 <__kernel_sin+0x154>)
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	f7f3 f91d 	bl	80002d8 <__aeabi_dsub>
 800d09e:	4652      	mov	r2, sl
 800d0a0:	465b      	mov	r3, fp
 800d0a2:	f7f3 fad1 	bl	8000648 <__aeabi_dmul>
 800d0a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800d19c <__kernel_sin+0x15c>)
 800d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ac:	f7f3 f916 	bl	80002dc <__adddf3>
 800d0b0:	4652      	mov	r2, sl
 800d0b2:	465b      	mov	r3, fp
 800d0b4:	f7f3 fac8 	bl	8000648 <__aeabi_dmul>
 800d0b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800d1a4 <__kernel_sin+0x164>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f7f3 f90b 	bl	80002d8 <__aeabi_dsub>
 800d0c2:	4652      	mov	r2, sl
 800d0c4:	465b      	mov	r3, fp
 800d0c6:	f7f3 fabf 	bl	8000648 <__aeabi_dmul>
 800d0ca:	a338      	add	r3, pc, #224	@ (adr r3, 800d1ac <__kernel_sin+0x16c>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 f904 	bl	80002dc <__adddf3>
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	460f      	mov	r7, r1
 800d0d8:	f1b8 0f00 	cmp.w	r8, #0
 800d0dc:	d11b      	bne.n	800d116 <__kernel_sin+0xd6>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	4659      	mov	r1, fp
 800d0e6:	f7f3 faaf 	bl	8000648 <__aeabi_dmul>
 800d0ea:	a325      	add	r3, pc, #148	@ (adr r3, 800d180 <__kernel_sin+0x140>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f7f3 f8f2 	bl	80002d8 <__aeabi_dsub>
 800d0f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f8:	f7f3 faa6 	bl	8000648 <__aeabi_dmul>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4620      	mov	r0, r4
 800d102:	4629      	mov	r1, r5
 800d104:	f7f3 f8ea 	bl	80002dc <__adddf3>
 800d108:	4604      	mov	r4, r0
 800d10a:	460d      	mov	r5, r1
 800d10c:	ec45 4b10 	vmov	d0, r4, r5
 800d110:	b005      	add	sp, #20
 800d112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d11a:	4b1b      	ldr	r3, [pc, #108]	@ (800d188 <__kernel_sin+0x148>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	f7f3 fa93 	bl	8000648 <__aeabi_dmul>
 800d122:	4632      	mov	r2, r6
 800d124:	4680      	mov	r8, r0
 800d126:	4689      	mov	r9, r1
 800d128:	463b      	mov	r3, r7
 800d12a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d12e:	f7f3 fa8b 	bl	8000648 <__aeabi_dmul>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4640      	mov	r0, r8
 800d138:	4649      	mov	r1, r9
 800d13a:	f7f3 f8cd 	bl	80002d8 <__aeabi_dsub>
 800d13e:	4652      	mov	r2, sl
 800d140:	465b      	mov	r3, fp
 800d142:	f7f3 fa81 	bl	8000648 <__aeabi_dmul>
 800d146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d14a:	f7f3 f8c5 	bl	80002d8 <__aeabi_dsub>
 800d14e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d180 <__kernel_sin+0x140>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	4606      	mov	r6, r0
 800d156:	460f      	mov	r7, r1
 800d158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d15c:	f7f3 fa74 	bl	8000648 <__aeabi_dmul>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4630      	mov	r0, r6
 800d166:	4639      	mov	r1, r7
 800d168:	f7f3 f8b8 	bl	80002dc <__adddf3>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4620      	mov	r0, r4
 800d172:	4629      	mov	r1, r5
 800d174:	f7f3 f8b0 	bl	80002d8 <__aeabi_dsub>
 800d178:	e7c6      	b.n	800d108 <__kernel_sin+0xc8>
 800d17a:	bf00      	nop
 800d17c:	f3af 8000 	nop.w
 800d180:	55555549 	.word	0x55555549
 800d184:	3fc55555 	.word	0x3fc55555
 800d188:	3fe00000 	.word	0x3fe00000
 800d18c:	5acfd57c 	.word	0x5acfd57c
 800d190:	3de5d93a 	.word	0x3de5d93a
 800d194:	8a2b9ceb 	.word	0x8a2b9ceb
 800d198:	3e5ae5e6 	.word	0x3e5ae5e6
 800d19c:	57b1fe7d 	.word	0x57b1fe7d
 800d1a0:	3ec71de3 	.word	0x3ec71de3
 800d1a4:	19c161d5 	.word	0x19c161d5
 800d1a8:	3f2a01a0 	.word	0x3f2a01a0
 800d1ac:	1110f8a6 	.word	0x1110f8a6
 800d1b0:	3f811111 	.word	0x3f811111
 800d1b4:	00000000 	.word	0x00000000

0800d1b8 <__ieee754_rem_pio2>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	ec57 6b10 	vmov	r6, r7, d0
 800d1c0:	4bc5      	ldr	r3, [pc, #788]	@ (800d4d8 <__ieee754_rem_pio2+0x320>)
 800d1c2:	b08d      	sub	sp, #52	@ 0x34
 800d1c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d1c8:	4598      	cmp	r8, r3
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	9704      	str	r7, [sp, #16]
 800d1ce:	d807      	bhi.n	800d1e0 <__ieee754_rem_pio2+0x28>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	ed80 0b00 	vstr	d0, [r0]
 800d1d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d1dc:	2500      	movs	r5, #0
 800d1de:	e028      	b.n	800d232 <__ieee754_rem_pio2+0x7a>
 800d1e0:	4bbe      	ldr	r3, [pc, #760]	@ (800d4dc <__ieee754_rem_pio2+0x324>)
 800d1e2:	4598      	cmp	r8, r3
 800d1e4:	d878      	bhi.n	800d2d8 <__ieee754_rem_pio2+0x120>
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	4dbd      	ldr	r5, [pc, #756]	@ (800d4e0 <__ieee754_rem_pio2+0x328>)
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e8>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	dd38      	ble.n	800d26a <__ieee754_rem_pio2+0xb2>
 800d1f8:	f7f3 f86e 	bl	80002d8 <__aeabi_dsub>
 800d1fc:	45a8      	cmp	r8, r5
 800d1fe:	4606      	mov	r6, r0
 800d200:	460f      	mov	r7, r1
 800d202:	d01a      	beq.n	800d23a <__ieee754_rem_pio2+0x82>
 800d204:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2f0>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	f7f3 f865 	bl	80002d8 <__aeabi_dsub>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	4680      	mov	r8, r0
 800d214:	4689      	mov	r9, r1
 800d216:	4630      	mov	r0, r6
 800d218:	4639      	mov	r1, r7
 800d21a:	f7f3 f85d 	bl	80002d8 <__aeabi_dsub>
 800d21e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2f0>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f7f3 f858 	bl	80002d8 <__aeabi_dsub>
 800d228:	e9c4 8900 	strd	r8, r9, [r4]
 800d22c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d230:	2501      	movs	r5, #1
 800d232:	4628      	mov	r0, r5
 800d234:	b00d      	add	sp, #52	@ 0x34
 800d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f8>)
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f7f3 f84a 	bl	80002d8 <__aeabi_dsub>
 800d244:	a39c      	add	r3, pc, #624	@ (adr r3, 800d4b8 <__ieee754_rem_pio2+0x300>)
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	4606      	mov	r6, r0
 800d24c:	460f      	mov	r7, r1
 800d24e:	f7f3 f843 	bl	80002d8 <__aeabi_dsub>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4680      	mov	r8, r0
 800d258:	4689      	mov	r9, r1
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f3 f83b 	bl	80002d8 <__aeabi_dsub>
 800d262:	a395      	add	r3, pc, #596	@ (adr r3, 800d4b8 <__ieee754_rem_pio2+0x300>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	e7dc      	b.n	800d224 <__ieee754_rem_pio2+0x6c>
 800d26a:	f7f3 f837 	bl	80002dc <__adddf3>
 800d26e:	45a8      	cmp	r8, r5
 800d270:	4606      	mov	r6, r0
 800d272:	460f      	mov	r7, r1
 800d274:	d018      	beq.n	800d2a8 <__ieee754_rem_pio2+0xf0>
 800d276:	a38c      	add	r3, pc, #560	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2f0>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	f7f3 f82e 	bl	80002dc <__adddf3>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4680      	mov	r8, r0
 800d286:	4689      	mov	r9, r1
 800d288:	4630      	mov	r0, r6
 800d28a:	4639      	mov	r1, r7
 800d28c:	f7f3 f824 	bl	80002d8 <__aeabi_dsub>
 800d290:	a385      	add	r3, pc, #532	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2f0>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f3 f821 	bl	80002dc <__adddf3>
 800d29a:	f04f 35ff 	mov.w	r5, #4294967295
 800d29e:	e9c4 8900 	strd	r8, r9, [r4]
 800d2a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2a6:	e7c4      	b.n	800d232 <__ieee754_rem_pio2+0x7a>
 800d2a8:	a381      	add	r3, pc, #516	@ (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f8>)
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	f7f3 f815 	bl	80002dc <__adddf3>
 800d2b2:	a381      	add	r3, pc, #516	@ (adr r3, 800d4b8 <__ieee754_rem_pio2+0x300>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	4606      	mov	r6, r0
 800d2ba:	460f      	mov	r7, r1
 800d2bc:	f7f3 f80e 	bl	80002dc <__adddf3>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4680      	mov	r8, r0
 800d2c6:	4689      	mov	r9, r1
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	4639      	mov	r1, r7
 800d2cc:	f7f3 f804 	bl	80002d8 <__aeabi_dsub>
 800d2d0:	a379      	add	r3, pc, #484	@ (adr r3, 800d4b8 <__ieee754_rem_pio2+0x300>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	e7de      	b.n	800d296 <__ieee754_rem_pio2+0xde>
 800d2d8:	4b82      	ldr	r3, [pc, #520]	@ (800d4e4 <__ieee754_rem_pio2+0x32c>)
 800d2da:	4598      	cmp	r8, r3
 800d2dc:	f200 80d1 	bhi.w	800d482 <__ieee754_rem_pio2+0x2ca>
 800d2e0:	f000 f966 	bl	800d5b0 <fabs>
 800d2e4:	ec57 6b10 	vmov	r6, r7, d0
 800d2e8:	a375      	add	r3, pc, #468	@ (adr r3, 800d4c0 <__ieee754_rem_pio2+0x308>)
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	4639      	mov	r1, r7
 800d2f2:	f7f3 f9a9 	bl	8000648 <__aeabi_dmul>
 800d2f6:	4b7c      	ldr	r3, [pc, #496]	@ (800d4e8 <__ieee754_rem_pio2+0x330>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f7f2 ffef 	bl	80002dc <__adddf3>
 800d2fe:	f7f3 fc53 	bl	8000ba8 <__aeabi_d2iz>
 800d302:	4605      	mov	r5, r0
 800d304:	f7f3 f936 	bl	8000574 <__aeabi_i2d>
 800d308:	4602      	mov	r2, r0
 800d30a:	460b      	mov	r3, r1
 800d30c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d310:	a363      	add	r3, pc, #396	@ (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2e8>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	f7f3 f997 	bl	8000648 <__aeabi_dmul>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4630      	mov	r0, r6
 800d320:	4639      	mov	r1, r7
 800d322:	f7f2 ffd9 	bl	80002d8 <__aeabi_dsub>
 800d326:	a360      	add	r3, pc, #384	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x2f0>)
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	4682      	mov	sl, r0
 800d32e:	468b      	mov	fp, r1
 800d330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d334:	f7f3 f988 	bl	8000648 <__aeabi_dmul>
 800d338:	2d1f      	cmp	r5, #31
 800d33a:	4606      	mov	r6, r0
 800d33c:	460f      	mov	r7, r1
 800d33e:	dc0c      	bgt.n	800d35a <__ieee754_rem_pio2+0x1a2>
 800d340:	4b6a      	ldr	r3, [pc, #424]	@ (800d4ec <__ieee754_rem_pio2+0x334>)
 800d342:	1e6a      	subs	r2, r5, #1
 800d344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d348:	4543      	cmp	r3, r8
 800d34a:	d006      	beq.n	800d35a <__ieee754_rem_pio2+0x1a2>
 800d34c:	4632      	mov	r2, r6
 800d34e:	463b      	mov	r3, r7
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	f7f2 ffc0 	bl	80002d8 <__aeabi_dsub>
 800d358:	e00e      	b.n	800d378 <__ieee754_rem_pio2+0x1c0>
 800d35a:	463b      	mov	r3, r7
 800d35c:	4632      	mov	r2, r6
 800d35e:	4650      	mov	r0, sl
 800d360:	4659      	mov	r1, fp
 800d362:	f7f2 ffb9 	bl	80002d8 <__aeabi_dsub>
 800d366:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d370:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d374:	2b10      	cmp	r3, #16
 800d376:	dc02      	bgt.n	800d37e <__ieee754_rem_pio2+0x1c6>
 800d378:	e9c4 0100 	strd	r0, r1, [r4]
 800d37c:	e039      	b.n	800d3f2 <__ieee754_rem_pio2+0x23a>
 800d37e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d4b0 <__ieee754_rem_pio2+0x2f8>)
 800d380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d388:	f7f3 f95e 	bl	8000648 <__aeabi_dmul>
 800d38c:	4606      	mov	r6, r0
 800d38e:	460f      	mov	r7, r1
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4650      	mov	r0, sl
 800d396:	4659      	mov	r1, fp
 800d398:	f7f2 ff9e 	bl	80002d8 <__aeabi_dsub>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	4689      	mov	r9, r1
 800d3a4:	4650      	mov	r0, sl
 800d3a6:	4659      	mov	r1, fp
 800d3a8:	f7f2 ff96 	bl	80002d8 <__aeabi_dsub>
 800d3ac:	4632      	mov	r2, r6
 800d3ae:	463b      	mov	r3, r7
 800d3b0:	f7f2 ff92 	bl	80002d8 <__aeabi_dsub>
 800d3b4:	a340      	add	r3, pc, #256	@ (adr r3, 800d4b8 <__ieee754_rem_pio2+0x300>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3c2:	f7f3 f941 	bl	8000648 <__aeabi_dmul>
 800d3c6:	4632      	mov	r2, r6
 800d3c8:	463b      	mov	r3, r7
 800d3ca:	f7f2 ff85 	bl	80002d8 <__aeabi_dsub>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	460f      	mov	r7, r1
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	f7f2 ff7d 	bl	80002d8 <__aeabi_dsub>
 800d3de:	9a05      	ldr	r2, [sp, #20]
 800d3e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	2b31      	cmp	r3, #49	@ 0x31
 800d3e8:	dc20      	bgt.n	800d42c <__ieee754_rem_pio2+0x274>
 800d3ea:	e9c4 0100 	strd	r0, r1, [r4]
 800d3ee:	46c2      	mov	sl, r8
 800d3f0:	46cb      	mov	fp, r9
 800d3f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d3f6:	4650      	mov	r0, sl
 800d3f8:	4642      	mov	r2, r8
 800d3fa:	464b      	mov	r3, r9
 800d3fc:	4659      	mov	r1, fp
 800d3fe:	f7f2 ff6b 	bl	80002d8 <__aeabi_dsub>
 800d402:	463b      	mov	r3, r7
 800d404:	4632      	mov	r2, r6
 800d406:	f7f2 ff67 	bl	80002d8 <__aeabi_dsub>
 800d40a:	9b04      	ldr	r3, [sp, #16]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d412:	f6bf af0e 	bge.w	800d232 <__ieee754_rem_pio2+0x7a>
 800d416:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d41a:	6063      	str	r3, [r4, #4]
 800d41c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d420:	f8c4 8000 	str.w	r8, [r4]
 800d424:	60a0      	str	r0, [r4, #8]
 800d426:	60e3      	str	r3, [r4, #12]
 800d428:	426d      	negs	r5, r5
 800d42a:	e702      	b.n	800d232 <__ieee754_rem_pio2+0x7a>
 800d42c:	a326      	add	r3, pc, #152	@ (adr r3, 800d4c8 <__ieee754_rem_pio2+0x310>)
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d436:	f7f3 f907 	bl	8000648 <__aeabi_dmul>
 800d43a:	4606      	mov	r6, r0
 800d43c:	460f      	mov	r7, r1
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f2 ff47 	bl	80002d8 <__aeabi_dsub>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4682      	mov	sl, r0
 800d450:	468b      	mov	fp, r1
 800d452:	4640      	mov	r0, r8
 800d454:	4649      	mov	r1, r9
 800d456:	f7f2 ff3f 	bl	80002d8 <__aeabi_dsub>
 800d45a:	4632      	mov	r2, r6
 800d45c:	463b      	mov	r3, r7
 800d45e:	f7f2 ff3b 	bl	80002d8 <__aeabi_dsub>
 800d462:	a31b      	add	r3, pc, #108	@ (adr r3, 800d4d0 <__ieee754_rem_pio2+0x318>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d470:	f7f3 f8ea 	bl	8000648 <__aeabi_dmul>
 800d474:	4632      	mov	r2, r6
 800d476:	463b      	mov	r3, r7
 800d478:	f7f2 ff2e 	bl	80002d8 <__aeabi_dsub>
 800d47c:	4606      	mov	r6, r0
 800d47e:	460f      	mov	r7, r1
 800d480:	e764      	b.n	800d34c <__ieee754_rem_pio2+0x194>
 800d482:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f0 <__ieee754_rem_pio2+0x338>)
 800d484:	4598      	cmp	r8, r3
 800d486:	d935      	bls.n	800d4f4 <__ieee754_rem_pio2+0x33c>
 800d488:	4632      	mov	r2, r6
 800d48a:	463b      	mov	r3, r7
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	f7f2 ff22 	bl	80002d8 <__aeabi_dsub>
 800d494:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d498:	e9c4 0100 	strd	r0, r1, [r4]
 800d49c:	e69e      	b.n	800d1dc <__ieee754_rem_pio2+0x24>
 800d49e:	bf00      	nop
 800d4a0:	54400000 	.word	0x54400000
 800d4a4:	3ff921fb 	.word	0x3ff921fb
 800d4a8:	1a626331 	.word	0x1a626331
 800d4ac:	3dd0b461 	.word	0x3dd0b461
 800d4b0:	1a600000 	.word	0x1a600000
 800d4b4:	3dd0b461 	.word	0x3dd0b461
 800d4b8:	2e037073 	.word	0x2e037073
 800d4bc:	3ba3198a 	.word	0x3ba3198a
 800d4c0:	6dc9c883 	.word	0x6dc9c883
 800d4c4:	3fe45f30 	.word	0x3fe45f30
 800d4c8:	2e000000 	.word	0x2e000000
 800d4cc:	3ba3198a 	.word	0x3ba3198a
 800d4d0:	252049c1 	.word	0x252049c1
 800d4d4:	397b839a 	.word	0x397b839a
 800d4d8:	3fe921fb 	.word	0x3fe921fb
 800d4dc:	4002d97b 	.word	0x4002d97b
 800d4e0:	3ff921fb 	.word	0x3ff921fb
 800d4e4:	413921fb 	.word	0x413921fb
 800d4e8:	3fe00000 	.word	0x3fe00000
 800d4ec:	0800e2f8 	.word	0x0800e2f8
 800d4f0:	7fefffff 	.word	0x7fefffff
 800d4f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d4f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d4fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d500:	4630      	mov	r0, r6
 800d502:	460f      	mov	r7, r1
 800d504:	f7f3 fb50 	bl	8000ba8 <__aeabi_d2iz>
 800d508:	f7f3 f834 	bl	8000574 <__aeabi_i2d>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	4630      	mov	r0, r6
 800d512:	4639      	mov	r1, r7
 800d514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d518:	f7f2 fede 	bl	80002d8 <__aeabi_dsub>
 800d51c:	4b22      	ldr	r3, [pc, #136]	@ (800d5a8 <__ieee754_rem_pio2+0x3f0>)
 800d51e:	2200      	movs	r2, #0
 800d520:	f7f3 f892 	bl	8000648 <__aeabi_dmul>
 800d524:	460f      	mov	r7, r1
 800d526:	4606      	mov	r6, r0
 800d528:	f7f3 fb3e 	bl	8000ba8 <__aeabi_d2iz>
 800d52c:	f7f3 f822 	bl	8000574 <__aeabi_i2d>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d53c:	f7f2 fecc 	bl	80002d8 <__aeabi_dsub>
 800d540:	4b19      	ldr	r3, [pc, #100]	@ (800d5a8 <__ieee754_rem_pio2+0x3f0>)
 800d542:	2200      	movs	r2, #0
 800d544:	f7f3 f880 	bl	8000648 <__aeabi_dmul>
 800d548:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d54c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d550:	f04f 0803 	mov.w	r8, #3
 800d554:	2600      	movs	r6, #0
 800d556:	2700      	movs	r7, #0
 800d558:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d55c:	4632      	mov	r2, r6
 800d55e:	463b      	mov	r3, r7
 800d560:	46c2      	mov	sl, r8
 800d562:	f108 38ff 	add.w	r8, r8, #4294967295
 800d566:	f7f3 fad7 	bl	8000b18 <__aeabi_dcmpeq>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d1f4      	bne.n	800d558 <__ieee754_rem_pio2+0x3a0>
 800d56e:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <__ieee754_rem_pio2+0x3f4>)
 800d570:	9301      	str	r3, [sp, #4]
 800d572:	2302      	movs	r3, #2
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	462a      	mov	r2, r5
 800d578:	4653      	mov	r3, sl
 800d57a:	4621      	mov	r1, r4
 800d57c:	a806      	add	r0, sp, #24
 800d57e:	f000 f81f 	bl	800d5c0 <__kernel_rem_pio2>
 800d582:	9b04      	ldr	r3, [sp, #16]
 800d584:	2b00      	cmp	r3, #0
 800d586:	4605      	mov	r5, r0
 800d588:	f6bf ae53 	bge.w	800d232 <__ieee754_rem_pio2+0x7a>
 800d58c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d590:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d594:	e9c4 2300 	strd	r2, r3, [r4]
 800d598:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d59c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d5a4:	e740      	b.n	800d428 <__ieee754_rem_pio2+0x270>
 800d5a6:	bf00      	nop
 800d5a8:	41700000 	.word	0x41700000
 800d5ac:	0800e378 	.word	0x0800e378

0800d5b0 <fabs>:
 800d5b0:	ec51 0b10 	vmov	r0, r1, d0
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d5ba:	ec43 2b10 	vmov	d0, r2, r3
 800d5be:	4770      	bx	lr

0800d5c0 <__kernel_rem_pio2>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	ed2d 8b02 	vpush	{d8}
 800d5c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d5cc:	f112 0f14 	cmn.w	r2, #20
 800d5d0:	9306      	str	r3, [sp, #24]
 800d5d2:	9104      	str	r1, [sp, #16]
 800d5d4:	4bc2      	ldr	r3, [pc, #776]	@ (800d8e0 <__kernel_rem_pio2+0x320>)
 800d5d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d5d8:	9008      	str	r0, [sp, #32]
 800d5da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	9b06      	ldr	r3, [sp, #24]
 800d5e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5e6:	bfa8      	it	ge
 800d5e8:	1ed4      	subge	r4, r2, #3
 800d5ea:	9305      	str	r3, [sp, #20]
 800d5ec:	bfb2      	itee	lt
 800d5ee:	2400      	movlt	r4, #0
 800d5f0:	2318      	movge	r3, #24
 800d5f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d5f6:	f06f 0317 	mvn.w	r3, #23
 800d5fa:	fb04 3303 	mla	r3, r4, r3, r3
 800d5fe:	eb03 0b02 	add.w	fp, r3, r2
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	9a05      	ldr	r2, [sp, #20]
 800d606:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800d8d0 <__kernel_rem_pio2+0x310>
 800d60a:	eb03 0802 	add.w	r8, r3, r2
 800d60e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d610:	1aa7      	subs	r7, r4, r2
 800d612:	ae20      	add	r6, sp, #128	@ 0x80
 800d614:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d618:	2500      	movs	r5, #0
 800d61a:	4545      	cmp	r5, r8
 800d61c:	dd12      	ble.n	800d644 <__kernel_rem_pio2+0x84>
 800d61e:	9b06      	ldr	r3, [sp, #24]
 800d620:	aa20      	add	r2, sp, #128	@ 0x80
 800d622:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d626:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d62a:	2700      	movs	r7, #0
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	429f      	cmp	r7, r3
 800d630:	dc2e      	bgt.n	800d690 <__kernel_rem_pio2+0xd0>
 800d632:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800d8d0 <__kernel_rem_pio2+0x310>
 800d636:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d63a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d63e:	46a8      	mov	r8, r5
 800d640:	2600      	movs	r6, #0
 800d642:	e01b      	b.n	800d67c <__kernel_rem_pio2+0xbc>
 800d644:	42ef      	cmn	r7, r5
 800d646:	d407      	bmi.n	800d658 <__kernel_rem_pio2+0x98>
 800d648:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d64c:	f7f2 ff92 	bl	8000574 <__aeabi_i2d>
 800d650:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d654:	3501      	adds	r5, #1
 800d656:	e7e0      	b.n	800d61a <__kernel_rem_pio2+0x5a>
 800d658:	ec51 0b18 	vmov	r0, r1, d8
 800d65c:	e7f8      	b.n	800d650 <__kernel_rem_pio2+0x90>
 800d65e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800d662:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d666:	f7f2 ffef 	bl	8000648 <__aeabi_dmul>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d672:	f7f2 fe33 	bl	80002dc <__adddf3>
 800d676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d67a:	3601      	adds	r6, #1
 800d67c:	9b05      	ldr	r3, [sp, #20]
 800d67e:	429e      	cmp	r6, r3
 800d680:	dded      	ble.n	800d65e <__kernel_rem_pio2+0x9e>
 800d682:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d686:	3701      	adds	r7, #1
 800d688:	ecaa 7b02 	vstmia	sl!, {d7}
 800d68c:	3508      	adds	r5, #8
 800d68e:	e7cd      	b.n	800d62c <__kernel_rem_pio2+0x6c>
 800d690:	9b00      	ldr	r3, [sp, #0]
 800d692:	f8dd 8000 	ldr.w	r8, [sp]
 800d696:	aa0c      	add	r2, sp, #48	@ 0x30
 800d698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d69c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d69e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d6a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d6aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6ac:	ab98      	add	r3, sp, #608	@ 0x260
 800d6ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d6b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d6b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6ba:	ac0c      	add	r4, sp, #48	@ 0x30
 800d6bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d6be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d6c2:	46a1      	mov	r9, r4
 800d6c4:	46c2      	mov	sl, r8
 800d6c6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ca:	dc77      	bgt.n	800d7bc <__kernel_rem_pio2+0x1fc>
 800d6cc:	4658      	mov	r0, fp
 800d6ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d6d2:	f000 fac5 	bl	800dc60 <scalbn>
 800d6d6:	ec57 6b10 	vmov	r6, r7, d0
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	f7f2 ffb0 	bl	8000648 <__aeabi_dmul>
 800d6e8:	ec41 0b10 	vmov	d0, r0, r1
 800d6ec:	f000 fb34 	bl	800dd58 <floor>
 800d6f0:	4b7c      	ldr	r3, [pc, #496]	@ (800d8e4 <__kernel_rem_pio2+0x324>)
 800d6f2:	ec51 0b10 	vmov	r0, r1, d0
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f7f2 ffa6 	bl	8000648 <__aeabi_dmul>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4630      	mov	r0, r6
 800d702:	4639      	mov	r1, r7
 800d704:	f7f2 fde8 	bl	80002d8 <__aeabi_dsub>
 800d708:	460f      	mov	r7, r1
 800d70a:	4606      	mov	r6, r0
 800d70c:	f7f3 fa4c 	bl	8000ba8 <__aeabi_d2iz>
 800d710:	9002      	str	r0, [sp, #8]
 800d712:	f7f2 ff2f 	bl	8000574 <__aeabi_i2d>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	4630      	mov	r0, r6
 800d71c:	4639      	mov	r1, r7
 800d71e:	f7f2 fddb 	bl	80002d8 <__aeabi_dsub>
 800d722:	f1bb 0f00 	cmp.w	fp, #0
 800d726:	4606      	mov	r6, r0
 800d728:	460f      	mov	r7, r1
 800d72a:	dd6c      	ble.n	800d806 <__kernel_rem_pio2+0x246>
 800d72c:	f108 31ff 	add.w	r1, r8, #4294967295
 800d730:	ab0c      	add	r3, sp, #48	@ 0x30
 800d732:	9d02      	ldr	r5, [sp, #8]
 800d734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d738:	f1cb 0018 	rsb	r0, fp, #24
 800d73c:	fa43 f200 	asr.w	r2, r3, r0
 800d740:	4415      	add	r5, r2
 800d742:	4082      	lsls	r2, r0
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	aa0c      	add	r2, sp, #48	@ 0x30
 800d748:	9502      	str	r5, [sp, #8]
 800d74a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d74e:	f1cb 0217 	rsb	r2, fp, #23
 800d752:	fa43 f902 	asr.w	r9, r3, r2
 800d756:	f1b9 0f00 	cmp.w	r9, #0
 800d75a:	dd64      	ble.n	800d826 <__kernel_rem_pio2+0x266>
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	2200      	movs	r2, #0
 800d760:	3301      	adds	r3, #1
 800d762:	9302      	str	r3, [sp, #8]
 800d764:	4615      	mov	r5, r2
 800d766:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d76a:	4590      	cmp	r8, r2
 800d76c:	f300 80a1 	bgt.w	800d8b2 <__kernel_rem_pio2+0x2f2>
 800d770:	f1bb 0f00 	cmp.w	fp, #0
 800d774:	dd07      	ble.n	800d786 <__kernel_rem_pio2+0x1c6>
 800d776:	f1bb 0f01 	cmp.w	fp, #1
 800d77a:	f000 80c1 	beq.w	800d900 <__kernel_rem_pio2+0x340>
 800d77e:	f1bb 0f02 	cmp.w	fp, #2
 800d782:	f000 80c8 	beq.w	800d916 <__kernel_rem_pio2+0x356>
 800d786:	f1b9 0f02 	cmp.w	r9, #2
 800d78a:	d14c      	bne.n	800d826 <__kernel_rem_pio2+0x266>
 800d78c:	4632      	mov	r2, r6
 800d78e:	463b      	mov	r3, r7
 800d790:	4955      	ldr	r1, [pc, #340]	@ (800d8e8 <__kernel_rem_pio2+0x328>)
 800d792:	2000      	movs	r0, #0
 800d794:	f7f2 fda0 	bl	80002d8 <__aeabi_dsub>
 800d798:	4606      	mov	r6, r0
 800d79a:	460f      	mov	r7, r1
 800d79c:	2d00      	cmp	r5, #0
 800d79e:	d042      	beq.n	800d826 <__kernel_rem_pio2+0x266>
 800d7a0:	4658      	mov	r0, fp
 800d7a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800d8d8 <__kernel_rem_pio2+0x318>
 800d7a6:	f000 fa5b 	bl	800dc60 <scalbn>
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	ec53 2b10 	vmov	r2, r3, d0
 800d7b2:	f7f2 fd91 	bl	80002d8 <__aeabi_dsub>
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	460f      	mov	r7, r1
 800d7ba:	e034      	b.n	800d826 <__kernel_rem_pio2+0x266>
 800d7bc:	4b4b      	ldr	r3, [pc, #300]	@ (800d8ec <__kernel_rem_pio2+0x32c>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c4:	f7f2 ff40 	bl	8000648 <__aeabi_dmul>
 800d7c8:	f7f3 f9ee 	bl	8000ba8 <__aeabi_d2iz>
 800d7cc:	f7f2 fed2 	bl	8000574 <__aeabi_i2d>
 800d7d0:	4b47      	ldr	r3, [pc, #284]	@ (800d8f0 <__kernel_rem_pio2+0x330>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	460f      	mov	r7, r1
 800d7d8:	f7f2 ff36 	bl	8000648 <__aeabi_dmul>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e4:	f7f2 fd78 	bl	80002d8 <__aeabi_dsub>
 800d7e8:	f7f3 f9de 	bl	8000ba8 <__aeabi_d2iz>
 800d7ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d7f0:	f849 0b04 	str.w	r0, [r9], #4
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f7f2 fd70 	bl	80002dc <__adddf3>
 800d7fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d804:	e75f      	b.n	800d6c6 <__kernel_rem_pio2+0x106>
 800d806:	d107      	bne.n	800d818 <__kernel_rem_pio2+0x258>
 800d808:	f108 33ff 	add.w	r3, r8, #4294967295
 800d80c:	aa0c      	add	r2, sp, #48	@ 0x30
 800d80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d812:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d816:	e79e      	b.n	800d756 <__kernel_rem_pio2+0x196>
 800d818:	4b36      	ldr	r3, [pc, #216]	@ (800d8f4 <__kernel_rem_pio2+0x334>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	f7f3 f99a 	bl	8000b54 <__aeabi_dcmpge>
 800d820:	2800      	cmp	r0, #0
 800d822:	d143      	bne.n	800d8ac <__kernel_rem_pio2+0x2ec>
 800d824:	4681      	mov	r9, r0
 800d826:	2200      	movs	r2, #0
 800d828:	2300      	movs	r3, #0
 800d82a:	4630      	mov	r0, r6
 800d82c:	4639      	mov	r1, r7
 800d82e:	f7f3 f973 	bl	8000b18 <__aeabi_dcmpeq>
 800d832:	2800      	cmp	r0, #0
 800d834:	f000 80c1 	beq.w	800d9ba <__kernel_rem_pio2+0x3fa>
 800d838:	f108 33ff 	add.w	r3, r8, #4294967295
 800d83c:	2200      	movs	r2, #0
 800d83e:	9900      	ldr	r1, [sp, #0]
 800d840:	428b      	cmp	r3, r1
 800d842:	da70      	bge.n	800d926 <__kernel_rem_pio2+0x366>
 800d844:	2a00      	cmp	r2, #0
 800d846:	f000 808b 	beq.w	800d960 <__kernel_rem_pio2+0x3a0>
 800d84a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d84e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d850:	f1ab 0b18 	sub.w	fp, fp, #24
 800d854:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d0f6      	beq.n	800d84a <__kernel_rem_pio2+0x28a>
 800d85c:	4658      	mov	r0, fp
 800d85e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800d8d8 <__kernel_rem_pio2+0x318>
 800d862:	f000 f9fd 	bl	800dc60 <scalbn>
 800d866:	f108 0301 	add.w	r3, r8, #1
 800d86a:	00da      	lsls	r2, r3, #3
 800d86c:	9205      	str	r2, [sp, #20]
 800d86e:	ec55 4b10 	vmov	r4, r5, d0
 800d872:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d874:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800d8ec <__kernel_rem_pio2+0x32c>
 800d878:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d87c:	4646      	mov	r6, r8
 800d87e:	f04f 0a00 	mov.w	sl, #0
 800d882:	2e00      	cmp	r6, #0
 800d884:	f280 80d1 	bge.w	800da2a <__kernel_rem_pio2+0x46a>
 800d888:	4644      	mov	r4, r8
 800d88a:	2c00      	cmp	r4, #0
 800d88c:	f2c0 80ff 	blt.w	800da8e <__kernel_rem_pio2+0x4ce>
 800d890:	4b19      	ldr	r3, [pc, #100]	@ (800d8f8 <__kernel_rem_pio2+0x338>)
 800d892:	461f      	mov	r7, r3
 800d894:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d896:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d89a:	9306      	str	r3, [sp, #24]
 800d89c:	f04f 0a00 	mov.w	sl, #0
 800d8a0:	f04f 0b00 	mov.w	fp, #0
 800d8a4:	2600      	movs	r6, #0
 800d8a6:	eba8 0504 	sub.w	r5, r8, r4
 800d8aa:	e0e4      	b.n	800da76 <__kernel_rem_pio2+0x4b6>
 800d8ac:	f04f 0902 	mov.w	r9, #2
 800d8b0:	e754      	b.n	800d75c <__kernel_rem_pio2+0x19c>
 800d8b2:	f854 3b04 	ldr.w	r3, [r4], #4
 800d8b6:	bb0d      	cbnz	r5, 800d8fc <__kernel_rem_pio2+0x33c>
 800d8b8:	b123      	cbz	r3, 800d8c4 <__kernel_rem_pio2+0x304>
 800d8ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	3201      	adds	r2, #1
 800d8c6:	461d      	mov	r5, r3
 800d8c8:	e74f      	b.n	800d76a <__kernel_rem_pio2+0x1aa>
 800d8ca:	bf00      	nop
 800d8cc:	f3af 8000 	nop.w
	...
 800d8dc:	3ff00000 	.word	0x3ff00000
 800d8e0:	0800e4c0 	.word	0x0800e4c0
 800d8e4:	40200000 	.word	0x40200000
 800d8e8:	3ff00000 	.word	0x3ff00000
 800d8ec:	3e700000 	.word	0x3e700000
 800d8f0:	41700000 	.word	0x41700000
 800d8f4:	3fe00000 	.word	0x3fe00000
 800d8f8:	0800e480 	.word	0x0800e480
 800d8fc:	1acb      	subs	r3, r1, r3
 800d8fe:	e7de      	b.n	800d8be <__kernel_rem_pio2+0x2fe>
 800d900:	f108 32ff 	add.w	r2, r8, #4294967295
 800d904:	ab0c      	add	r3, sp, #48	@ 0x30
 800d906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d90e:	a90c      	add	r1, sp, #48	@ 0x30
 800d910:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d914:	e737      	b.n	800d786 <__kernel_rem_pio2+0x1c6>
 800d916:	f108 32ff 	add.w	r2, r8, #4294967295
 800d91a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d920:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d924:	e7f3      	b.n	800d90e <__kernel_rem_pio2+0x34e>
 800d926:	a90c      	add	r1, sp, #48	@ 0x30
 800d928:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	430a      	orrs	r2, r1
 800d930:	e785      	b.n	800d83e <__kernel_rem_pio2+0x27e>
 800d932:	3401      	adds	r4, #1
 800d934:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d938:	2a00      	cmp	r2, #0
 800d93a:	d0fa      	beq.n	800d932 <__kernel_rem_pio2+0x372>
 800d93c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d93e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d942:	eb0d 0503 	add.w	r5, sp, r3
 800d946:	9b06      	ldr	r3, [sp, #24]
 800d948:	aa20      	add	r2, sp, #128	@ 0x80
 800d94a:	4443      	add	r3, r8
 800d94c:	f108 0701 	add.w	r7, r8, #1
 800d950:	3d98      	subs	r5, #152	@ 0x98
 800d952:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d956:	4444      	add	r4, r8
 800d958:	42bc      	cmp	r4, r7
 800d95a:	da04      	bge.n	800d966 <__kernel_rem_pio2+0x3a6>
 800d95c:	46a0      	mov	r8, r4
 800d95e:	e6a2      	b.n	800d6a6 <__kernel_rem_pio2+0xe6>
 800d960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d962:	2401      	movs	r4, #1
 800d964:	e7e6      	b.n	800d934 <__kernel_rem_pio2+0x374>
 800d966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d968:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d96c:	f7f2 fe02 	bl	8000574 <__aeabi_i2d>
 800d970:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800dc30 <__kernel_rem_pio2+0x670>
 800d974:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d978:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d980:	46b2      	mov	sl, r6
 800d982:	f04f 0800 	mov.w	r8, #0
 800d986:	9b05      	ldr	r3, [sp, #20]
 800d988:	4598      	cmp	r8, r3
 800d98a:	dd05      	ble.n	800d998 <__kernel_rem_pio2+0x3d8>
 800d98c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d990:	3701      	adds	r7, #1
 800d992:	eca5 7b02 	vstmia	r5!, {d7}
 800d996:	e7df      	b.n	800d958 <__kernel_rem_pio2+0x398>
 800d998:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d99c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d9a0:	f7f2 fe52 	bl	8000648 <__aeabi_dmul>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ac:	f7f2 fc96 	bl	80002dc <__adddf3>
 800d9b0:	f108 0801 	add.w	r8, r8, #1
 800d9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9b8:	e7e5      	b.n	800d986 <__kernel_rem_pio2+0x3c6>
 800d9ba:	f1cb 0000 	rsb	r0, fp, #0
 800d9be:	ec47 6b10 	vmov	d0, r6, r7
 800d9c2:	f000 f94d 	bl	800dc60 <scalbn>
 800d9c6:	ec55 4b10 	vmov	r4, r5, d0
 800d9ca:	4b9b      	ldr	r3, [pc, #620]	@ (800dc38 <__kernel_rem_pio2+0x678>)
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	f7f3 f8bf 	bl	8000b54 <__aeabi_dcmpge>
 800d9d6:	b300      	cbz	r0, 800da1a <__kernel_rem_pio2+0x45a>
 800d9d8:	4b98      	ldr	r3, [pc, #608]	@ (800dc3c <__kernel_rem_pio2+0x67c>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f7f2 fe32 	bl	8000648 <__aeabi_dmul>
 800d9e4:	f7f3 f8e0 	bl	8000ba8 <__aeabi_d2iz>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	f7f2 fdc3 	bl	8000574 <__aeabi_i2d>
 800d9ee:	4b92      	ldr	r3, [pc, #584]	@ (800dc38 <__kernel_rem_pio2+0x678>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f7f2 fe29 	bl	8000648 <__aeabi_dmul>
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7f2 fc6b 	bl	80002d8 <__aeabi_dsub>
 800da02:	f7f3 f8d1 	bl	8000ba8 <__aeabi_d2iz>
 800da06:	ab0c      	add	r3, sp, #48	@ 0x30
 800da08:	f10b 0b18 	add.w	fp, fp, #24
 800da0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800da10:	f108 0801 	add.w	r8, r8, #1
 800da14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800da18:	e720      	b.n	800d85c <__kernel_rem_pio2+0x29c>
 800da1a:	4620      	mov	r0, r4
 800da1c:	4629      	mov	r1, r5
 800da1e:	f7f3 f8c3 	bl	8000ba8 <__aeabi_d2iz>
 800da22:	ab0c      	add	r3, sp, #48	@ 0x30
 800da24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800da28:	e718      	b.n	800d85c <__kernel_rem_pio2+0x29c>
 800da2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800da2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800da30:	f7f2 fda0 	bl	8000574 <__aeabi_i2d>
 800da34:	4622      	mov	r2, r4
 800da36:	462b      	mov	r3, r5
 800da38:	f7f2 fe06 	bl	8000648 <__aeabi_dmul>
 800da3c:	4652      	mov	r2, sl
 800da3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800da42:	465b      	mov	r3, fp
 800da44:	4620      	mov	r0, r4
 800da46:	4629      	mov	r1, r5
 800da48:	f7f2 fdfe 	bl	8000648 <__aeabi_dmul>
 800da4c:	3e01      	subs	r6, #1
 800da4e:	4604      	mov	r4, r0
 800da50:	460d      	mov	r5, r1
 800da52:	e716      	b.n	800d882 <__kernel_rem_pio2+0x2c2>
 800da54:	9906      	ldr	r1, [sp, #24]
 800da56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800da5a:	9106      	str	r1, [sp, #24]
 800da5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800da60:	f7f2 fdf2 	bl	8000648 <__aeabi_dmul>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4650      	mov	r0, sl
 800da6a:	4659      	mov	r1, fp
 800da6c:	f7f2 fc36 	bl	80002dc <__adddf3>
 800da70:	3601      	adds	r6, #1
 800da72:	4682      	mov	sl, r0
 800da74:	468b      	mov	fp, r1
 800da76:	9b00      	ldr	r3, [sp, #0]
 800da78:	429e      	cmp	r6, r3
 800da7a:	dc01      	bgt.n	800da80 <__kernel_rem_pio2+0x4c0>
 800da7c:	42ae      	cmp	r6, r5
 800da7e:	dde9      	ble.n	800da54 <__kernel_rem_pio2+0x494>
 800da80:	ab48      	add	r3, sp, #288	@ 0x120
 800da82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800da86:	e9c5 ab00 	strd	sl, fp, [r5]
 800da8a:	3c01      	subs	r4, #1
 800da8c:	e6fd      	b.n	800d88a <__kernel_rem_pio2+0x2ca>
 800da8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800da90:	2b02      	cmp	r3, #2
 800da92:	dc0b      	bgt.n	800daac <__kernel_rem_pio2+0x4ec>
 800da94:	2b00      	cmp	r3, #0
 800da96:	dc35      	bgt.n	800db04 <__kernel_rem_pio2+0x544>
 800da98:	d059      	beq.n	800db4e <__kernel_rem_pio2+0x58e>
 800da9a:	9b02      	ldr	r3, [sp, #8]
 800da9c:	f003 0007 	and.w	r0, r3, #7
 800daa0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800daa4:	ecbd 8b02 	vpop	{d8}
 800daa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d1f3      	bne.n	800da9a <__kernel_rem_pio2+0x4da>
 800dab2:	9b05      	ldr	r3, [sp, #20]
 800dab4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dab8:	eb0d 0403 	add.w	r4, sp, r3
 800dabc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dac0:	4625      	mov	r5, r4
 800dac2:	46c2      	mov	sl, r8
 800dac4:	f1ba 0f00 	cmp.w	sl, #0
 800dac8:	dc69      	bgt.n	800db9e <__kernel_rem_pio2+0x5de>
 800daca:	4645      	mov	r5, r8
 800dacc:	2d01      	cmp	r5, #1
 800dace:	f300 8087 	bgt.w	800dbe0 <__kernel_rem_pio2+0x620>
 800dad2:	9c05      	ldr	r4, [sp, #20]
 800dad4:	ab48      	add	r3, sp, #288	@ 0x120
 800dad6:	441c      	add	r4, r3
 800dad8:	2000      	movs	r0, #0
 800dada:	2100      	movs	r1, #0
 800dadc:	f1b8 0f01 	cmp.w	r8, #1
 800dae0:	f300 809c 	bgt.w	800dc1c <__kernel_rem_pio2+0x65c>
 800dae4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800dae8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800daec:	f1b9 0f00 	cmp.w	r9, #0
 800daf0:	f040 80a6 	bne.w	800dc40 <__kernel_rem_pio2+0x680>
 800daf4:	9b04      	ldr	r3, [sp, #16]
 800daf6:	e9c3 5600 	strd	r5, r6, [r3]
 800dafa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dafe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800db02:	e7ca      	b.n	800da9a <__kernel_rem_pio2+0x4da>
 800db04:	9d05      	ldr	r5, [sp, #20]
 800db06:	ab48      	add	r3, sp, #288	@ 0x120
 800db08:	441d      	add	r5, r3
 800db0a:	4644      	mov	r4, r8
 800db0c:	2000      	movs	r0, #0
 800db0e:	2100      	movs	r1, #0
 800db10:	2c00      	cmp	r4, #0
 800db12:	da35      	bge.n	800db80 <__kernel_rem_pio2+0x5c0>
 800db14:	f1b9 0f00 	cmp.w	r9, #0
 800db18:	d038      	beq.n	800db8c <__kernel_rem_pio2+0x5cc>
 800db1a:	4602      	mov	r2, r0
 800db1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db20:	9c04      	ldr	r4, [sp, #16]
 800db22:	e9c4 2300 	strd	r2, r3, [r4]
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800db2e:	f7f2 fbd3 	bl	80002d8 <__aeabi_dsub>
 800db32:	ad4a      	add	r5, sp, #296	@ 0x128
 800db34:	2401      	movs	r4, #1
 800db36:	45a0      	cmp	r8, r4
 800db38:	da2b      	bge.n	800db92 <__kernel_rem_pio2+0x5d2>
 800db3a:	f1b9 0f00 	cmp.w	r9, #0
 800db3e:	d002      	beq.n	800db46 <__kernel_rem_pio2+0x586>
 800db40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db44:	4619      	mov	r1, r3
 800db46:	9b04      	ldr	r3, [sp, #16]
 800db48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800db4c:	e7a5      	b.n	800da9a <__kernel_rem_pio2+0x4da>
 800db4e:	9c05      	ldr	r4, [sp, #20]
 800db50:	ab48      	add	r3, sp, #288	@ 0x120
 800db52:	441c      	add	r4, r3
 800db54:	2000      	movs	r0, #0
 800db56:	2100      	movs	r1, #0
 800db58:	f1b8 0f00 	cmp.w	r8, #0
 800db5c:	da09      	bge.n	800db72 <__kernel_rem_pio2+0x5b2>
 800db5e:	f1b9 0f00 	cmp.w	r9, #0
 800db62:	d002      	beq.n	800db6a <__kernel_rem_pio2+0x5aa>
 800db64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db68:	4619      	mov	r1, r3
 800db6a:	9b04      	ldr	r3, [sp, #16]
 800db6c:	e9c3 0100 	strd	r0, r1, [r3]
 800db70:	e793      	b.n	800da9a <__kernel_rem_pio2+0x4da>
 800db72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db76:	f7f2 fbb1 	bl	80002dc <__adddf3>
 800db7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800db7e:	e7eb      	b.n	800db58 <__kernel_rem_pio2+0x598>
 800db80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800db84:	f7f2 fbaa 	bl	80002dc <__adddf3>
 800db88:	3c01      	subs	r4, #1
 800db8a:	e7c1      	b.n	800db10 <__kernel_rem_pio2+0x550>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	e7c6      	b.n	800db20 <__kernel_rem_pio2+0x560>
 800db92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800db96:	f7f2 fba1 	bl	80002dc <__adddf3>
 800db9a:	3401      	adds	r4, #1
 800db9c:	e7cb      	b.n	800db36 <__kernel_rem_pio2+0x576>
 800db9e:	ed35 7b02 	vldmdb	r5!, {d7}
 800dba2:	ed8d 7b00 	vstr	d7, [sp]
 800dba6:	ed95 7b02 	vldr	d7, [r5, #8]
 800dbaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbae:	ec53 2b17 	vmov	r2, r3, d7
 800dbb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dbb6:	f7f2 fb91 	bl	80002dc <__adddf3>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460f      	mov	r7, r1
 800dbc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbc6:	f7f2 fb87 	bl	80002d8 <__aeabi_dsub>
 800dbca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dbce:	f7f2 fb85 	bl	80002dc <__adddf3>
 800dbd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dbda:	e9c5 6700 	strd	r6, r7, [r5]
 800dbde:	e771      	b.n	800dac4 <__kernel_rem_pio2+0x504>
 800dbe0:	ed34 7b02 	vldmdb	r4!, {d7}
 800dbe4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800dbe8:	ec51 0b17 	vmov	r0, r1, d7
 800dbec:	4652      	mov	r2, sl
 800dbee:	465b      	mov	r3, fp
 800dbf0:	ed8d 7b00 	vstr	d7, [sp]
 800dbf4:	f7f2 fb72 	bl	80002dc <__adddf3>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460f      	mov	r7, r1
 800dc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc04:	f7f2 fb68 	bl	80002d8 <__aeabi_dsub>
 800dc08:	4652      	mov	r2, sl
 800dc0a:	465b      	mov	r3, fp
 800dc0c:	f7f2 fb66 	bl	80002dc <__adddf3>
 800dc10:	3d01      	subs	r5, #1
 800dc12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc16:	e9c4 6700 	strd	r6, r7, [r4]
 800dc1a:	e757      	b.n	800dacc <__kernel_rem_pio2+0x50c>
 800dc1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc20:	f7f2 fb5c 	bl	80002dc <__adddf3>
 800dc24:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc28:	e758      	b.n	800dadc <__kernel_rem_pio2+0x51c>
 800dc2a:	bf00      	nop
 800dc2c:	f3af 8000 	nop.w
	...
 800dc38:	41700000 	.word	0x41700000
 800dc3c:	3e700000 	.word	0x3e700000
 800dc40:	9b04      	ldr	r3, [sp, #16]
 800dc42:	9a04      	ldr	r2, [sp, #16]
 800dc44:	601d      	str	r5, [r3, #0]
 800dc46:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800dc4a:	605c      	str	r4, [r3, #4]
 800dc4c:	609f      	str	r7, [r3, #8]
 800dc4e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800dc52:	60d3      	str	r3, [r2, #12]
 800dc54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc58:	6110      	str	r0, [r2, #16]
 800dc5a:	6153      	str	r3, [r2, #20]
 800dc5c:	e71d      	b.n	800da9a <__kernel_rem_pio2+0x4da>
 800dc5e:	bf00      	nop

0800dc60 <scalbn>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	ec55 4b10 	vmov	r4, r5, d0
 800dc66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	b991      	cbnz	r1, 800dc96 <scalbn+0x36>
 800dc70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dc74:	4323      	orrs	r3, r4
 800dc76:	d03b      	beq.n	800dcf0 <scalbn+0x90>
 800dc78:	4b33      	ldr	r3, [pc, #204]	@ (800dd48 <scalbn+0xe8>)
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f7f2 fce2 	bl	8000648 <__aeabi_dmul>
 800dc84:	4b31      	ldr	r3, [pc, #196]	@ (800dd4c <scalbn+0xec>)
 800dc86:	429e      	cmp	r6, r3
 800dc88:	4604      	mov	r4, r0
 800dc8a:	460d      	mov	r5, r1
 800dc8c:	da0f      	bge.n	800dcae <scalbn+0x4e>
 800dc8e:	a326      	add	r3, pc, #152	@ (adr r3, 800dd28 <scalbn+0xc8>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	e01e      	b.n	800dcd4 <scalbn+0x74>
 800dc96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dc9a:	4291      	cmp	r1, r2
 800dc9c:	d10b      	bne.n	800dcb6 <scalbn+0x56>
 800dc9e:	4622      	mov	r2, r4
 800dca0:	4620      	mov	r0, r4
 800dca2:	4629      	mov	r1, r5
 800dca4:	f7f2 fb1a 	bl	80002dc <__adddf3>
 800dca8:	4604      	mov	r4, r0
 800dcaa:	460d      	mov	r5, r1
 800dcac:	e020      	b.n	800dcf0 <scalbn+0x90>
 800dcae:	460b      	mov	r3, r1
 800dcb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dcb4:	3936      	subs	r1, #54	@ 0x36
 800dcb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800dcba:	4296      	cmp	r6, r2
 800dcbc:	dd0d      	ble.n	800dcda <scalbn+0x7a>
 800dcbe:	2d00      	cmp	r5, #0
 800dcc0:	a11b      	add	r1, pc, #108	@ (adr r1, 800dd30 <scalbn+0xd0>)
 800dcc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc6:	da02      	bge.n	800dcce <scalbn+0x6e>
 800dcc8:	a11b      	add	r1, pc, #108	@ (adr r1, 800dd38 <scalbn+0xd8>)
 800dcca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcce:	a318      	add	r3, pc, #96	@ (adr r3, 800dd30 <scalbn+0xd0>)
 800dcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd4:	f7f2 fcb8 	bl	8000648 <__aeabi_dmul>
 800dcd8:	e7e6      	b.n	800dca8 <scalbn+0x48>
 800dcda:	1872      	adds	r2, r6, r1
 800dcdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dce0:	428a      	cmp	r2, r1
 800dce2:	dcec      	bgt.n	800dcbe <scalbn+0x5e>
 800dce4:	2a00      	cmp	r2, #0
 800dce6:	dd06      	ble.n	800dcf6 <scalbn+0x96>
 800dce8:	f36f 531e 	bfc	r3, #20, #11
 800dcec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dcf0:	ec45 4b10 	vmov	d0, r4, r5
 800dcf4:	bd70      	pop	{r4, r5, r6, pc}
 800dcf6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800dcfa:	da08      	bge.n	800dd0e <scalbn+0xae>
 800dcfc:	2d00      	cmp	r5, #0
 800dcfe:	a10a      	add	r1, pc, #40	@ (adr r1, 800dd28 <scalbn+0xc8>)
 800dd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd04:	dac3      	bge.n	800dc8e <scalbn+0x2e>
 800dd06:	a10e      	add	r1, pc, #56	@ (adr r1, 800dd40 <scalbn+0xe0>)
 800dd08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd0c:	e7bf      	b.n	800dc8e <scalbn+0x2e>
 800dd0e:	3236      	adds	r2, #54	@ 0x36
 800dd10:	f36f 531e 	bfc	r3, #20, #11
 800dd14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd18:	4620      	mov	r0, r4
 800dd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd50 <scalbn+0xf0>)
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	2200      	movs	r2, #0
 800dd20:	e7d8      	b.n	800dcd4 <scalbn+0x74>
 800dd22:	bf00      	nop
 800dd24:	f3af 8000 	nop.w
 800dd28:	c2f8f359 	.word	0xc2f8f359
 800dd2c:	01a56e1f 	.word	0x01a56e1f
 800dd30:	8800759c 	.word	0x8800759c
 800dd34:	7e37e43c 	.word	0x7e37e43c
 800dd38:	8800759c 	.word	0x8800759c
 800dd3c:	fe37e43c 	.word	0xfe37e43c
 800dd40:	c2f8f359 	.word	0xc2f8f359
 800dd44:	81a56e1f 	.word	0x81a56e1f
 800dd48:	43500000 	.word	0x43500000
 800dd4c:	ffff3cb0 	.word	0xffff3cb0
 800dd50:	3c900000 	.word	0x3c900000
 800dd54:	00000000 	.word	0x00000000

0800dd58 <floor>:
 800dd58:	ec51 0b10 	vmov	r0, r1, d0
 800dd5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800dd68:	2e13      	cmp	r6, #19
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	4680      	mov	r8, r0
 800dd70:	dc34      	bgt.n	800dddc <floor+0x84>
 800dd72:	2e00      	cmp	r6, #0
 800dd74:	da17      	bge.n	800dda6 <floor+0x4e>
 800dd76:	a332      	add	r3, pc, #200	@ (adr r3, 800de40 <floor+0xe8>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f7f2 faae 	bl	80002dc <__adddf3>
 800dd80:	2200      	movs	r2, #0
 800dd82:	2300      	movs	r3, #0
 800dd84:	f7f2 fef0 	bl	8000b68 <__aeabi_dcmpgt>
 800dd88:	b150      	cbz	r0, 800dda0 <floor+0x48>
 800dd8a:	2c00      	cmp	r4, #0
 800dd8c:	da55      	bge.n	800de3a <floor+0xe2>
 800dd8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dd92:	432c      	orrs	r4, r5
 800dd94:	2500      	movs	r5, #0
 800dd96:	42ac      	cmp	r4, r5
 800dd98:	4c2b      	ldr	r4, [pc, #172]	@ (800de48 <floor+0xf0>)
 800dd9a:	bf08      	it	eq
 800dd9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dda0:	4621      	mov	r1, r4
 800dda2:	4628      	mov	r0, r5
 800dda4:	e023      	b.n	800ddee <floor+0x96>
 800dda6:	4f29      	ldr	r7, [pc, #164]	@ (800de4c <floor+0xf4>)
 800dda8:	4137      	asrs	r7, r6
 800ddaa:	ea01 0307 	and.w	r3, r1, r7
 800ddae:	4303      	orrs	r3, r0
 800ddb0:	d01d      	beq.n	800ddee <floor+0x96>
 800ddb2:	a323      	add	r3, pc, #140	@ (adr r3, 800de40 <floor+0xe8>)
 800ddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb8:	f7f2 fa90 	bl	80002dc <__adddf3>
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f7f2 fed2 	bl	8000b68 <__aeabi_dcmpgt>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d0eb      	beq.n	800dda0 <floor+0x48>
 800ddc8:	2c00      	cmp	r4, #0
 800ddca:	bfbe      	ittt	lt
 800ddcc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ddd0:	4133      	asrlt	r3, r6
 800ddd2:	18e4      	addlt	r4, r4, r3
 800ddd4:	ea24 0407 	bic.w	r4, r4, r7
 800ddd8:	2500      	movs	r5, #0
 800ddda:	e7e1      	b.n	800dda0 <floor+0x48>
 800dddc:	2e33      	cmp	r6, #51	@ 0x33
 800ddde:	dd0a      	ble.n	800ddf6 <floor+0x9e>
 800dde0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800dde4:	d103      	bne.n	800ddee <floor+0x96>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	f7f2 fa77 	bl	80002dc <__adddf3>
 800ddee:	ec41 0b10 	vmov	d0, r0, r1
 800ddf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ddfa:	f04f 37ff 	mov.w	r7, #4294967295
 800ddfe:	40df      	lsrs	r7, r3
 800de00:	4207      	tst	r7, r0
 800de02:	d0f4      	beq.n	800ddee <floor+0x96>
 800de04:	a30e      	add	r3, pc, #56	@ (adr r3, 800de40 <floor+0xe8>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	f7f2 fa67 	bl	80002dc <__adddf3>
 800de0e:	2200      	movs	r2, #0
 800de10:	2300      	movs	r3, #0
 800de12:	f7f2 fea9 	bl	8000b68 <__aeabi_dcmpgt>
 800de16:	2800      	cmp	r0, #0
 800de18:	d0c2      	beq.n	800dda0 <floor+0x48>
 800de1a:	2c00      	cmp	r4, #0
 800de1c:	da0a      	bge.n	800de34 <floor+0xdc>
 800de1e:	2e14      	cmp	r6, #20
 800de20:	d101      	bne.n	800de26 <floor+0xce>
 800de22:	3401      	adds	r4, #1
 800de24:	e006      	b.n	800de34 <floor+0xdc>
 800de26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800de2a:	2301      	movs	r3, #1
 800de2c:	40b3      	lsls	r3, r6
 800de2e:	441d      	add	r5, r3
 800de30:	4545      	cmp	r5, r8
 800de32:	d3f6      	bcc.n	800de22 <floor+0xca>
 800de34:	ea25 0507 	bic.w	r5, r5, r7
 800de38:	e7b2      	b.n	800dda0 <floor+0x48>
 800de3a:	2500      	movs	r5, #0
 800de3c:	462c      	mov	r4, r5
 800de3e:	e7af      	b.n	800dda0 <floor+0x48>
 800de40:	8800759c 	.word	0x8800759c
 800de44:	7e37e43c 	.word	0x7e37e43c
 800de48:	bff00000 	.word	0xbff00000
 800de4c:	000fffff 	.word	0x000fffff

0800de50 <_init>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr

0800de5c <_fini>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	bf00      	nop
 800de60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de62:	bc08      	pop	{r3}
 800de64:	469e      	mov	lr, r3
 800de66:	4770      	bx	lr
